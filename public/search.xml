<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AI-PaddleHub的体验使用</title>
    <url>/article/1959613013.html</url>
    <content><![CDATA[<p>​        最近体验了一下比较火的AI项目，<a href="https://github.com/PaddlePaddle/PaddleHub">PaddleHub</a>，对于python我是陌生的，所以下面是作为新手的一些操作指南，保证能够正确的尝试到这个项目的有趣之处。</p>
<p>​        <a href="https://github.com/PaddlePaddle/PaddleHub/blob/release/v2.0.0-beta/README_ch.md">官网操作指南</a></p>
<h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><ol>
<li>Python&gt;=3.6</li>
<li>PaddlePaddle&gt;=2.0.0rc</li>
</ol>
<h3 id="环境更新"><a href="#环境更新" class="headerlink" title="环境更新"></a>环境更新</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade setuptools</span><br></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="paddlepaddle的安装"><a href="#paddlepaddle的安装" class="headerlink" title="paddlepaddle的安装"></a>paddlepaddle的安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install paddlepaddle&#x3D;&#x3D;2.0.0rc</span><br></pre></td></tr></table></figure>
<h4 id="paddlehub的安装"><a href="#paddlehub的安装" class="headerlink" title="paddlehub的安装"></a>paddlehub的安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install paddlehub --upgrade -i https://mirrors.aliyun.com/pypi/simple  --default-timeout=100</span><br></pre></td></tr></table></figure>
<h4 id="依赖库安装"><a href="#依赖库安装" class="headerlink" title="依赖库安装"></a>依赖库安装</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install matplotlib</span><br></pre></td></tr></table></figure>
<h3 id="模型库的下载"><a href="#模型库的下载" class="headerlink" title="模型库的下载"></a>模型库的下载</h3><p>​        下载模型，PaddleHub必须在访问外网的情况下才能下载。你可以现在网络条件好的环境下，先下载安装对应的module，之后将安装好module 完整的拷贝到你需要的机器上，放在<code>HUB_HOME</code>下。<a href="https://github.com/PaddlePaddle/PaddleHub/blob/release/v1.7/docs/tutorial/cmdintro.md#paddlehub%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7">关于<code>HUB_HOME</code>的解释参考</a></p>
<p>​        <a href="https://paddlepaddle.org.cn/hublist">PaddleHub支持模型列表</a>,我们可以在这个地址上找到所有需要的模型，然后我们通过手动的下载，比如<code>deeplabv3p_xception65_humanseg</code><a href="https://paddlepaddle.org.cn/hubdetail?name=deeplabv3p_xception65_humanseg&amp;en_category=ImageSegmentation">模型下载</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hub install deeplabv3p_xception65_humanseg&#x3D;&#x3D;1.1.1</span><br></pre></td></tr></table></figure>
<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><h4 id="人像抠图"><a href="#人像抠图" class="headerlink" title="人像抠图"></a>人像抠图</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hub run deeplabv3p_xception65_humanseg  --input_path test_image.jpg  --visualization=True --output_dir=<span class="string">&quot;human_output&quot;</span></span><br></pre></td></tr></table></figure>
<p><code>如果你开始没有下载模型库，则这个执行的过程会超级的慢，所以一般建议先手动的安装模型库</code></p>
]]></content>
      <categories>
        <category>AI</category>
        <category>PaddleHub</category>
      </categories>
      <tags>
        <tag>PaddleHub</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7-163yum源下载</title>
    <url>/article/2361785990.html</url>
    <content><![CDATA[<p>我们在centos7上下载东西的时候，有时候自带的源里面没有我们需要的软件，所有我们需要更换源来进行下载</p>
<h3 id="一，下载repo文件"><a href="#一，下载repo文件" class="headerlink" title="一，下载repo文件"></a>一，下载repo文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;mirrors.163.com&#x2F;.help&#x2F;CentOS7-Base-163.repo</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -o CentOS7-Base-163.repo http:&#x2F;&#x2F;mirrors.163.com&#x2F;.help&#x2F;CentOS7-Base-163.repo</span><br></pre></td></tr></table></figure>
<h3 id="二，备份并且替代系统的repo文件"><a href="#二，备份并且替代系统的repo文件" class="headerlink" title="二，备份并且替代系统的repo文件"></a>二，备份并且替代系统的repo文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp  CentOS7-Base-163.repo  &#x2F;etc&#x2F;yum.repos.d&#x2F; </span><br><span class="line"></span><br><span class="line">cd &#x2F;etc&#x2F;yum.repos.d&#x2F; </span><br><span class="line"></span><br><span class="line">mv CentOS-Base.repo CentOS-Base.repo.bak </span><br><span class="line"></span><br><span class="line">mv CentOS7-Base-163.repo CentOS-Base.repo</span><br></pre></td></tr></table></figure>
<h3 id="三，执行yum源更新命令"><a href="#三，执行yum源更新命令" class="headerlink" title="三，执行yum源更新命令"></a>三，执行yum源更新命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum clean all </span><br><span class="line"></span><br><span class="line">yum makecache </span><br><span class="line"></span><br><span class="line">yum update</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Centos7</category>
      </categories>
      <tags>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7-epel源下载</title>
    <url>/article/3859923575.html</url>
    <content><![CDATA[<h3 id="一，什么是epel"><a href="#一，什么是epel" class="headerlink" title="一，什么是epel"></a>一，什么是epel</h3><p><strong>EPEL的全称叫 Extra Packages for Enterprise Linux</strong> 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。</p>
<p>如果你知道rpmfusion.org的话，拿 rpmfusion 做比较还是很恰当的，rpmfusion 主要为桌面发行版提供大量rpm包，而<strong><em>EPEL则为服务器版本提供大量的rpm包，而且大多数rpm包在官方 repository 中是找不到的\</em></strong></p>
<p>另外一个特点是<strong>绝大多数rpm包要比官方repository 的rpm包版本要来得新</strong>。所以，我们有时候在yum下载的时候如果没有找到某个包或者版本过低，可以使用这个方式来尝试。</p>
<h3 id="二，yum下载"><a href="#二，yum下载" class="headerlink" title="二，yum下载"></a>二，yum下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Centos7</category>
      </categories>
      <tags>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7-libreoffice安装和启动</title>
    <url>/article/3025513893.html</url>
    <content><![CDATA[<p>​    centos7下的文档转码的利器<code>libreoffice</code>，下面介绍一下centos7平台上对于这个软件的安装</p>
<h3 id="libreoffice下载"><a href="#libreoffice下载" class="headerlink" title="libreoffice下载"></a>libreoffice下载</h3><p><a href="https://www.libreoffice.org/download/download/">libreoffice下载</a>，在这里可以下载LO的最新的版本</p>
<p>这个是网上找的镜像，<a href="http://mirrors.ustc.edu.cn/tdf/libreoffice/stable/">可以参考</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">LibreOffice_6.4.3_Linux_x86-64_rpm_langpack_zh-CN.tar</span><br><span class="line">LibreOffice_6.4.3_Linux_x86-64_rpm.tar.gz</span><br><span class="line">LibreOffice_6.4.3_Linux_x86-64_rpm_sdk.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf LibreOffice_6.4.3_Linux_x86-64_rpm_langpack_zh-CN.tar -C /root/libreoffice</span><br><span class="line">tar -zxvf LibreOffice_6.4.3_Linux_x86-64_rpm.tar.gz -C /root/libreoffice</span><br><span class="line">tar -zxvf LibreOffice_6.4.3_Linux_x86-64_rpm_sdk.tar.gz -C /root/libreoffice</span><br></pre></td></tr></table></figure>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>进入每个目录下的RPMS目录下使用以下命令执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum localinstall *.rpm</span><br></pre></td></tr></table></figure>
<h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install cairo</span><br><span class="line">yum install cups-libs</span><br><span class="line">yum install libSM</span><br></pre></td></tr></table></figure>
<h4 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum groupinstall &quot;fonts&quot;</span><br></pre></td></tr></table></figure>
<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">libreoffice6.4 --headless --invisible --convert-to pdf test.docx --outdir /data/file</span><br></pre></td></tr></table></figure>
<h3 id="bug提交"><a href="#bug提交" class="headerlink" title="bug提交"></a>bug提交</h3><p>在使用的过程中，我发现了一个bug，影响了我产品的功能，所有让社区的管理帮忙提交了bug修复，<a href="https://bbs.libreofficechina.org/thread-2616-1-1.html">见下</a></p>
]]></content>
      <categories>
        <category>Media</category>
        <category>doc</category>
      </categories>
      <tags>
        <tag>libreoffice</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7-openoffice安装和启动</title>
    <url>/article/1736132591.html</url>
    <content><![CDATA[<p>  本文介绍了openoffice在Centos7下的安装和启动以及使用的方法，供大家学习和参考。</p>
<h3 id="openoffice包的下载"><a href="#openoffice包的下载" class="headerlink" title="openoffice包的下载"></a>openoffice包的下载</h3><p><a href="http://www.openoffice.org/download/">openoffice下载</a></p>
<p><img src="/images/openoffice/openoffice.png" alt="open"></p>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf Apache_OpenOffice_4.1.8_Linux_x86-64_install-rpm_zh-CN.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="进入解压目录"><a href="#进入解压目录" class="headerlink" title="进入解压目录"></a>进入解压目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd zh-CN/RPMS</span><br></pre></td></tr></table></figure>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum localinstall *.rpm</span><br></pre></td></tr></table></figure>
<p><code>装完后会在当前目录下生成一个desktop-integration目录</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd zh-CN&#x2F;RPMS&#x2F;desktop-integration&#x2F;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh openoffice4.1.5-redhat-menus-4.1.5-9789.noarch.rpm</span><br></pre></td></tr></table></figure>
<h4 id="下载依赖包"><a href="#下载依赖包" class="headerlink" title="下载依赖包"></a>下载依赖包</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install libXext.x86_64</span><br></pre></td></tr></table></figure>
<h4 id="下载java环境"><a href="#下载java环境" class="headerlink" title="下载java环境"></a>下载java环境</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install jre java-devel</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/opt/openoffice4/program/soffice -headless -accept=<span class="string">&quot;socket,host=127.0.0.1,port=8100;urp;&quot;</span> -nofirststartwizard</span><br></pre></td></tr></table></figure>
<h3 id="JODConverter下载"><a href="#JODConverter下载" class="headerlink" title="JODConverter下载"></a>JODConverter下载</h3><p><a href="https://sourceforge.net/projects/jodconverter/">jodConverter下载</a></p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip jodconverter-2.2.2.zip</span><br></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><code>必须先启动openoffice的服务，然后再使用这个命令行</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar jodconverter-2.2.2/lib/jodconverter-cli-2.2.2.jar  inputfileName outputfileName</span><br></pre></td></tr></table></figure>
<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar jodconverter-2.2.2/lib/jodconverter-cli-2.2.2.jar  media/01-自然语言处理-中文分词算法的实现.pptx.pptx  media/o1.pdf</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Media</category>
        <category>doc</category>
      </categories>
      <tags>
        <tag>openoffice</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7-yum的使用</title>
    <url>/article/1714992348.html</url>
    <content><![CDATA[<p>记录yum的使用</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="搜索指定的版本安装"><a href="#搜索指定的版本安装" class="headerlink" title="搜索指定的版本安装"></a>搜索指定的版本安装</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum list --showduplicates xxx</span><br></pre></td></tr></table></figure>
<h4 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install yum-plugin-downloadonly</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install fontconfig --downloadonly --downloaddir&#x3D;&#x2F;root&#x2F;wei&#x2F;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Centos7</category>
      </categories>
      <tags>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7-zsh的使用和配置</title>
    <url>/article/192192511.html</url>
    <content><![CDATA[<p>​     本文主要是记录centos7搭建自己个性的命令行。</p>
<h3 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install zsh</span><br></pre></td></tr></table></figure>
<h4 id="将其设置为默认shell"><a href="#将其设置为默认shell" class="headerlink" title="将其设置为默认shell"></a>将其设置为默认shell</h4><p>~~~`<br>chsh -s /bin/zsh<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;可以通过echo $SHELL来查看当前默认的shell，如果没有改为&#x2F;bin&#x2F;zsh,那么需要重新启动shell&#96;</span><br><span class="line"></span><br><span class="line">### 安装oh-my-zsh</span><br><span class="line"></span><br><span class="line">[地址](https:&#x2F;&#x2F;github.com&#x2F;ohmyzsh&#x2F;ohmyzsh)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    sh -c “$(wget -O- <a href="https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;">https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 配置文件</span><br><span class="line"></span><br><span class="line">​	默认的配置文件是在&#96;&#x2F;root&#x2F;.zshrc&#96;，可以通过配置文件来配置一下插件以及功能</span><br><span class="line"></span><br><span class="line">##### 主题修改</span><br><span class="line"></span><br><span class="line">在&#96;.zshrc&#96;中找到&#96;ZSH_THEME&#96;，即可修改主题，[主题地址](https:&#x2F;&#x2F;github.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;wiki&#x2F;themes)可自己修改</span><br><span class="line"></span><br><span class="line">##### zsh扩展</span><br><span class="line"></span><br><span class="line">​	在&#96;&#x2F;root&#x2F;.zshrc&#96;中找到&#96;plugins&#96;关键字，就可以自定义启用的插件了，目前插件存放在workspace上</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Centos7</category>
      </categories>
      <tags>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7-常用的命令</title>
    <url>/article/2689943165.html</url>
    <content><![CDATA[<p>记录一下自己常用的centos7上的命令行</p>
<h3 id="mount挂载"><a href="#mount挂载" class="headerlink" title="mount挂载"></a>mount挂载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">虚拟机和主机共享目录</span><br><span class="line">mount -t cifs &#x2F;&#x2F;192.168.30.97&#x2F;code &#x2F;mnt -o username&#x3D;Administrator,password&#x3D;Helios</span><br><span class="line"></span><br><span class="line">&#x2F;code 是主机上的目录，需要设置为共享的</span><br><span class="line">username 为主机的用户名</span><br><span class="line">password 是主机的密码</span><br><span class="line">&#x2F;mnt 是虚拟机上的目录</span><br><span class="line"></span><br><span class="line">卸载：</span><br><span class="line">umount &#x2F;mnt</span><br><span class="line">卸载失败可以重启服务器</span><br></pre></td></tr></table></figure>
<h3 id="nohup常驻服务"><a href="#nohup常驻服务" class="headerlink" title="nohup常驻服务"></a>nohup常驻服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linux平台上，要在后台运行脚本的话，一般是在命令之后加上&amp;即可。</span><br><span class="line">常驻服务的运行，退出终端也可以的命令行</span><br><span class="line">nohup</span><br><span class="line">具体方法</span><br><span class="line">nohup .&#x2F;videotool &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="查看系统的状态的命令"><a href="#查看系统的状态的命令" class="headerlink" title="查看系统的状态的命令"></a>查看系统的状态的命令</h3><h5 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure>
<h5 id="查看磁盘使用"><a href="#查看磁盘使用" class="headerlink" title="查看磁盘使用"></a>查看磁盘使用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df -h </span><br></pre></td></tr></table></figure>
<h5 id="查看文件大小"><a href="#查看文件大小" class="headerlink" title="查看文件大小"></a>查看文件大小</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -sh 11.mkv</span><br></pre></td></tr></table></figure>
<h5 id="查看进程的线程数"><a href="#查看进程的线程数" class="headerlink" title="查看进程的线程数"></a>查看进程的线程数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -T -p pid</span><br></pre></td></tr></table></figure>
<h5 id="查看centos7的物理核数"><a href="#查看centos7的物理核数" class="headerlink" title="查看centos7的物理核数"></a>查看centos7的物理核数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;cpuinfo| grep &quot;physical id&quot;| sort| uniq| wc -l</span><br></pre></td></tr></table></figure>
<h5 id="查看centos7的逻辑核数"><a href="#查看centos7的逻辑核数" class="headerlink" title="查看centos7的逻辑核数"></a>查看centos7的逻辑核数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;cpuinfo| grep &quot;processor&quot;| wc -l</span><br></pre></td></tr></table></figure>
<h5 id="测试系统的io速度"><a href="#测试系统的io速度" class="headerlink" title="测试系统的io速度"></a>测试系统的io速度</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time dd bs&#x3D;4M count&#x3D;1024 if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;test_02 conv&#x3D;fdatasync</span><br></pre></td></tr></table></figure>
<h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp  -rfd   .&#x2F;oldname  .&#x2F;newname</span><br><span class="line">-r 复制目录</span><br><span class="line">-f 强制复制</span><br><span class="line">-d 复制软连接</span><br><span class="line"></span><br><span class="line">忽略冲突复制</span><br><span class="line">\cp  -rfd   .&#x2F;oldname  .&#x2F;newname </span><br></pre></td></tr></table></figure>
<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">基本格式：</span><br><span class="line">* * * * * command  </span><br><span class="line">含义：</span><br><span class="line">分 时 天 月 周  </span><br><span class="line">使用*&#x2F;n 表示此字段上每隔n执行一次，同时注意如果低时间使用了，会覆盖高时间的*&#x2F;n,不要同时使用某一天与一周的某一天，如果这个两个相等，则会执行两次</span><br></pre></td></tr></table></figure>
<h5 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -r  这个表示删除所有的定时任务，如果需要删除单个，则使用crontab -e 进行编辑，然后删除某一行</span><br></pre></td></tr></table></figure>
<h3 id="获取服务运行时使用的内存"><a href="#获取服务运行时使用的内存" class="headerlink" title="获取服务运行时使用的内存"></a>获取服务运行时使用的内存</h3><p><img src="/images/linux/cache.png" alt="cache.png"></p>
<h3 id="控制进程使用cpu数目"><a href="#控制进程使用cpu数目" class="headerlink" title="控制进程使用cpu数目"></a>控制进程使用cpu数目</h3><h5 id="获取进程id"><a href="#获取进程id" class="headerlink" title="获取进程id"></a>获取进程id</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pgrep  -f   servername</span><br><span class="line"></span><br><span class="line">pidof   servername</span><br></pre></td></tr></table></figure>
<h5 id="设置CPU使用"><a href="#设置CPU使用" class="headerlink" title="设置CPU使用"></a>设置CPU使用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意： 默认情况下，taskset不会影响进程的所有线程（LWP）。使用任务集的“-a”选项来影响流程中的所有线程</span><br><span class="line"></span><br><span class="line">一般可以这样设置：   taskset   -apc  0   8991     (这个目前最有效）</span><br></pre></td></tr></table></figure>
<h3 id="脚本中生成随机数"><a href="#脚本中生成随机数" class="headerlink" title="脚本中生成随机数"></a>脚本中生成随机数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UUID&#x3D;&#96;echo $RANDOM&#96;</span><br></pre></td></tr></table></figure>
<h3 id="记录程序运行的资源到文件中"><a href="#记录程序运行的资源到文件中" class="headerlink" title="记录程序运行的资源到文件中"></a>记录程序运行的资源到文件中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y time</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;time -v -o video.log ffmpeg -i xxx.mp4</span><br></pre></td></tr></table></figure>
<h3 id="查看机器是物理机还是虚拟机"><a href="#查看机器是物理机还是虚拟机" class="headerlink" title="查看机器是物理机还是虚拟机"></a>查看机器是物理机还是虚拟机</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dmidecode -s system-product-name</span><br></pre></td></tr></table></figure>
<p>结果如图：</p>
<p><img src="/images/linux/syss.png" alt="syss.png"></p>
<p><img src="/images/linux/sysv.png" alt="sysv.png"></p>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h5 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h5><p>搜索文件中包含某个单词</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -rn  weiyang *</span><br></pre></td></tr></table></figure>
<h5 id="过滤本身"><a href="#过滤本身" class="headerlink" title="过滤本身"></a>过滤本身</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef | grep vim |grep -v grep</span><br></pre></td></tr></table></figure>
<h3 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h3><p>centos7常常会遇到一些编码问题，我们可以通过命令行来进行一些编码的转码</p>
<h5 id="enca"><a href="#enca" class="headerlink" title="enca"></a><a href="https://www.2cto.com/os/201404/295528.html">enca</a></h5><p>支持的编码比较少，一些无法转换，如UTF16,UCS-2就无法通过这个转换</p>
<p>直接识别字符集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enca -L zh_CN test.cpp</span><br></pre></td></tr></table></figure>
<p> 转换命令简单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enca -L zh_CN -x UTF-8 test.cpp or enca -L zh_CN -x GB2312 test.cpp</span><br></pre></td></tr></table></figure>
<h5 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h5><p>可以支持多种编码，有一个缺点，必须知道原来文件的编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iconv  -f UTF-16 -t UTF-8 b.txt -o uni3.txt</span><br></pre></td></tr></table></figure>
<h5 id="任意转换"><a href="#任意转换" class="headerlink" title="任意转换"></a>任意转换</h5><p>所有可以通过enca和iconv两者结合来使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iconv -f $(enca -L zh_CN b.txt |head -n 1|cut -d &quot;;&quot; -f 2) -t UTF-8 b.txt -o b.txt</span><br></pre></td></tr></table></figure>
<p>leopard修改<code>/opt/dana/leopard/python/fileConv.py</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">codecmd&#x3D; &#39;iconv -f $(enca -L zh_CN %s |head -n 1|cut -d &quot;;&quot; -f 2) -t UTF-8 %s -o %s&#39;% (input_name, input_name, input_name)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Centos7</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7-控制系统的CPU</title>
    <url>/article/3687663458.html</url>
    <content><![CDATA[<p>这里是linux的学习基地，我们可以学习一些linux的常用知识</p>
]]></content>
      <categories>
        <category>Centos7</category>
      </categories>
  </entry>
  <entry>
    <title>centos7-网络设置</title>
    <url>/article/3594159119.html</url>
    <content><![CDATA[<p>配置centos7的网络，让其可以正常的连接网络</p>
<h3 id="一，打开网络配置所在的文件"><a href="#一，打开网络配置所在的文件" class="headerlink" title="一，打开网络配置所在的文件"></a>一，打开网络配置所在的文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts</span><br><span class="line">vi ifcfg-ens160 (不同的系统，文件名不同)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TYPE&#x3D;Ethernet</span><br><span class="line">PROXY_METHOD&#x3D;none</span><br><span class="line">BROWSER_ONLY&#x3D;no</span><br><span class="line">#设置静态ip还是动态IP</span><br><span class="line">BOOTPROTO&#x3D;static</span><br><span class="line">DEFROUTE&#x3D;yes</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;no</span><br><span class="line">IPV6INIT&#x3D;yes</span><br><span class="line">IPV6_AUTOCONF&#x3D;yes</span><br><span class="line">IPV6_DEFROUTE&#x3D;yes</span><br><span class="line">IPV6_FAILURE_FATAL&#x3D;no</span><br><span class="line">IPV6_ADDR_GEN_MODE&#x3D;stable-privacy</span><br><span class="line">NAME&#x3D;ens160</span><br><span class="line">UUID&#x3D;750fb5d2-4bff-437d-ab4e-75eaf038429d</span><br><span class="line">DEVICE&#x3D;ens160</span><br><span class="line">#开机自启动</span><br><span class="line">ONBOOT&#x3D;yes</span><br><span class="line">#静态ip地址</span><br><span class="line">IPADDR&#x3D;192.168.50.72</span><br><span class="line">#静态网关</span><br><span class="line">NETMASK&#x3D;255.255.255.0</span><br><span class="line">#路由</span><br><span class="line">GATEWAY&#x3D;192.168.50.1</span><br></pre></td></tr></table></figure>
<p>设置好之后，重启网络服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>
<h3 id="二，配置域名解析"><a href="#二，配置域名解析" class="headerlink" title="二，配置域名解析"></a>二，配置域名解析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;resolv.conf</span><br></pre></td></tr></table></figure>
<p>添加内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nameserver   8.8.8.8</span><br><span class="line"></span><br><span class="line">nameserver   8.8.4.4</span><br><span class="line"></span><br><span class="line">nameserver    114.114.114.114</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Centos7</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp-centos7常用环境变量的设置</title>
    <url>/article/1768093973.html</url>
    <content><![CDATA[<p>我们在centos7开发的cpp的时候，在编译的时候需要设置一些常有的环境变量，如头文件的路径，动态库的路径</p>
<h3 id="设置c语言的头文件的搜索路径"><a href="#设置c语言的头文件的搜索路径" class="headerlink" title="设置c语言的头文件的搜索路径"></a>设置c语言的头文件的搜索路径</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export C_INCLUDE_PATH &#x3D;</span><br></pre></td></tr></table></figure>
<h3 id="设置c语言的链接库的搜索路径"><a href="#设置c语言的链接库的搜索路径" class="headerlink" title="设置c语言的链接库的搜索路径"></a>设置c语言的链接库的搜索路径</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LIBRARY_PATH &#x3D; </span><br></pre></td></tr></table></figure>
<h3 id="设置cpp的头文件的搜索路径"><a href="#设置cpp的头文件的搜索路径" class="headerlink" title="设置cpp的头文件的搜索路径"></a>设置cpp的头文件的搜索路径</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export CPLUS_INCLUDE_PATH &#x3D; </span><br></pre></td></tr></table></figure>
<h3 id="设置cpp的链接库的搜索路径"><a href="#设置cpp的链接库的搜索路径" class="headerlink" title="设置cpp的链接库的搜索路径"></a>设置cpp的链接库的搜索路径</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LD_LIBRARY_PATH &#x3D; </span><br></pre></td></tr></table></figure>
<h3 id="对于GCC版本的选择"><a href="#对于GCC版本的选择" class="headerlink" title="对于GCC版本的选择"></a>对于GCC版本的选择</h3><p>我们在用cmake编译源码的时候，有时候需要gcc不同的版本，以支持c++11的特性</p>
<p><code>gcc4.8.5以下不支持`</code>gcc5.1.0支持c++11`,我们在编译的时候可以显示的设置编译器的选择,下面是我自己编译的gcc5.1.0版本，这样在编译的时候就会调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export CC&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;gcc</span><br><span class="line">export CXX&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;g++</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Cpp</category>
        <category>gcc</category>
      </categories>
      <tags>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp-devtoolset切换gcc的版本</title>
    <url>/article/2538200340.html</url>
    <content><![CDATA[<p>我们在编译cpp的时候，有时候需要支持c++11/14的一些特性，就需要升级gcc的版本，为了简单的升级，Red Hat提供了scl软件集来为用户提供一种以方便、安全地安装和使用应用程序和运行时环境的多个（而且可能是更新的）版本的方式，同时避免把系统搞乱。下载devtoolset</p>
<p>使用scl升级gcc的步骤</p>
<h3 id="一，安装scl源"><a href="#一，安装scl源" class="headerlink" title="一，安装scl源"></a>一，安装scl源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install centos-release-scl scl-utils-build</span><br></pre></td></tr></table></figure>
<h3 id="二，列出scl有哪些可用的源"><a href="#二，列出scl有哪些可用的源" class="headerlink" title="二，列出scl有哪些可用的源"></a>二，列出scl有哪些可用的源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum list all --enablerepo&#x3D;&#39;centos-sclo-rh&#39; | grep devtoolset</span><br></pre></td></tr></table></figure>
<h3 id="三，安装gcc，g"><a href="#三，安装gcc，g" class="headerlink" title="三，安装gcc，g++"></a>三，安装gcc，g++</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install devtoolset-7-gcc devtoolset-7-gcc-c++</span><br></pre></td></tr></table></figure>
<h3 id="四，切换版本"><a href="#四，切换版本" class="headerlink" title="四，切换版本"></a>四，切换版本</h3><p>这个版本的切换仅对当前的环境有用</p>
<h5 id="启动环境"><a href="#启动环境" class="headerlink" title="启动环境"></a>启动环境</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scl enable devtoolset-7 bash</span><br><span class="line">gcc -v</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="退出环境"><a href="#退出环境" class="headerlink" title="退出环境"></a>退出环境</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Cpp</category>
        <category>gcc</category>
      </categories>
      <tags>
        <tag>gcc</tag>
        <tag>devtoolset</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp-gtest集成Lcov代码覆盖率测试</title>
    <url>/article/3264464113.html</url>
    <content><![CDATA[<p>​    做好了单元测试但是别人并不知道我们的单元测试做的如何，是否覆盖了所有的需要被测试的类方法或者变量等，所以我们需要对单测case做一个覆盖率统计。其实本质就是看代码执行时候运行了你需要测试文件里面的所有代码，比如switch分支 if分支等。</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="安装下载lcov"><a href="#安装下载lcov" class="headerlink" title="安装下载lcov"></a>安装下载lcov</h4><pre><code>http://ltp.sourceforge.net/coverage/lcov.php，有rpm包和源码包。（以源码包为例）
</code></pre><p>解压lcov-x.xx.tar.gz，进入源码包，执行make install<br>在命令行执行lcov -v，正确输出版本号即安装成功</p>
<h4 id="增加Lcov编译选项"><a href="#增加Lcov编译选项" class="headerlink" title="增加Lcov编译选项"></a>增加Lcov编译选项</h4><p>​    在项目顶层目录CmakeLists.txt中添加以下编译指令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coverage option</span></span><br><span class="line"><span class="keyword">OPTION</span> (ENABLE_COVERAGE <span class="string">&quot;Use gcov&quot;</span> <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>(STATUS ENABLE_COVERAGE=<span class="variable">$&#123;ENABLE_COVERAGE&#125;</span>)</span><br><span class="line"><span class="keyword">IF</span>(ENABLE_COVERAGE)</span><br><span class="line">    <span class="keyword">SET</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -fprofile-arcs -ftest-coverage&quot;</span>)</span><br><span class="line">    <span class="keyword">SET</span>(CMAKE_C_FLAGS <span class="string">&quot;$&#123;CMAKE_C_FLAGS&#125; -fprofile-arcs -ftest-coverage&quot;</span>)</span><br><span class="line">    <span class="keyword">SET</span>(CMAKE_EXE_LINKER_FLAGS <span class="string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -fprofile-arcs -ftest-coverage&quot;</span>)</span><br><span class="line"><span class="keyword">ENDIF</span>()</span><br></pre></td></tr></table></figure>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol>
<li><p>将cmake编译选项设置为-DENABLE_COVERAGE=OFF …，或者将顶层目录CmakeLists.txt中OPTION (ENABLE_COVERAGE “Use gcov” OFF)编译选项手动设置为ON；</p>
</li>
<li><p>编译产生<code>.gcno</code>文件，运行则产生<code>.gcda</code>（与.gcno对应）文件；</p>
<ul>
<li>我们使用的是<code>cmake编译</code>，则编译后生成的.gcno文件存在build目录下的每个项目中，例如：<img src="/images/cpp/gcno.png" alt="gcno" style="zoom:75%;" /></li>
<li><code>运行</code>我们的测试代码才会产生.gcda文件，如图是运行后产生的。<ul>
<li>若用户进程<code>并非调用 exit 正常退出</code>，覆盖率统计数据就无法输出，也就无从生成报告了。后台服务程序若非专门设计，一旦启动就很少主动退出，用 kill 杀死进程强制退出时就不会调用 exit，因此没有覆盖率统计结果产生。所以必须当前进程退出后才会产生.gcda文件。</li>
</ul>
</li>
</ul>
</li>
<li><p>使用Lcov生成覆盖率统计文件；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcov -d cmake-build-debug -t test -o test.info -b . -c  --no-external</span><br></pre></td></tr></table></figure>
<p>命令参数含义解释如下：</p>
<ul>
<li>-d src_dir： 待覆盖率测试的源码目录，本工程设置为cmake-build-debug；</li>
<li>-t ‘test’: 目标的名称，此处为test；</li>
<li>-o ‘test.info’: 生成的覆盖率文件，可自定义，可不带引号；</li>
<li>-b .：相对目录的起始位置；</li>
<li>-c: capture，采集覆盖率；</li>
</ul>
<p>因为我们是cmake进行编译的，所以我们可以直接在build目录下使用lcov命令生成覆盖率报表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcov -c -o result.info  -b . -d . </span><br></pre></td></tr></table></figure>
</li>
<li><p>使用genhtml生成覆盖率报表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">genhtml -o report test.info</span><br></pre></td></tr></table></figure>
<ul>
<li><p>-o result: 输出的目标文件夹，可带路径，此处为当前目录下的result目录；</p>
</li>
<li><p>test.info: 覆盖率的统计文件；</p>
</li>
</ul>
<p>如果我们需要对覆盖率报表进行过滤，比如把include文件或者系统的文件给过滤掉，可以使用下面的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcov --remove result.info  &#x27;/usr/*&#x27; &#x27;*/inc/*&#x27; -o finalresult.info</span><br><span class="line">genhtml finalresult.info  -o cppreport</span><br></pre></td></tr></table></figure>
</li>
<li><p>html报表生成如下，这个是未过滤的。<img src="/images/cpp/html.png" alt="html.png"></p>
</li>
</ol>
<p>相关文章参考：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_43892514/article/details/107822769">这篇文章</a>对lcov讲解的比较详细以及cmake添加的选项比较好用，但是对生成的.gcno和.gcda文件在哪里没有说明，对于我这个初学者来说比较的蒙。</li>
<li><a href="https://www.cnblogs.com/zhaoxd07/p/5608177.html">这篇文章</a>对文件生成的位置有详细的说明。</li>
</ul>
]]></content>
      <categories>
        <category>Cpp</category>
        <category>unitTest</category>
      </categories>
      <tags>
        <tag>gtest</tag>
        <tag>lcov</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp-pistache源码编译之实现cpp restful接口</title>
    <url>/article/2728951675.html</url>
    <content><![CDATA[<p>cpp实现restful类型的接口比较的复杂，我们使用pistache库来解决这个问题，经对比，这个库是速度最快的。</p>
<h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;oktal&#x2F;pistache.git</span><br></pre></td></tr></table></figure>
<h3 id="第三方库更新"><a href="#第三方库更新" class="headerlink" title="第三方库更新"></a>第三方库更新</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><h5 id="依赖下载gcc升级"><a href="#依赖下载gcc升级" class="headerlink" title="依赖下载gcc升级"></a>依赖下载gcc升级</h5><p><a href="http://www.helioswei.top/article/2230395924.html">gcc5.1.0源码编译</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc version &gt;5.1.0 #我们需要支持c++14</span><br></pre></td></tr></table></figure>
<p>我们虽然重新编译安装了gcc，但系统有多个gcc的环境，我们在使用的时候可能还是默认的调用gcc4.8的低级版本，为了解决这个问题，我们可以显示的设置调用，我们需要设置编译器的环境变量，将5.1.0的编译器命令行设置到环境变量中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export CC&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;gcc</span><br><span class="line">export CXX&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;g++</span><br></pre></td></tr></table></figure>
<h5 id="cmake升级"><a href="#cmake升级" class="headerlink" title="cmake升级"></a>cmake升级</h5><p><a href="https://cmake.org/download/">cmake下载</a>，选择最新的下载即可，然后执行安装三部曲</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake version &gt; 3.18.0</span><br></pre></td></tr></table></figure>
<h5 id="curl-devel下载"><a href="#curl-devel下载" class="headerlink" title="curl-devel下载"></a>curl-devel下载</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install curl-devel -y</span><br></pre></td></tr></table></figure>
<h5 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd pistache</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake -G &quot;Unix Makefiles&quot; -DCMAKE_BUILD_TYPE&#x3D;Release -DPISTACHE_BUILD_EXAMPLES&#x3D;true -DPISTACHE_BUILD_TESTS&#x3D;true -DPISTACHE_BUILD_DOCS&#x3D;false -DPISTACHE_USE_SSL&#x3D;true -DCMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;pistache ..</span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>注意，这个在使用的时候需要选择c++的标准,设置</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g++ -std&#x3D;c++14 #一般常用的是c++11</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Cpp</category>
        <category>restful</category>
      </categories>
      <tags>
        <tag>pistache</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp-日志库LOG的使用</title>
    <url>/article/1373770285.html</url>
    <content><![CDATA[<p>​    在开发的时候，我们经常要写日志，这里提供一个日志库的使用方法；</p>
<p>​    目前我常用的cpp的日志库是这个<a href="https://github.com/amrayn/easyloggingpp">easyloggingcpp</a>，官网有详细的一些说明怎么使用的，我这里记录一些使用中需要注意的地方：</p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>easyloggingcpp编译的时候比较的简单，直接把easyloggingcpp.h和easyloggingcpp.cpp放到自己的项目中进行编译就好了。</p>
<h3 id="多线程中使用"><a href="#多线程中使用" class="headerlink" title="多线程中使用"></a>多线程中使用</h3><p>在多线程中使用，需要设置几个比较重要的点，不然就会抛出异常的错误，导致程序中断，有以下几点</p>
<ol>
<li><p>在编译的时候需要需要添加参数，<code>-DELPP_THREAD_SAFE</code>用以支持多线程，使用cmake进行编译时，需要在Cmakefile文件中设置如下参数，并且cmake的版本需要在3.0以上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET(CMAKE_CXX_FLAGS &quot;-DELPP_THREAD_SAFE&quot;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在使用的文件中，需要预定义一个变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define ELPP_THREAD_SAFE</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="主进程使用"><a href="#主进程使用" class="headerlink" title="主进程使用"></a>主进程使用</h3><p>我们需要在程序的入口位置设置下面的环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INITIALIZE_EASYLOGGINGPP</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Cpp</category>
        <category>log</category>
      </categories>
      <tags>
        <tag>easyloggingcpp</tag>
      </tags>
  </entry>
  <entry>
    <title>cuda-cuda10.0安装</title>
    <url>/article/2055195890.html</url>
    <content><![CDATA[<p>​        在转码的过程中，我们可以使用硬件来进行转码的加速，今天记录一下在Centos7环境下安装驱动以及cuda模块。</p>
<h3 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h3><p><code>如果打算安装CUDA10.0及以上的版本则不需要单独安装驱动，cuda10.0自带驱动驱动</code><strong>忽略该驱动的安装</strong></p>
<p><a href="https://www.nvidia.cn/Download/Find.aspx?lang=cn&amp;QNF=1">驱动下载地址</a></p>
<p>例如我们下载Quadro P2000 linux64的驱动</p>
<p><img src="/images/cuda/图片1.png" alt="图片1.png"></p>
<p><img src="/images/cuda/图片2.png" alt="图片2.png"></p>
<p>之所以安装这个驱动是因为要安装的cuda10.0也是410的，之后运行安装驱动程序就好了。</p>
<h3 id="安装cuda10-0"><a href="#安装cuda10-0" class="headerlink" title="安装cuda10.0"></a>安装cuda10.0</h3><h5 id="1，下载安装包"><a href="#1，下载安装包" class="headerlink" title="1，下载安装包"></a>1，下载安装包</h5><p>​    <a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=CentOS&amp;target_version=7&amp;target_type=runfilelocal">安装包下载</a>    在该网站上下载安装包</p>
<p><img src="/images/cuda/图片3.png" alt="图片3.png"></p>
<h5 id="2，版本选择"><a href="#2，版本选择" class="headerlink" title="2，版本选择"></a>2，版本选择</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过以下按钮选择历史版本的cuda，找到10.0下载，然后选择对应的系统</span><br></pre></td></tr></table></figure>
<p><img src="/images/cuda/图片4.png" alt="图片4.png"></p>
<h5 id="3，运行-run文件"><a href="#3，运行-run文件" class="headerlink" title="3，运行.run文件"></a>3，运行.run文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载完安装包放在linux上直接运行.run文件</span><br><span class="line"></span><br><span class="line">chmod +x cuda_10.0.130_410.48_linux.run </span><br><span class="line">.&#x2F;cuda_10.0.130_410.48_linux.run</span><br></pre></td></tr></table></figure>
<h5 id="4，然后一直按回车键直到："><a href="#4，然后一直按回车键直到：" class="headerlink" title="4，然后一直按回车键直到："></a>4，然后一直按回车键直到：</h5><p><img src="/images/cuda/图片5.png" alt="图片5.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">回答：accept</span><br></pre></td></tr></table></figure>
<h5 id="5，是否安装驱动"><a href="#5，是否安装驱动" class="headerlink" title="5，是否安装驱动"></a>5，是否安装驱动</h5><p><img src="/images/cuda/图片6.png" alt="图片6.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">是否安装驱动，这里选择安装：y,因为我们自己没有提前安装驱动，如果提前安装过驱动，这里就不选择安装：n</span><br></pre></td></tr></table></figure>
<h5 id="6，是否安装OpenGL"><a href="#6，是否安装OpenGL" class="headerlink" title="6，是否安装OpenGL"></a>6，是否安装OpenGL</h5><p><img src="/images/cuda/图片7.png" alt="图片7.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择;n</span><br></pre></td></tr></table></figure>
<h5 id="7，是否安装x-config"><a href="#7，是否安装x-config" class="headerlink" title="7，是否安装x-config"></a>7，是否安装x-config</h5><p><img src="/images/cuda/图片8.png" alt="图片8.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择：n</span><br></pre></td></tr></table></figure>
<h5 id="8，是否安装Toolkit"><a href="#8，是否安装Toolkit" class="headerlink" title="8，是否安装Toolkit"></a>8，是否安装Toolkit</h5><p><img src="/images/cuda/图片10.png" alt="图片10.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择：y</span><br></pre></td></tr></table></figure>
<h5 id="9，cuda目录"><a href="#9，cuda目录" class="headerlink" title="9，cuda目录"></a>9，cuda目录</h5><p><img src="/images/cuda/图片11.png" alt="图片11.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直接回车，选择默认安装路径</span><br></pre></td></tr></table></figure>
<h5 id="10，是否创建软连接"><a href="#10，是否创建软连接" class="headerlink" title="10，是否创建软连接"></a>10，是否创建软连接</h5><p><img src="/images/cuda/图片12.png" alt="图片12.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择：y</span><br></pre></td></tr></table></figure>
<h5 id="11，是否安装示例"><a href="#11，是否安装示例" class="headerlink" title="11，是否安装示例"></a>11，是否安装示例</h5><p><img src="/images/cuda/图片13.png" alt="图片13.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为了节约空间，这个不安装</span><br><span class="line">选择：n</span><br></pre></td></tr></table></figure>
<h5 id="12，然后开始安装"><a href="#12，然后开始安装" class="headerlink" title="12，然后开始安装"></a>12，然后开始安装</h5><p><img src="/images/cuda/图片14.png" alt="图片14.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表示安装成功</span><br></pre></td></tr></table></figure>
<h5 id="13，添加配置文件"><a href="#13，添加配置文件" class="headerlink" title="13，添加配置文件"></a>13，添加配置文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim  &#x2F;etc&#x2F;profile</span><br><span class="line">写入：</span><br><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-10.0&#x2F;bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64:$LD_LIBRARY_PATH</span><br><span class="line">保存：</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
<h5 id="14，卸载驱动及cuda"><a href="#14，卸载驱动及cuda" class="headerlink" title="14，卸载驱动及cuda"></a>14，卸载驱动及cuda</h5><p><img src="/images/cuda/图片15.png" alt="图片15.png"></p>
<font color="red"><strong>注意</strong></font>

<p><code>1,千万不要重复安装显卡驱动，会导致系统损坏</code></p>
<p><code>2.升级cuda的时候，一定要将旧版本的cuda卸载干净，否则会出现意想不到的错误</code></p>
<h5 id="15，查看命令"><a href="#15，查看命令" class="headerlink" title="15，查看命令"></a>15，查看命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1，检查显卡类型</span><br><span class="line">yum install pciutils（如果没有这个命令，则下载）</span><br><span class="line">lspci | grep VGA</span><br></pre></td></tr></table></figure>
<p><img src="/images/cuda/图片17.png" alt="图片17.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2，检查安装是否成功</span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>
<p><img src="/images/cuda/图片16.png" alt="图片16.png"></p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h5 id="1，-usr-bin-perl-bad-interpreter-No-such-file-or-directory"><a href="#1，-usr-bin-perl-bad-interpreter-No-such-file-or-directory" class="headerlink" title="1， /usr/bin/perl: bad interpreter: No such file or directory"></a>1， /usr/bin/perl: bad interpreter: No such file or directory</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">yum install perl</span><br></pre></td></tr></table></figure>
<h5 id="2，kernel源安装"><a href="#2，kernel源安装" class="headerlink" title="2，kernel源安装"></a>2，kernel源安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">检查系统版本</span><br><span class="line">uname -a</span><br><span class="line">yum install kernel-devel-$(uname -r) kernel-headers-$(uname -r)</span><br><span class="line">先查看源是否相同，如果没有则需要下载</span><br></pre></td></tr></table></figure>
<h5 id="3，禁用nouveau（对某些版本需要）"><a href="#3，禁用nouveau（对某些版本需要）" class="headerlink" title="3，禁用nouveau（对某些版本需要）"></a>3，禁用nouveau（对某些版本需要）</h5><h6 id="1，修改文件"><a href="#1，修改文件" class="headerlink" title="1，修改文件"></a>1，修改文件</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1，修改文件</span><br><span class="line">cd &#x2F;etc&#x2F;modprobe.d</span><br><span class="line">vim nvidia-installer-disable-nouveau.conf（如果没有这个文件，则手动生成）</span><br><span class="line"> </span><br><span class="line"> 内容：</span><br><span class="line"> # generated by nvidia-installer</span><br><span class="line"> blacklist nouveau</span><br><span class="line"> options nouveau modeset&#x3D;0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="2，备份-initramfs"><a href="#2，备份-initramfs" class="headerlink" title="2，备份 initramfs"></a>2，备份 initramfs</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv &#x2F;boot&#x2F;initramfs-$(uname -r).img &#x2F;boot&#x2F;initramfs-$(uname -r).img.bak</span><br></pre></td></tr></table></figure>
<h6 id="3，重建-initramfs"><a href="#3，重建-initramfs" class="headerlink" title="3，重建 initramfs"></a>3，重建 initramfs</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dracut -v &#x2F;boot&#x2F;initramfs-$(uname -r).img $(uname -r)</span><br></pre></td></tr></table></figure>
<h6 id="4，重启机器"><a href="#4，重启机器" class="headerlink" title="4，重启机器"></a>4，重启机器</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h6 id="5，检查nouveau-driver确保没有被加载"><a href="#5，检查nouveau-driver确保没有被加载" class="headerlink" title="5，检查nouveau driver确保没有被加载"></a>5，检查nouveau driver确保没有被加载</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br><span class="line">没有加载则为空，有加载则如图，说明设置没有生效，需要重新设置</span><br></pre></td></tr></table></figure>
<p><img src="/images/cuda/nouveau.png" alt="nouveau.png"></p>
]]></content>
      <categories>
        <category>Media</category>
        <category>video</category>
      </categories>
      <tags>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-docker常用命令</title>
    <url>/article/2019996800.html</url>
    <content><![CDATA[<p>记录一下自己在工作中常用的docker命令</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install docker</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<p>验证是否可以正常运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><h5 id="镜像构建通过dockfile"><a href="#镜像构建通过dockfile" class="headerlink" title="镜像构建通过dockfile"></a>镜像构建通过dockfile</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -t datatom&#x2F;video-worker:v4.2.0 -f Dockerfile .</span><br></pre></td></tr></table></figure>
<h5 id="镜像打包"><a href="#镜像打包" class="headerlink" title="镜像打包"></a>镜像打包</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker save -o video-worker.v4.2.0.tar datatom&#x2F;video-worker:v4.2.0</span><br></pre></td></tr></table></figure>
<h5 id="镜像导入"><a href="#镜像导入" class="headerlink" title="镜像导入"></a>镜像导入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker load -i video-worker.v4.2.0.tar</span><br></pre></td></tr></table></figure>
<h5 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p><img src="/images/docker/docker.png" alt="docker.png"></p>
<h5 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi IMAGEID </span><br></pre></td></tr></table></figure>
<p>如果当前镜像正在被容器使用，则需要先删除容器，可以使用如下命令删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -a | grep IMAGEID|awk &#39;&#123;print $1&#125;&#39;) -f</span><br><span class="line">docker rmi IMAGEID</span><br></pre></td></tr></table></figure>
<h5 id="删除none镜像"><a href="#删除none镜像" class="headerlink" title="删除none镜像"></a>删除none镜像</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images | grep &#39;&lt;none&gt;&#39;|awk &#39;&#123;print $3&#125;&#39;) -f</span><br></pre></td></tr></table></figure>
<h5 id="镜像运行"><a href="#镜像运行" class="headerlink" title="镜像运行"></a>镜像运行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it e2cbe0447a2b &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p>镜像运行时添加环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -e MEDIA_REDIS_IP&#x3D;127.0.0.1 -e MEDIA_REDIS_PORT&#x3D;5555  -it d3796bd153f8 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h5 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<h5 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop CONTAINERID</span><br></pre></td></tr></table></figure>
<h5 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm CONTAINERID</span><br></pre></td></tr></table></figure>
<h5 id="强制删除"><a href="#强制删除" class="headerlink" title="强制删除"></a>强制删除</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm CONTAINERID -f</span><br></pre></td></tr></table></figure>
<h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><h5 id="修改镜像的tagid"><a href="#修改镜像的tagid" class="headerlink" title="修改镜像的tagid"></a>修改镜像的tagid</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker  tag   f92b7e4509da  datatom&#x2F;image-worker:v4.1.1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg_avfilter的使用详解</title>
    <url>/article/4030313287.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;在ffmpeg，我们对视音频进行一些处理，如添加水印，有个很方便的库，avfilter，</p>
<p>过滤的过程<br>解码后的画面 -&gt; buffer过滤器 -&gt; 其他过滤器 -&gt; buffersink 过滤器 -&gt; 处理好的画面</p>
]]></content>
      <categories>
        <category>Media</category>
        <category>video</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg-内存io模式(内存区做输入或输出)</title>
    <url>/article/2452888490.html</url>
    <content><![CDATA[<p>​    在转码的过程中，我们有时候需要从远程下载文件，当文件很大的时候会占用本地的磁盘空间，同时下载的时间也比较的长，这时候我们考虑直接读取流信息或者写入流信息来进行操作，而不是上传或者下载整个文件来解决。</p>
<h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>​    转码的基础逻辑不变，仅仅是在输入输出读取的方式不同，我们需要自己实现输入输出的函数。</p>
<h4 id="关键结构体"><a href="#关键结构体" class="headerlink" title="关键结构体"></a>关键结构体</h4><p>​    <code>AVIOContext</code>，我们需要初始化这个结构体来存放内存的数据。</p>
<h3 id="内存读取数据"><a href="#内存读取数据" class="headerlink" title="内存读取数据"></a>内存读取数据</h3><p>​        转码的基本流程不变，仅仅是在开始读取数据的时候有些不同</p>
<h4 id="读取本地文件"><a href="#读取本地文件" class="headerlink" title="读取本地文件"></a>读取本地文件</h4><p><img src="/images/ffmpeg/file.png" alt="file"></p>
<h4 id="读取流文件"><a href="#读取流文件" class="headerlink" title="读取流文件"></a>读取流文件</h4><p><img src="/images/ffmpeg/stream.png" alt="stream"></p>
<p><img src="/images/ffmpeg/readstream.png" alt="read"></p>
<h3 id="ffmpeg内存读取数据"><a href="#ffmpeg内存读取数据" class="headerlink" title="ffmpeg内存读取数据"></a>ffmpeg内存读取数据</h3><p>​    如图,<font color="red">红色框</font>内是当输入是流时的处理，<font color="green">绿色框</font>内是当输入是文件时的处理，二选一即可。<img src="/images/ffmpeg/stream/input.png" alt="input.png"></p>
<p><code>fill_iobuffer</code> 函数是我们自己实现的输入流的函数，内容如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">359</span> <span class="comment">//读取流数据</span></span><br><span class="line"><span class="number">360</span> <span class="function"><span class="keyword">int</span> <span class="title">fill_iobuffer</span><span class="params">(<span class="keyword">void</span> *opaque, <span class="keyword">uint8_t</span> *buf, <span class="keyword">int</span> buf_size)</span> </span>&#123;</span><br><span class="line"><span class="number">361</span>     <span class="built_in">string</span> hosts = <span class="string">&quot;192.168.50.31:7480&quot;</span>;</span><br><span class="line"><span class="number">362</span>     <span class="built_in">string</span> ak = <span class="string">&quot;11043ee2070d01eb5740f9870dfe3abd&quot;</span>;</span><br><span class="line"><span class="number">363</span>     <span class="built_in">string</span> sk = <span class="string">&quot;bb31a3a96b829976513ee62b4e28ee3f&quot;</span>;</span><br><span class="line"><span class="number">364</span>     <span class="function">S3::Client <span class="title">client</span><span class="params">(hosts, ak, sk)</span></span>;</span><br><span class="line"><span class="number">365</span>     <span class="keyword">static</span> <span class="keyword">uint64_t</span> offset = <span class="number">0</span>;</span><br><span class="line"><span class="number">366</span>     <span class="keyword">uint64_t</span> num;</span><br><span class="line"><span class="number">367</span>     <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">368</span>         <span class="comment">// num  = client.GetObject(&quot;leopardsrc&quot;, &quot;video-H263-AC3.avi&quot;,offset,</span></span><br><span class="line"><span class="number">369</span>         <span class="comment">// buf_size, (char* )buf);</span></span><br><span class="line"><span class="number">370</span>         num = client.GetObject(<span class="string">&quot;leopardsrc&quot;</span>, <span class="string">&quot;video-H264-AAC.m4v&quot;</span>, offset,</span><br><span class="line"><span class="number">371</span>                                buf_size, (<span class="keyword">char</span> *)buf);</span><br><span class="line"><span class="number">372</span>         offset += num;</span><br><span class="line"><span class="number">373</span>         <span class="keyword">return</span> num;</span><br><span class="line"><span class="number">374</span>     &#125;</span><br><span class="line"><span class="number">375</span>     <span class="keyword">catch</span> (S3::S3Exception &amp;e) &#123;</span><br><span class="line"><span class="number">376</span>         LOG(ERROR) &lt;&lt; e.str();</span><br><span class="line"><span class="number">377</span>         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">378</span>     &#125;</span><br><span class="line"><span class="number">379</span> &#125;   </span><br></pre></td></tr></table></figure>
<h3 id="ffmpeg内存存储数据"><a href="#ffmpeg内存存储数据" class="headerlink" title="ffmpeg内存存储数据"></a>ffmpeg内存存储数据</h3><p>​    如图,<font color="red">红色框</font>内是当输入是流时的处理，<font color="green">绿色框</font>内是当输入是文件时的处理，二选一即可。<img src="/images/ffmpeg/stream/output.png" alt="output.png"></p>
<p><code>write_buffer</code> 函数是我们自己实现的输出流的函数，内容如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">614</span> <span class="function"><span class="keyword">int</span> <span class="title">write_buffer</span><span class="params">(<span class="keyword">void</span> *opaque, <span class="keyword">uint8_t</span> *buf, <span class="keyword">int</span> buf_size)</span> </span>&#123;</span><br><span class="line"><span class="number">627</span>     <span class="keyword">if</span> (!feof(fp_write)) &#123;</span><br><span class="line"><span class="number">634</span>         <span class="keyword">int</span> true_size = fwrite(buf, <span class="number">1</span>, buf_size, fp_write);</span><br><span class="line"><span class="number">635</span>         <span class="keyword">return</span> true_size;</span><br><span class="line"><span class="number">636</span>     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">637</span>         <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="number">638</span>     &#125;</span><br><span class="line"><span class="number">639</span> &#125; </span><br></pre></td></tr></table></figure>
<p>​    目前这个是测试ffmpeg能够支持自己的输出函数，如果是关于s3的输出支持，需要看s3关于流的实现接口。目前s3是不支持流的处理，只能考虑s3的分块上传。</p>
<h4 id="输出到内存注意事项"><a href="#输出到内存注意事项" class="headerlink" title="输出到内存注意事项"></a>输出到内存注意事项</h4><h5 id="avio-open"><a href="#avio-open" class="headerlink" title="avio_open"></a>avio_open</h5><p>​    当你的输出函数是自己实现的，不是默认的写入到本地文件，则<code>avio_open</code>这个函数不能够被调用。如图,加入一个判断，当输出为自定义函数时不调用avio_open函数。<img src="/images/ffmpeg/stream/avio.png" alt="avio.png"></p>
<p>同样，在释放资源的时候也需要做相同的处理。在文件<code>mediainfo.h</code>中的<code>~FileInfoStruct()</code>函数中加入一层判断。<img src="/images/ffmpeg/stream/avio1.png" alt="avio1.png"></p>
<h5 id="输出封装格式的限制"><a href="#输出封装格式的限制" class="headerlink" title="输出封装格式的限制"></a>输出封装格式的限制</h5><p>​    有一些封装格式不支持以流的方式作为输出，如mp4，错误信息如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mp4 @ 0x8d0c80] muxer does not support non seekable output</span><br></pre></td></tr></table></figure>
<p>​    解决方法：通过将mp4文件进行碎片化，即生成Fmp4格式来进行操作。如图  <img src="/images/ffmpeg/stream/fmp4.png" alt="fmp4.png"></p>
<p>​    我们需要添加<code>movflags</code>参数来进行处理。</p>
]]></content>
      <categories>
        <category>Media</category>
        <category>video</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
        <tag>io</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg-源码编译支持GPU</title>
    <url>/article/2764140538.html</url>
    <content><![CDATA[<blockquote>
<p>​    源码编译需要很多的库的支持，一种是基础的库，一种是你需要的编解码信息的库</p>
</blockquote>
<h2 id="一，ffmpeg源码的下载"><a href="#一，ffmpeg源码的下载" class="headerlink" title="一，ffmpeg源码的下载"></a>一，ffmpeg源码的下载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在git上找个你需要的版本的库，直接通过git下载</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;FFmpeg&#x2F;FFmpeg.git</span><br><span class="line"></span><br><span class="line">ffmpeg 版本 ffmpeg version n4.1.1-3-g53f3f52</span><br><span class="line">cuda 版本 CUDA Version 10.0.130（这个版本自带驱动，可以不用安装驱动）</span><br><span class="line">drive 驱动版本 Driver Version: 410.48 </span><br><span class="line">nv-codec-headers 版本 sdk&#x2F;8.1</span><br></pre></td></tr></table></figure>
<h2 id="二，基础环境的准备"><a href="#二，基础环境的准备" class="headerlink" title="二，基础环境的准备"></a>二，基础环境的准备</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install autoconf automake freetype-devel gcc gcc-c++ git libtool make nasm pkgconfig zlib-devel bzip2 bzip2-devel</span><br></pre></td></tr></table></figure>
<h2 id="三，编码过程"><a href="#三，编码过程" class="headerlink" title="三，编码过程"></a>三，编码过程</h2><h4 id="1，设置环境路径"><a href="#1，设置环境路径" class="headerlink" title="1，设置环境路径"></a>1，设置环境路径</h4><blockquote>
<p>​    在  /etc/profile 文件中，设置 PKG_CONFIG_PATH  路径</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br><span class="line">export PKG_CONFIG_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;lib64&#x2F;pkgconfig:&#x2F;usr&#x2F;lib64&#x2F;pkgconfig:&#x2F;usr&#x2F;local&#x2F;lib&#x2F;pkgconfig:&#x2F;usr&#x2F;lib&#x2F;pkgconfig</span><br></pre></td></tr></table></figure>
<h4 id="2，编码"><a href="#2，编码" class="headerlink" title="2，编码"></a>2，编码</h4><blockquote>
<p>​    配置好configure之后，通过make可以一步步试探你缺少的库是什么，然后在下载，编译</p>
<p>下载完之后，通过命令来配置你需要的东西<br>./configure  –help</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make 编译的常用命令</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make -j 10 (编译，并行10个核来一起编译，可以取消)</span><br><span class="line">make install (安装)</span><br><span class="line">make disclean (卸载)</span><br><span class="line">make clean (清除编译)</span><br></pre></td></tr></table></figure>
<h4 id="3，解决gnutls的问题"><a href="#3，解决gnutls的问题" class="headerlink" title="3，解决gnutls的问题"></a>3，解决gnutls的问题</h4><p><img src="/images/gnutls.png" alt="gnutls"></p>
<blockquote>
<p>我们需要手动的安装gnutls，gnutls3.5.19版本的可以，大于这个版本的有问题,</p>
<p><a href="http://www.linuxfromscratch.org/blfs/view/svn/postlfs/gnutls.html">http://www.linuxfromscratch.org/blfs/view/svn/postlfs/gnutls.html</a> </p>
<p>有安装的方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,安装gnutls需要先安装gnutls，所有先手动下载这个</span><br><span class="line">wget https:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;nettle&#x2F;nettle-3.1.1.tar.gz</span><br><span class="line">tar zxf nettle-3.1.1.tar.gz  </span><br><span class="line">.&#x2F;configure --enable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">2,安装gnutls</span><br><span class="line">wget https:&#x2F;&#x2F;www.gnupg.org&#x2F;ftp&#x2F;gcrypt&#x2F;gnutls&#x2F;v3.5&#x2F;gnutls-3.5.19.tar.xz</span><br><span class="line">xz  -d gnutls-3.5.19.tar.xz</span><br><span class="line">tar xf gnutls-3.5.19.tar</span><br><span class="line">cd gnutls-3.5.19</span><br><span class="line">.&#x2F;configure --enable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>在安装gnutls时，我们使用./configure –enable-shared时，可能遇到以下的问题;</p>
<ul>
<li><p><img src="/images/gmp.png" alt="gmp"></p>
<blockquote>
<p>解决：</p>
<p>yum install gmp-devel</p>
</blockquote>
</li>
<li><p><img src="/images/libtasn1.png" alt="libtasn1.png"></p>
<blockquote>
<p>解决：</p>
<p>yum install libffi libffi-devel</p>
<p>./configure –enable-shared –with-included-libtasn1</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><img src="/images/unistring.png" alt="unistring.png"></p>
<blockquote>
<p>解决：</p>
<p>yum install libunistring-devel</p>
<p>./configure –enable-shared –with-included-libtasn1 –with-included-unistring</p>
</blockquote>
</li>
<li><p><img src="/images/P11.png" alt="P11.png"></p>
<blockquote>
<p>解决：</p>
<p>yum install p11-kit-devel</p>
</blockquote>
</li>
<li><p><img src="/images/dnssec.png" alt="dnssec.png"></p>
<blockquote>
<p>yum install unbound unbound-devel unbound-libs</p>
<p>./configure –enable-shared –with-included-libtasn1 –with-included-unistring</p>
</blockquote>
</li>
</ul>
<h4 id="4，解决ladspa-h的问题"><a href="#4，解决ladspa-h的问题" class="headerlink" title="4，解决ladspa.h的问题"></a>4，解决ladspa.h的问题</h4><p><img src="/images/ladspa.png" alt="ladspa.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install  ladspa*</span><br></pre></td></tr></table></figure>
<h4 id="5，解决libass的问题"><a href="#5，解决libass的问题" class="headerlink" title="5，解决libass的问题"></a>5，解决libass的问题</h4><p><img src="/images/libass.png" alt="libass.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install libass*</span><br></pre></td></tr></table></figure>
<h4 id="6，解决libdc1394-2的问题"><a href="#6，解决libdc1394-2的问题" class="headerlink" title="6，解决libdc1394-2的问题"></a>6，解决libdc1394-2的问题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,官网下载源码</span><br><span class="line">https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;libdc1394&#x2F;files&#x2F;libdc1394-2&#x2F;</span><br><span class="line">2，编译</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="7，解决libgsm的问题"><a href="#7，解决libgsm的问题" class="headerlink" title="7，解决libgsm的问题"></a>7，解决libgsm的问题</h4><p><img src="/images/libgsm.png" alt="libgsm.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gsm-tools gsm-devel</span><br></pre></td></tr></table></figure>
<h4 id="8，解决libmp3lame版本的问题"><a href="#8，解决libmp3lame版本的问题" class="headerlink" title="8，解决libmp3lame版本的问题"></a>8，解决libmp3lame版本的问题</h4><p><img src="/images/libmp3lame.png" alt="libmp3lame.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">源码安装，地址</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;gypified&#x2F;libmp3lame.git</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="9，解决libopencore-amrnb的问题"><a href="#9，解决libopencore-amrnb的问题" class="headerlink" title="9，解决libopencore_amrnb的问题"></a>9，解决libopencore_amrnb的问题</h4><p><img src="/images/libopencore_amrnb.png" alt="libopencore_amrnb.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">官网下载源码，再手动编译</span><br><span class="line">https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;opencore-amr&#x2F;files&#x2F;opencore-amr&#x2F;</span><br><span class="line"> .&#x2F;configure</span><br><span class="line"> make</span><br><span class="line"> make install</span><br></pre></td></tr></table></figure>
<h4 id="10，解决opencv的问题"><a href="#10，解决opencv的问题" class="headerlink" title="10，解决opencv的问题"></a>10，解决opencv的问题</h4><h4 id="11，解决openh264的问题"><a href="#11，解决openh264的问题" class="headerlink" title="11，解决openh264的问题"></a>11，解决openh264的问题</h4><p><img src="/images/openh264.png" alt="openh264.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从git上下载源码</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;cisco&#x2F;openh264</span><br><span class="line">如果下载失败，则直接下载zip包，然后解压安装</span><br><span class="line">make ARCH&#x3D;x86_64</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="12，解决libopenjp2版本的问题"><a href="#12，解决libopenjp2版本的问题" class="headerlink" title="12，解决libopenjp2版本的问题"></a>12，解决libopenjp2版本的问题</h4><p><img src="/images/libopenjp2.png" alt="libopenjp2.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git下载源码来编译安装</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;uclouvain&#x2F;openjpeg.git</span><br><span class="line">如果下载不下来，则下载zip包解压安装 </span><br><span class="line">unzip openjpeg-master.zip</span><br><span class="line">cmake 安装</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake .. -DCMAKE_BUILD_TYPE&#x3D;Release</span><br><span class="line">make -j 10</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="13，解决opus的问题"><a href="#13，解决opus的问题" class="headerlink" title="13，解决opus的问题"></a>13，解决opus的问题</h4><p><img src="/images/opus.png" alt="opus.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#需要手动的下载安装</span><br><span class="line">https:&#x2F;&#x2F;ftp.osuosl.org&#x2F;pub&#x2F;xiph&#x2F;releases&#x2F;opus&#x2F;</span><br><span class="line">#安装步骤</span><br><span class="line">wget http:&#x2F;&#x2F;downloads.xiph.org&#x2F;releases&#x2F;opus&#x2F;opus-1.2.1.tar.gz</span><br><span class="line">tar -zxvf opus-1.2.1.tar.gz</span><br><span class="line">cd opus-1.2.1</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">#注意：如果pkg_config没有找到，需要手动的设置路径，见前面PKG_CONFIG_PATH路径的设置，如果设置好之后，库也存在还是不行，则要检查是否使用yum下载了低版本的，若是则删除</span><br><span class="line">yum remove opus-1.0.2-6.el7.x86_64 opus-tools-0.1.6-1.el7.x86_64 opusfile-0.5-1.el7.x86_64 opus-devel-1.0.2-6.el7.x86_64 opusfile-devel-0.5-1.el7.x86_64</span><br></pre></td></tr></table></figure>
<h4 id="14，解决libpulse的问题"><a href="#14，解决libpulse的问题" class="headerlink" title="14，解决libpulse的问题"></a>14，解决libpulse的问题</h4><h4 id="15，解决libsoxr的问题"><a href="#15，解决libsoxr的问题" class="headerlink" title="15，解决libsoxr的问题"></a>15，解决libsoxr的问题</h4><p><img src="/images/libsoxr.png" alt="libsoxr.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#手动下载包，然后编译安装</span><br><span class="line">https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;soxr&#x2F;files&#x2F;</span><br><span class="line">tar -xvf soxr-0.1.3-Source.tar</span><br><span class="line">.&#x2F;go</span><br><span class="line">cd Realse</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>在执行go的时候可能遇到这个问题,则需要下载cmake高级版本</p>
<p><img src="/images/go.png" alt="go.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cmake 安装</span><br><span class="line">https:&#x2F;&#x2F;cmake.org&#x2F;download&#x2F;</span><br><span class="line">tar -zxvf cmake-3.13.0-rc1.tar.gz</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="16，解决speex的问题"><a href="#16，解决speex的问题" class="headerlink" title="16，解决speex的问题"></a>16，解决speex的问题</h4><p><img src="/images/speex.png" alt="speex.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##手动下载安装包，编译，选择 libspeex下载</span><br><span class="line">https:&#x2F;&#x2F;xiph.org&#x2F;downloads&#x2F;</span><br><span class="line">.&#x2F;configure  --enable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="17，解决libtheora的问题"><a href="#17，解决libtheora的问题" class="headerlink" title="17，解决libtheora的问题"></a>17，解决libtheora的问题</h4><p><img src="/images/libtheora.png" alt="libtheora.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 手动下载安装包，编译，选择libtheora下载</span><br><span class="line">https:&#x2F;&#x2F;xiph.org&#x2F;downloads&#x2F;</span><br><span class="line">unzip libtheora-1.1.1.zip</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在configure的过程中，可能error,则我们需要下载安装这个</p>
<p><img src="/images/ogg.png" alt="ogg.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install libogg*</span><br></pre></td></tr></table></figure>
<h4 id="18，解决libv412的问题"><a href="#18，解决libv412的问题" class="headerlink" title="18，解决libv412的问题"></a>18，解决libv412的问题</h4><h4 id="19，解决vorbis的问题"><a href="#19，解决vorbis的问题" class="headerlink" title="19，解决vorbis的问题"></a>19，解决vorbis的问题</h4><p><img src="/images/vorbis.png" alt="vorbis.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;xiph&#x2F;vorbis.git</span><br><span class="line">.&#x2F;autogen.sh</span><br><span class="line">.&#x2F;configure  --enable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="20，解决libx264的问题"><a href="#20，解决libx264的问题" class="headerlink" title="20，解决libx264的问题"></a>20，解决libx264的问题</h4><p><img src="/images/libx264.png" alt="h264.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone --depth 1 http:&#x2F;&#x2F;git.videolan.org&#x2F;git&#x2F;x264</span><br><span class="line">.&#x2F;configure --enable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>如果编译时报错，则需要安装nasm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -O -L http:&#x2F;&#x2F;www.nasm.us&#x2F;pub&#x2F;nasm&#x2F;releasebuilds&#x2F;2.13.02&#x2F;nasm-2.13.02.tar.bz2  </span><br><span class="line">tar -xjvf nasm-2.13.02.tar.bz2</span><br><span class="line">cd nasm-2.13.02</span><br><span class="line">.&#x2F;autogen.sh </span><br><span class="line">.&#x2F;configure  --enable-shared </span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="21，解决libx265的问题"><a href="#21，解决libx265的问题" class="headerlink" title="21，解决libx265的问题"></a>21，解决libx265的问题</h4><p><img src="/images/x265.png" alt="x265.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone  --depth 1 https:&#x2F;&#x2F;github.com&#x2F;videolan&#x2F;x265.git</span><br><span class="line">cd x265</span><br><span class="line">cd build</span><br><span class="line">cmake ..&#x2F;source</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="22，解决libxvid的问题"><a href="#22，解决libxvid的问题" class="headerlink" title="22，解决libxvid的问题"></a>22，解决libxvid的问题</h4><p><img src="/images/libxvid.png" alt="libxvid.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##官网下载</span><br><span class="line">https:&#x2F;&#x2F;www.xvid.com&#x2F;download&#x2F;</span><br><span class="line">## 按下图过程来查找</span><br><span class="line">## 然后按照README来安装</span><br><span class="line">cd build&#x2F;generic</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make -j 10</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p><img src="/images/xvid.png" alt=" xvid"></p>
<p><img src="C:/Users/Administrator/Desktop/leopard4.1/images/readme.png" alt="readme.png"></p>
<p><img src="/images/bar.png" alt="bar.png"></p>
<h4 id="23，解决openal的问题"><a href="#23，解决openal的问题" class="headerlink" title="23，解决openal的问题"></a>23，解决openal的问题</h4><p><img src="/images/openal.png" alt="openal.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install openal-soft openal-soft-devel</span><br></pre></td></tr></table></figure>
<h4 id="24，解决libcdio的问题"><a href="#24，解决libcdio的问题" class="headerlink" title="24，解决libcdio的问题"></a>24，解决libcdio的问题</h4><h4 id="25，解决bzlib的问题"><a href="#25，解决bzlib的问题" class="headerlink" title="25，解决bzlib的问题"></a>25，解决bzlib的问题</h4><h4 id="26，解决libxcb的问题"><a href="#26，解决libxcb的问题" class="headerlink" title="26，解决libxcb的问题"></a>26，解决libxcb的问题</h4><p><img src="/images/libxcb.png" alt="libxcb.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install libxcb-devel</span><br></pre></td></tr></table></figure>
<h2 id="四，添加硬件编解码"><a href="#四，添加硬件编解码" class="headerlink" title="四，添加硬件编解码"></a>四，添加硬件编解码</h2><h4 id="1，查看机器上显卡的型号"><a href="#1，查看机器上显卡的型号" class="headerlink" title="1，查看机器上显卡的型号"></a>1，查看机器上显卡的型号</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lspci | grep VGA</span><br></pre></td></tr></table></figure>
<p><img src="/images/vga.png" alt="vga"></p>
<h4 id="2，安装对应显卡的驱动"><a href="#2，安装对应显卡的驱动" class="headerlink" title="2，安装对应显卡的驱动"></a>2，安装对应显卡的驱动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.nvidia.com&#x2F;Download&#x2F;index.aspx?lang&#x3D;en-us</span><br><span class="line">安装的方法见显卡驱动安装的文档</span><br></pre></td></tr></table></figure>
<h4 id="3，重新编译ffmpeg"><a href="#3，重新编译ffmpeg" class="headerlink" title="3，重新编译ffmpeg"></a>3，重新编译ffmpeg</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在.&#x2F;configure时添加以下的选项，来重新编译ffmpeg，既可以驱动显卡</span><br><span class="line">--enable-cuda-sdk \</span><br><span class="line">--enable-cuvid \</span><br><span class="line">--enable-nvenc \</span><br><span class="line">--enable-nonfree \</span><br><span class="line">--enable-libnpp \</span><br><span class="line">--extra-cflags&#x3D;-I&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include \</span><br><span class="line">--extra-ldflags&#x3D;-L&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64 \</span><br></pre></td></tr></table></figure>
<h4 id="4，查看是否安装成功"><a href="#4，查看是否安装成功" class="headerlink" title="4，查看是否安装成功"></a>4，查看是否安装成功</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用ffmpeg -hwaccels命令查看支持的硬件加速选项</span><br><span class="line">ffmpeg -hwaccels</span><br></pre></td></tr></table></figure>
<p><img src="/images/hw.png" alt="hw.png"></p>
<h4 id="5，查看cuvid提供的GPU编解码器"><a href="#5，查看cuvid提供的GPU编解码器" class="headerlink" title="5，查看cuvid提供的GPU编解码器"></a>5，查看cuvid提供的GPU编解码器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -codecs | grep cuvid</span><br></pre></td></tr></table></figure>
<p><img src="/images/cuvid.png" alt="cuvid.png"></p>
<h4 id="6，使用GPU进行转码"><a href="#6，使用GPU进行转码" class="headerlink" title="6，使用GPU进行转码"></a>6，使用GPU进行转码</h4><blockquote>
<p>用GPU进行转码的命令和软转码命令不太一样，CPU转码的时候，我们可以依赖ffmpeg识别输入视频的编码格式并选择对应的解码器，但ffmpeg只会自动选择CPU解码器，要让ffmpeg使用GPU解码器，必须先用ffprobe识别出输入视频的编码格式，然后在命令行中指定对应的GPU解码器。</p>
<p>例如，将h264编码的源视频转码为指定尺寸和码率的h264编码视频：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg  -hwaccel cuvid -c:v h264_cuvid -i video&#x2F;video-H264-AAC.mkv -c:v h264_nvenc -b:v 2048k -vf scale_npp&#x3D;1280:-1 -y &#x2F;root&#x2F;transcode.mp4</span><br><span class="line"></span><br><span class="line">-hwaccel cuvid：指定使用cuvid硬件加速</span><br><span class="line">-c:v h264_cuvid：使用h264_cuvid进行视频解码</span><br><span class="line">-c:v h264_nvenc：使用h264_nvenc进行视频编码</span><br><span class="line">-vf scale_npp&#x3D;1280:-1：指定输出视频的宽高，注意，这里和软解码时使用的-vf scale&#x3D;x:x不一样</span><br><span class="line">转码期间使用nvidia-smi查看显卡状态，能够看到ffmpeg确实是在使用GPU进行转码：</span><br></pre></td></tr></table></figure>
<p>如果在执行命令的时候报错，则需要,进行nv-codec-headers和驱动的版本匹配的处理</p>
<p><img src="/images/drive.png" alt="drive.png"></p>
<p>我开始编译nv-codec-headers使用的是最新版本9.1的，编译出错，有两种方法，一种是升级drive的版本，升级到430以上，这个比较的麻烦，另一种是降低nv-codec-headers的版本，我降低到8.1版本，就可以成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg 版本 ffmpeg version n4.1.1-3-g53f3f52</span><br><span class="line">cuda 版本 CUDA Version 10.0.130（这个版本自带驱动，可以不用安装驱动）</span><br><span class="line">drive 驱动版本 Driver Version: 410.48 </span><br><span class="line">nv-codec-headers 版本 sdk&#x2F;8.1</span><br></pre></td></tr></table></figure>
<h4 id="7-在容器中使用NVIDIA"><a href="#7-在容器中使用NVIDIA" class="headerlink" title="7,在容器中使用NVIDIA"></a>7,在容器中使用NVIDIA</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在将自己的服务打包成镜像的时候，开始没有设置环境变量，导致怎么都无法调用NVIDIA进行硬件的转码；</span><br><span class="line">最后查询了很多的资料，发现需要添加一个环境变量，在Dockfile中</span><br><span class="line">ENV NVIDIA_DRIVER_CAPABILITIES video,compute,utility</span><br><span class="line">才能保证容器中使用成功</span><br></pre></td></tr></table></figure>
<h4 id="8，gpu和cpu转码测试"><a href="#8，gpu和cpu转码测试" class="headerlink" title="8，gpu和cpu转码测试"></a>8，gpu和cpu转码测试</h4><p>​    对于同一个视频，分别采用cpu和GPU两种方式来进行转码，对比这两者之间的效率</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#机器信息</span><br><span class="line">逻辑核：24</span><br><span class="line">内存：64G</span><br><span class="line">24  Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz</span><br><span class="line">系统：CentOS Linux release 7.6.1810 (Core)</span><br><span class="line">#视频信息：</span><br><span class="line">name: 11.mkv</span><br><span class="line">size： 1.1G</span><br><span class="line">Video: h264 (High), yuv420p(progressive), 1280x720 [SAR 1:1 DAR 16:9], 25 fps, 25 tbr, 1k tbn, 50 tbc (default)</span><br><span class="line">Audio: ac3, 48000 Hz, stereo, fltp, 192 kb&#x2F;s (default)</span><br><span class="line">#软件转码：</span><br><span class="line">[time] ffmpeg  -i video&#x2F;11.mkv -c:v libx264 -b:v 2048k -vf scale&#x3D;1280:-1 -y &#x2F;root&#x2F;transcode.mp4</span><br><span class="line">#结果</span><br><span class="line">real	11m18.807s</span><br><span class="line">user	180m16.290s</span><br><span class="line">sys		1m36.925s</span><br><span class="line">cpu占用	平均1600%</span><br><span class="line">[time] .&#x2F;softhw &#x2F;root&#x2F;video&#x2F;11.mkv &#x2F;opt&#x2F;nvitra1.mp4</span><br><span class="line">real	14m51.166s</span><br><span class="line">user	220m2.857s</span><br><span class="line">sys		1m21.718s</span><br><span class="line">cpu占用  平均1600%</span><br><span class="line">#硬件转码：</span><br><span class="line">[time] ffmpeg  -hwaccel cuvid -c:v h264_cuvid -i video&#x2F;11.mkv -c:v h264_nvenc -b:v 2048k -vf scale_npp&#x3D;1280:-1 -y &#x2F;root&#x2F;transcode.mp4</span><br><span class="line">#结果</span><br><span class="line">real	1m45.228s</span><br><span class="line">user	1m15.910s</span><br><span class="line">sys		0m18.734s</span><br><span class="line">cpu占用	平均90%</span><br><span class="line">[time] .&#x2F;hw &#x2F;root&#x2F;video&#x2F;11.mkv &#x2F;opt&#x2F;nvitra.mp4</span><br><span class="line">real	1m29.478s</span><br><span class="line">user	0m22.754s</span><br><span class="line">sys		0m23.465s</span><br><span class="line">cpu占用 50%</span><br></pre></td></tr></table></figure>
<h4 id="8，指定显卡进行转码"><a href="#8，指定显卡进行转码" class="headerlink" title="8，指定显卡进行转码"></a>8，指定显卡进行转码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -hwaccel cuvid -hwaccel_device 0 -c:v h264_cuvid -i &lt;input&gt; -c:v h264_nvenc -b:v 2048k -vf scale_npp&#x3D;1280:-1 -y &lt;output&gt;</span><br><span class="line"></span><br><span class="line">ffmpeg -hwaccel cuvid -hwaccel_device 1 -c:v h264_cuvid -i &lt;input&gt; -c:v h264_nvenc -b:v 2048k -vf scale_npp&#x3D;1280:-1 -y &lt;output&gt;</span><br><span class="line"></span><br><span class="line">ffmpeg -hwaccel cuvid -hwaccel_device 0 -c:v h264_cuvid -i &#x2F;root&#x2F;source_media&#x2F;flv.flv -c:v h264_nvenc -b:v 2048k -vf scale_npp&#x3D;1280:-1  -y &#x2F;root&#x2F;flv.mp4</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Media</category>
        <category>video</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
        <tag>GPU</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg-编码的步骤</title>
    <url>/article/3394448682.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;总结一下编码的大致过程，方便自己下一次的处理，分为音频编码和视频</p>
<h3 id="音频编码的过程"><a href="#音频编码的过程" class="headerlink" title="音频编码的过程"></a>音频编码的过程</h3><h4 id="1，打开输出的文件流"><a href="#1，打开输出的文件流" class="headerlink" title="1，打开输出的文件流"></a>1，打开输出的文件流</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AVFormatContext *ofmt_ctx;</span><br><span class="line">avformat_alloc_output_context2(&amp;ofmt_ctx, NULL, NULL, filename);</span><br></pre></td></tr></table></figure>
<h4 id="2，创建输出的音频流"><a href="#2，创建输出的音频流" class="headerlink" title="2，创建输出的音频流"></a>2，创建输出的音频流</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AVStream *audioStream;</span><br><span class="line">AVCodec *encoder;</span><br><span class="line">AVCodecContext *enc_ctx;</span><br><span class="line">audioStream &#x3D; avformat_new_stream(ofmt_ctx, NULL);</span><br><span class="line">if (!audioStream)&#123;</span><br><span class="line">	av_log();</span><br><span class="line">&#125;</span><br><span class="line">encoder &#x3D; avcodec_find_encoder(AV_CODEC_ID_AAC);</span><br><span class="line">if(!encoder)&#123;</span><br><span class="line">	av_log();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="3，设置编码的上下文"><a href="#3，设置编码的上下文" class="headerlink" title="3，设置编码的上下文"></a>3，设置编码的上下文</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enc_ctx &#x3D; avcodec_alloc_context3(encoder);</span><br><span class="line">if (!enc_ctx)&#123;</span><br><span class="line">	av_log();</span><br><span class="line">&#125;</span><br><span class="line">enc_ctx -&gt; bit_rate &#x3D; 64000;</span><br><span class="line">enc_ctx -&gt; sample_rate &#x3D; 44100;</span><br><span class="line">enc_ctx -&gt; channel_layout &#x3D; 2;&#x2F;&#x2F;这个可以根据输入来设置</span><br><span class="line">enc_ctx -&gt; channels &#x3D; av_get_channel_layout_nb_channels(enc_ctx -&gt; channel_layout);</span><br><span class="line">enc_ctx -&gt; sample_fmt &#x3D; encoder -&gt; sample_fmts[0];</span><br><span class="line">AVRational time_base &#x3D; &#123;1, enc_ctx -&gt; sample_rate&#125;;</span><br><span class="line">enc_ctx -&gt; time_base &#x3D; time_base;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="4，设置flag"><a href="#4，设置flag" class="headerlink" title="4，设置flag"></a>4，设置flag</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (ofmt_ctx -&gt; oformat -&gt; flags &amp; AVFMT_GLOBALHEADER)</span><br><span class="line">	enc_ctx -&gt; flags |&#x3D; AV_CODEC_FLAG_GLOBAL_HEADER;</span><br></pre></td></tr></table></figure>
<h4 id="5，打开编码器"><a href="#5，打开编码器" class="headerlink" title="5，打开编码器"></a>5，打开编码器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ret &#x3D; avcodec_open2(enc_ctx, encoder, NULL);</span><br><span class="line">if (ret &lt; 0)&#123;</span><br><span class="line">	av_log();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6，设置codec-tag"><a href="#6，设置codec-tag" class="headerlink" title="6，设置codec_tag"></a>6，设置codec_tag</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">audioStream -&gt; codecpar -&gt; codec_tag &#x3D; 0;</span><br></pre></td></tr></table></figure>
<h4 id="7，copy-code-to-stream"><a href="#7，copy-code-to-stream" class="headerlink" title="7，copy code to stream"></a>7，copy code to stream</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ret &#x3D; avcodec_parameters_from_context(audioStream -&gt; codecpar, enc_ctx);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Media</category>
        <category>video</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg-转码后丢帧的问题</title>
    <url>/article/3032443121.html</url>
    <content><![CDATA[<p>在生产环境的使用中，我们转码有时候会出现缺帧的情况，比如一个10s的视频，经过转码后只有了7s，这就是因为转码逻辑没有处理好，导致丢失了大量的帧。</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h5 id="ffmpeg提供了两组函数，分别用于编码和解码："><a href="#ffmpeg提供了两组函数，分别用于编码和解码：" class="headerlink" title="ffmpeg提供了两组函数，分别用于编码和解码："></a>ffmpeg提供了两组函数，分别用于编码和解码：</h5><ul>
<li>解码：<code>avcodec_send_packet()</code>、<code>avcodec_receive_frame()</code></li>
<li>编码：<code>avcodec_send_frame()</code>、<code>avcodec_receive_packet()</code></li>
</ul>
<h5 id="在一个循环体内去接收codec的输出"><a href="#在一个循环体内去接收codec的输出" class="headerlink" title="在一个循环体内去接收codec的输出"></a>在一个循环体内去接收codec的输出</h5><p>即周期性地调用<code>avcodec_receive_()</code>来接收codec输出的数据：</p>
<ul>
<li><p><strong>解码</strong>：调用<code>avcodec_receive_frame()</code>，如果成功会返回一个包含未压缩数据的<code>AVFrame</code>。</p>
</li>
<li><p><strong>编码</strong>：调用<code>avcodec_receive_packet()</code>，如果成功会返回一个包含压缩数据的<code>AVPacket</code>。</p>
</li>
<li><p><strong>反复</strong>地调用<code>avcodec_receive_packet()</code>直到返回 <code>AVERROR(EAGAIN)</code>或其他错误。返回<code>AVERROR(EAGAIN)</code>错误表示codec需要新的输入来输出更多的数据。对于每个输入的packet或frame，codec一般会输出一个frame或packet，<strong>但是也有可能输出0个或者多于1个</strong>。部分代码实例：</p>
</li>
<li><p>~~~cpp<br>1514     while(true){<br>  1515         //对于每个输入的packet或者frame，codec一般会输出一个frame或者packet，但是也有可能输出0个或者多于1个<br>  1516         //对于多于1个的情况，我们使用while来解决<br>  1517         error = avcodec_receive_packet(encCtx, &amp;outputPacket);<br>  1518         if (error == AVERROR(EAGAIN)) {<br>  1519             error = 0;<br>  1520             // cout &lt;&lt; “EAGAIN” &lt;&lt; endl;<br>  1521             goto cleanup;<br>  1522         } else if (error == AVERROR_EOF) {<br>  1523             error = 0;<br>  1524             goto cleanup;<br>  1525         } else if (error &lt; 0) {<br>  1526             av_log(NULL, AV_LOG_ERROR, “Could not encode frame\n”);<br>  1527             goto cleanup;<br>  1528         } else {<br>  1529             <em>dataPresent = 1;<br>  1530         }<br>  1531<br>  1532         outputPacket.stream_index = streamIndex;<br>  1533<br>  1534         //转换pts<br>  1535         av_packet_rescale_ts(&amp;outputPacket, encCtx-&gt;time_base,<br>  1536                              ofmtCtx-&gt;streams[streamIndex]-&gt;time_base);<br>  1537<br>  1538         // if (AVMEDIA_TYPE_AUDIO == encCtx -&gt; codec_type){<br>  1539         //  _pts2ms = outputPacket.pts </em>av_q2d(ofmtCtx -&gt; streams[streamIndex] -&gt;<br>  1540         // time_base) <em> 1000 ;//单位ms(微妙)<br>  1541         //}<br>  1542         //_pts2ms = outputPacket.pts </em>av_q2d(ofmtCtx -&gt; streams[streamIndex] -&gt;<br>  1543         // time_base) <em> 1000 ;//单位ms(微妙)<br>  1544         pts2ms = outputPacket.pts </em><br>  1545                  av_q2d(ofmtCtx-&gt;streams[streamIndex]-&gt;time_base) <em><br>  1546                  1000;  //单位ms(微妙)<br>  1547                         //编码视频和音频的时候，两者的时间是不一样的，为了保证进度一直向前，所以取最大值<br>  1548         if (pts2ms &gt; _pts2ms) _pts2ms = pts2ms;<br>  1549         av_log(NULL, AV_LOG_INFO, “progress: %s\n”, printProgress().c_str());<br>  1550         sendProgress();<br>  1551         if (!_ip.empty()) printProgress(_ip, _port);<br>  1552<br>  1553         if (</em>dataPresent &amp;&amp;<br>  1554             (error = av_interleaved_write_frame(ofmtCtx, &amp;outputPacket)) &lt; 0) {<br>  1555             av_log(NULL, AV_LOG_ERROR, “Could not write frame,%s,%s:%d\n”,<br>  1556                    av_err2str(error), <strong>FILE</strong>, <strong>LINE</strong>);<br>  1557             goto cleanup;<br>  1558         }<br>  1559     }   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 流处理结束的时候需要flush（洗刷） codec。因为codec可能在内部缓冲多个frame或packet，出于性能或其他必要的情况（如考虑B帧的情况）。 处理流程如下：</span><br><span class="line"></span><br><span class="line">  1. 调用&#96;avcodec_send_()&#96;传入的AVFrame或AVPacket指针设置为NULL。 这将开启draining mode（排水模式）</span><br><span class="line"></span><br><span class="line">     ~~~cpp</span><br><span class="line">       1653     int dataWritten;</span><br><span class="line">       1654     int ret;       </span><br><span class="line">       1655     if (NULL !&#x3D; output-&gt;videoStream) &#123;</span><br><span class="line">       1656         do &#123;       </span><br><span class="line">       1657             dataWritten &#x3D; 0;</span><br><span class="line">       1658             ret &#x3D; encodeMediaFrame(NULL, output-&gt;formatContext,</span><br><span class="line">       1659                                    output-&gt;videoCodecCtx, &amp;dataWritten,</span><br><span class="line">       1660                                    output-&gt;videoStream-&gt;index);</span><br><span class="line">       1661             if (0 &gt; ret) &#123;</span><br><span class="line">       1662                 av_log(NULL, AV_LOG_ERROR,</span><br><span class="line">       1663                        &quot;Failed whileflush video encode, %s:%d\n&quot;, __FILE__,</span><br><span class="line">       1664                        __LINE__);</span><br><span class="line">       1665                 return ret;</span><br><span class="line">       1666             &#125;      </span><br><span class="line">       1667             av_log(NULL, AV_LOG_INFO, &quot;flush video encoder data\n&quot;);</span><br><span class="line">       1668         &#125; while (dataWritten);</span><br><span class="line">       1669     &#125;  </span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>反复地调用<code>avcodec_receive_()</code>直到返回<code>AVERROR_EOF</code>的错误，这个方法这个时候不会返回<code>AVERROR(EAGAIN)</code>的错误，除非你忘记了开启draining mode</p>
</li>
<li><p>codec可以重新开启，但是需要先调用 <code>avcodec_flush_buffers()</code>来重置codec</p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Media</category>
        <category>video</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>gcc-5.1.0源码安装</title>
    <url>/article/2230395924.html</url>
    <content><![CDATA[<p>对于一些源码的编译如poco库，需要的GCC的版本要求比较高，所以需要源码编译GCC、</p>
<h3 id="一，源码下载"><a href="#一，源码下载" class="headerlink" title="一，源码下载"></a>一，源码下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">地址：</span><br><span class="line">https:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;gcc&#x2F;</span><br><span class="line">gcc-5.1.0 可以支持C++14</span><br></pre></td></tr></table></figure>
<h3 id="二，依赖环境安装"><a href="#二，依赖环境安装" class="headerlink" title="二，依赖环境安装"></a>二，依赖环境安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd gcc-5.1.0</span><br><span class="line">.&#x2F;contrib&#x2F;download_prerequisites</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Building GCC requires GMP 4.2+, MPFR 2.4.0+ and MPC 0.8.0+</span><br><span class="line">地址：</span><br><span class="line">ftp:&#x2F;&#x2F;gcc.gnu.org&#x2F;pub&#x2F;gcc&#x2F;infrastructure&#x2F;</span><br><span class="line"></span><br><span class="line">wget ftp:&#x2F;&#x2F;gcc.gnu.org&#x2F;pub&#x2F;gcc&#x2F;infrastructure&#x2F;gmp-6.1.0.tar.bz2</span><br><span class="line">wget ftp:&#x2F;&#x2F;gcc.gnu.org&#x2F;pub&#x2F;gcc&#x2F;infrastructure&#x2F;mpfr-3.1.4.tar.bz2</span><br><span class="line">wget ftp:&#x2F;&#x2F;gcc.gnu.org&#x2F;pub&#x2F;gcc&#x2F;infrastructure&#x2F;mpc-1.0.3.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="三，依赖解压安装"><a href="#三，依赖解压安装" class="headerlink" title="三，依赖解压安装"></a>三，依赖解压安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1，安装gmp</span><br><span class="line">tar -jxvf gmp-6.1.0.tar.bz2</span><br><span class="line">cd gmp-6.1.0</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">error:No usable m4 in $PATH or &#x2F;usr&#x2F;5bin</span><br><span class="line">yum install m4</span><br><span class="line"></span><br><span class="line">2,安装mpfr</span><br><span class="line">tar -jxvf mpfr-3.1.4.tar.bz2</span><br><span class="line">cd mpfr-3.1.4</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">3,安装mpc</span><br><span class="line">tar -zxvf mpc-1.0.3.tar.gz</span><br><span class="line">cd mpc-1.0.3</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h3 id="四，源码安装"><a href="#四，源码安装" class="headerlink" title="四，源码安装"></a>四，源码安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure  --enable-checking&#x3D;release --enable-languages&#x3D;c,c++ --disable-multilib</span><br><span class="line">make </span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">#将链接复制</span><br><span class="line">cp -vf &#x2F;usr&#x2F;local&#x2F;lib64&#x2F;libstdc++.*  &#x2F;usr&#x2F;lib64&#x2F;</span><br><span class="line">gcc -v</span><br><span class="line">gcc version 5.1.0 (GCC)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Cpp</category>
        <category>gcc</category>
      </categories>
      <tags>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>git-大文件上传管理</title>
    <url>/article/3538252460.html</url>
    <content><![CDATA[<h3 id="git-lfs安装和配置"><a href="#git-lfs安装和配置" class="headerlink" title="git lfs安装和配置"></a>git lfs安装和配置</h3><p>git lfs 需要客户端支持, 请根据自己的操作系统下载对应的客户端</p>
<p><a href="https://git-lfs.github.com/">git lfs客户端下载</a></p>
<p><code>以Centos7为例，下载客户端后运行rpm安装</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -i git-lfs-2.2.1-1.el7.x86_64.rpm</span><br><span class="line">git lfs install（完成初始化）</span><br></pre></td></tr></table></figure>
<h3 id="设置管理的文件类型"><a href="#设置管理的文件类型" class="headerlink" title="设置管理的文件类型"></a>设置管理的文件类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#压缩包</span><br><span class="line">git lfs track *.tar *.tar.gz *.tgz *.zip *.7z</span><br><span class="line">#图片</span><br><span class="line">git lfs track *.jpg *.png *.jpeg *.bmp *.gif *.tiff</span><br><span class="line">#库</span><br><span class="line">git lfs track *.jar *.war *.so *.so.*</span><br><span class="line">#非文本文档</span><br><span class="line">git  lfs  track *.doc *.docx *.ppt *.pptx *.pdf *.xls *.xlsx</span><br><span class="line">#安装包</span><br><span class="line">git  lfs  track *.rpm *.deb *.img *.iso</span><br></pre></td></tr></table></figure>
<p><code>设置完之后会在项目根目录下出现.gitattributes文件</code></p>
]]></content>
      <categories>
        <category>Tool</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>lfs</tag>
      </tags>
  </entry>
  <entry>
    <title>git-常用的命令</title>
    <url>/article/2063445917.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;记录一些git常用的命令，便于在长时间不用时能够有个地方查阅，下面的几个是经常用到的。在windows下使用git，许多朋友都说无法使用一些状态（修改，保存，提交）图标，是因为图标显示不是git本身的功能呢，我们需要下载TortoiseGit才能使用图标。</p>
<h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h5 id="重命名文件夹"><a href="#重命名文件夹" class="headerlink" title="重命名文件夹"></a>重命名文件夹</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  mv -f oldfolder newfolder</span><br></pre></td></tr></table></figure>
<h5 id="删除新增的多个文件"><a href="#删除新增的多个文件" class="headerlink" title="删除新增的多个文件"></a>删除新增的多个文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clean -xdf</span><br></pre></td></tr></table></figure>
<h3 id="提交管理"><a href="#提交管理" class="headerlink" title="提交管理"></a>提交管理</h3><h5 id="删除中间的某次提交"><a href="#删除中间的某次提交" class="headerlink" title="删除中间的某次提交"></a>删除中间的某次提交</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git revert commit id</span><br></pre></td></tr></table></figure>
<h5 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard commitid</span><br><span class="line">这个不会保留之前的记录</span><br></pre></td></tr></table></figure>
<h5 id="撤销本地提交"><a href="#撤销本地提交" class="headerlink" title="撤销本地提交"></a>撤销本地提交</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --soft commitid</span><br><span class="line">git reset --mixed commitid</span><br><span class="line">两者的区别，--soft会将改动放在缓存区 --mixed不会讲改动放在缓存区</span><br></pre></td></tr></table></figure>
<h5 id="撤销远程的提交"><a href="#撤销远程的提交" class="headerlink" title="撤销远程的提交"></a>撤销远程的提交</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line">git reset --hard commitid</span><br><span class="line">git push origin HEAD:master --force</span><br></pre></td></tr></table></figure>
<h5 id="强制提交"><a href="#强制提交" class="headerlink" title="强制提交"></a>强制提交</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h5 id="将某个分支的提交copy到另一个分支上"><a href="#将某个分支的提交copy到另一个分支上" class="headerlink" title="将某个分支的提交copy到另一个分支上"></a>将某个分支的提交copy到另一个分支上</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如，有两个分支，a,b,想要将a的某次提交，copy到b分支上</span><br><span class="line">1,在a分支上 git log 查询commitid</span><br><span class="line">2,git checkout b  切换分支</span><br><span class="line">3,git cherry-pick commitid</span><br></pre></td></tr></table></figure>
<h5 id="统计当前分支的提交数目"><a href="#统计当前分支的提交数目" class="headerlink" title="统计当前分支的提交数目"></a>统计当前分支的提交数目</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rev-list HEAD | wc -l</span><br></pre></td></tr></table></figure>
<h5 id="删除缓存的远程分支列表"><a href="#删除缓存的远程分支列表" class="headerlink" title="删除缓存的远程分支列表"></a>删除缓存的远程分支列表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote prune origin</span><br><span class="line">or</span><br><span class="line">git fetch -p</span><br></pre></td></tr></table></figure>
<h3 id="stash管理"><a href="#stash管理" class="headerlink" title="stash管理"></a>stash管理</h3><h5 id="冻结当前的分支修改"><a href="#冻结当前的分支修改" class="headerlink" title="冻结当前的分支修改"></a>冻结当前的分支修改</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash save &quot;说明信息选填&quot;</span><br></pre></td></tr></table></figure>
<h5 id="列出所有的工作现场存储"><a href="#列出所有的工作现场存储" class="headerlink" title="列出所有的工作现场存储"></a>列出所有的工作现场存储</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>
<h5 id="恢复某个工作现场"><a href="#恢复某个工作现场" class="headerlink" title="恢复某个工作现场"></a>恢复某个工作现场</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash apply stash@&#123;n&#125;</span><br></pre></td></tr></table></figure>
<h5 id="删除存储的某个工作现场"><a href="#删除存储的某个工作现场" class="headerlink" title="删除存储的某个工作现场"></a>删除存储的某个工作现场</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash drop stash@&#123;n&#125;</span><br></pre></td></tr></table></figure>
<h5 id="恢复的同时把stash内容也删除了"><a href="#恢复的同时把stash内容也删除了" class="headerlink" title="恢复的同时把stash内容也删除了"></a>恢复的同时把stash内容也删除了</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash pop stash@&#123;n&#125; </span><br></pre></td></tr></table></figure>
<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><h5 id="解决git-clone-项目中某个文件都需要输入密码"><a href="#解决git-clone-项目中某个文件都需要输入密码" class="headerlink" title="解决git clone 项目中某个文件都需要输入密码"></a>解决git clone 项目中某个文件都需要输入密码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>
<h5 id="配置邮件和用户名"><a href="#配置邮件和用户名" class="headerlink" title="配置邮件和用户名"></a>配置邮件和用户名</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;xxx&quot;</span><br><span class="line">git config --global user.name &quot;xxx&quot;</span><br></pre></td></tr></table></figure>
<h3 id="tag管理"><a href="#tag管理" class="headerlink" title="tag管理"></a>tag管理</h3><h5 id="列出本地标签"><a href="#列出本地标签" class="headerlink" title="列出本地标签"></a>列出本地标签</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>
<h5 id="切换到某个tag"><a href="#切换到某个tag" class="headerlink" title="切换到某个tag"></a>切换到某个tag</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout tagName</span><br></pre></td></tr></table></figure>
<h5 id="本地打标签-a-指定标签名，-m-指定说明文字"><a href="#本地打标签-a-指定标签名，-m-指定说明文字" class="headerlink" title="本地打标签 -a 指定标签名， -m 指定说明文字"></a>本地打标签 -a 指定标签名， -m 指定说明文字</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  tag -a v4.1.1 -m &quot;删除临时文件&quot;</span><br></pre></td></tr></table></figure>
<h5 id="本地tag推送到远程"><a href="#本地tag推送到远程" class="headerlink" title="本地tag推送到远程"></a>本地tag推送到远程</h5><h6 id="单一"><a href="#单一" class="headerlink" title="单一"></a>单一</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin tagName</span><br><span class="line">#</span><br><span class="line">git push origin v4.1.1</span><br></pre></td></tr></table></figure>
<h6 id="多个"><a href="#多个" class="headerlink" title="多个"></a>多个</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure>
<h5 id="删除远程tag"><a href="#删除远程tag" class="headerlink" title="删除远程tag"></a>删除远程tag</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin --delete tag tagName</span><br></pre></td></tr></table></figure>
<h5 id="删除本地tag"><a href="#删除本地tag" class="headerlink" title="删除本地tag"></a>删除本地tag</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag -d tagName</span><br></pre></td></tr></table></figure>
<h5 id="拉取tag到本地"><a href="#拉取tag到本地" class="headerlink" title="拉取tag到本地"></a>拉取tag到本地</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch origin tag tagName</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tool</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>github-解决GitHub clone慢的问题</title>
    <url>/article/814027255.html</url>
    <content><![CDATA[<p>哎，有时候自己在GitHub上下载东西的时候总是很慢，这里记载一下几个加快的方法</p>
<h3 id="使用gitee码云来进行clone"><a href="#使用gitee码云来进行clone" class="headerlink" title="使用gitee码云来进行clone"></a>使用gitee码云来进行clone</h3><p>将需要clone的项目，先转移到码云上，然后通过码云来下载本地，速度很快；</p>
<h3 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h3><p>通过<a href="https://www.ipaddress.com/">查询IP地址网站</a>查询下面两个域名的IP地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github.com</span><br></pre></td></tr></table></figure>
<h5 id="在linux上-vim-etc-hosts"><a href="#在linux上-vim-etc-hosts" class="headerlink" title="在linux上  vim /etc/hosts"></a>在linux上  vim /etc/hosts</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br><span class="line">140.82.113.3 github.com</span><br></pre></td></tr></table></figure>
<h5 id="在Windows上-修改-C-Windows-System32-drivers-etc-hosts"><a href="#在Windows上-修改-C-Windows-System32-drivers-etc-hosts" class="headerlink" title="在Windows上 修改 C:\Windows\System32\drivers\etc\hosts"></a>在Windows上 修改 C:\Windows\System32\drivers\etc\hosts</h5><ol>
<li><p>对于Windows下的hosts执行需要权限，我们可以将其先拷贝到桌面，修改后再copy回去</p>
</li>
<li><p>打开cmd命令行，执行下面的命令</p>
</li>
<li><p>~~~<br>ipconfig/flushdns</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 设置代理</span><br><span class="line"></span><br><span class="line">​	推荐有代理的使用，作为一名开发，经常需要Google，要不自己搭建一个梯子，要不就是买一个。我们在github上clone的时候可以设置代理。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>git config –global https.proxy <a href="http://127.0.0.1:1080">http://127.0.0.1:1080</a></p>
<p>git config –global https.proxy <a href="https://127.0.0.1:1080">https://127.0.0.1:1080</a></p>
<p>git config –global –unset http.proxy</p>
<p>git config –global –unset https.proxy</p>
<p>~~~</p>
]]></content>
      <categories>
        <category>Tool</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>grpc编译</title>
    <url>/article/1473358207.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">环境 centos7</span><br></pre></td></tr></table></figure>
<h2 id="一，安装编译依赖的环境"><a href="#一，安装编译依赖的环境" class="headerlink" title="一，安装编译依赖的环境"></a>一，安装编译依赖的环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y pkgconfig autoconf automake libtool make gcc-c++ unzip</span><br><span class="line">yum install -y gflags-devel gtest-devel clang libcxx-devel</span><br><span class="line">yum install -y openssl  openssl-devel</span><br><span class="line">yum install -y  libunwind libunwind-devel</span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y golang</span><br></pre></td></tr></table></figure>
<h2 id="二，源码下载"><a href="#二，源码下载" class="headerlink" title="二，源码下载"></a>二，源码下载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;grpc&#x2F;grpc.git</span><br><span class="line">cd grpc</span><br><span class="line">git submodule update --init</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="三，编译"><a href="#三，编译" class="headerlink" title="三，编译"></a>三，编译</h2><h4 id="1，编译cmake"><a href="#1，编译cmake" class="headerlink" title="1，编译cmake"></a>1，编译cmake</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要下载cmake高级版本，yum安装的版本太低</span><br><span class="line">https:&#x2F;&#x2F;cmake.org&#x2F;download&#x2F;</span><br><span class="line">源码安装cmake，</span><br><span class="line">（1）删除原来版本的cmake</span><br><span class="line">（2）.&#x2F;configure</span><br><span class="line">（3）make &amp;&amp; make install</span><br><span class="line">如果找不到，则创建软链接</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cmake &#x2F;usr&#x2F;bin&#x2F;cmake</span><br></pre></td></tr></table></figure>
<h4 id="2，先编译protobuf"><a href="#2，先编译protobuf" class="headerlink" title="2，先编译protobuf"></a>2，先编译protobuf</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd third_party&#x2F;protobuf</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">.&#x2F;autogen.sh</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;helios&#x2F;protobuf</span><br><span class="line">make </span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">2,建立软链接</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;helios&#x2F;protobuf&#x2F;bin&#x2F;protoc &#x2F;usr&#x2F;local&#x2F;bin&#x2F;protoc</span><br><span class="line">检测是否安装成功</span><br><span class="line">protoc --version</span><br></pre></td></tr></table></figure>
<h4 id="3，编译grpc（cmake"><a href="#3，编译grpc（cmake" class="headerlink" title="3，编译grpc（cmake)"></a>3，编译grpc（cmake)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd grpc</span><br><span class="line">mkdir -p  cmake&#x2F;build</span><br><span class="line">cmake -DBUILD_SHARED_LIBS&#x3D;on -DCMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;helios&#x2F;grpc -DCMAKE_BUILD_TYPE&#x3D;DEBUG -Wno-dev ..&#x2F;..&#x2F;</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="4，编译（make-不建议使用）"><a href="#4，编译（make-不建议使用）" class="headerlink" title="4，编译（make,不建议使用）"></a>4，编译（make,不建议使用）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2,编译grpc</span><br><span class="line">cd grpc根目录</span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="5，问题"><a href="#5，问题" class="headerlink" title="5，问题"></a>5，问题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于cpp的使用，当编译好了之后，运行helloworld程序，没有响应，有很大的问题</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;grpc&#x2F;grpc&#x2F;issues&#x2F;21280#issuecomment-558164977</span><br><span class="line"></span><br><span class="line">解决方法：修改源码（不使用）</span><br><span class="line">vim &#x2F; src &#x2F; core &#x2F; lib &#x2F; surface &#x2F; init.cc</span><br><span class="line"></span><br><span class="line">diff --git a&#x2F;src&#x2F;core&#x2F;lib&#x2F;surface&#x2F;init.cc b&#x2F;src&#x2F;core&#x2F;lib&#x2F;surface&#x2F;init.cc</span><br><span class="line">index 2812427f7a..3c6a547b20 100644</span><br><span class="line">--- a&#x2F;src&#x2F;core&#x2F;lib&#x2F;surface&#x2F;init.cc</span><br><span class="line">+++ b&#x2F;src&#x2F;core&#x2F;lib&#x2F;surface&#x2F;init.cc</span><br><span class="line">@@ -156,7 +156,7 @@ void grpc_init(void) &#123;</span><br><span class="line">      * at the appropriate time *&#x2F;</span><br><span class="line">     grpc_register_security_filters();</span><br><span class="line">     register_builtin_channel_init();</span><br><span class="line">-    grpc_tracer_init();将源码中的这个给注销</span><br><span class="line">+    &#x2F;&#x2F; grpc_tracer_init();</span><br><span class="line">     &#x2F;* no more changes to channel init pipelines *&#x2F;</span><br><span class="line">     grpc_channel_init_finalize();</span><br><span class="line">     grpc_iomgr_start();</span><br><span class="line">     </span><br><span class="line">修改源码：</span><br><span class="line">vim src&#x2F;core&#x2F;lib&#x2F;debug&#x2F;trace.cc</span><br><span class="line"> void TraceFlagList::Add(TraceFlag* flag) &#123;</span><br><span class="line">+  TraceFlag* t;</span><br><span class="line">+  for (t &#x3D; root_tracer_; t; t &#x3D; t -&gt; next_tracer_) &#123;</span><br><span class="line">+       if (t &#x3D;&#x3D; flag ) return;</span><br><span class="line">+  &#125;</span><br><span class="line">   flag-&gt;next_tracer_ &#x3D; root_tracer_;</span><br><span class="line">   root_tracer_ &#x3D; flag;</span><br><span class="line">遍历链表，如果存在则不加入</span><br></pre></td></tr></table></figure>
<h4 id="6，运行helloworld程序"><a href="#6，运行helloworld程序" class="headerlink" title="6，运行helloworld程序"></a>6，运行helloworld程序</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd examples&#x2F;cpp&#x2F;helloworld</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">出现问题：</span><br><span class="line">which: no grpc_cpp_plugin in (&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin)</span><br><span class="line">因为自己配置的路径，所以先给grpc_cpp_plugin  建立软连接</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;helios&#x2F;grpc&#x2F;bin&#x2F;grpc_cpp_plugin   &#x2F;usr&#x2F;local&#x2F;bin&#x2F;grpc_cpp_plugin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">helloworld.pb.h:10:40: fatal error: google&#x2F;protobuf&#x2F;port_def.inc: No such file or directory</span><br><span class="line">配置cpp头文件路径</span><br><span class="line">export CPLUS_INCLUDE_PATH&#x3D;$CPLUS_INCLUDE_PATH:&#x2F;usr&#x2F;local&#x2F;helios&#x2F;grpc&#x2F;include</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Package protobuf was not found in the pkg-config search path.</span><br><span class="line">Perhaps you should add the directory containing &#96;protobuf.pc&#39;</span><br><span class="line">to the PKG_CONFIG_PATH environment variable</span><br><span class="line">No package &#39;protobuf&#39; found</span><br><span class="line">Package grpc was not found in the pkg-config search path.</span><br><span class="line">Perhaps you should add the directory containing &#96;grpc.pc&#39;</span><br><span class="line">to the PKG_CONFIG_PATH environment variable</span><br><span class="line">No package &#39;grpc&#39; found</span><br><span class="line">配置pkgconfig搜索路径</span><br><span class="line">export PKG_CONFIG_PATH&#x3D;$PKG_CONFIG_PATH:&#x2F;usr&#x2F;local&#x2F;helios&#x2F;protobuf&#x2F;lib&#x2F;pkgconfig&#x2F;:&#x2F;usr&#x2F;local&#x2F;helios&#x2F;grpc&#x2F;lib&#x2F;pkgconfig&#x2F;</span><br><span class="line"></span><br><span class="line">error while loading shared libraries: libgrpc_plugin_support.so.1: cannot open shared object file</span><br><span class="line">配置cpp动态库搜索路径</span><br><span class="line">export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:&#x2F;usr&#x2F;local&#x2F;helios&#x2F;grpc&#x2F;lib&#x2F;:&#x2F;usr&#x2F;local&#x2F;helios&#x2F;grpc&#x2F;lib64&#x2F;:&#x2F;usr&#x2F;local&#x2F;helios&#x2F;protobuf&#x2F;lib</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Cpp</category>
        <category>protocol</category>
      </categories>
      <tags>
        <tag>grpc</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/1243066710.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo-gulp压缩</title>
    <url>/article/2127593710.html</url>
    <content><![CDATA[<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#全局安装</span><br><span class="line">npm install gulp -g</span><br><span class="line">#站点目录安装</span><br><span class="line">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在这里说明一下，使用该工具可以压缩 HTML、CSS、JavaScript 文件，但我并没有压缩 JavaScript 文件，因为有很大的概率会报错，实际也并不需要压缩，因为大部分 JavaScript 都已压缩过。</p>
<p>如果你也考虑不压缩 JavaScript 文件，可以选择不安装 <code>gulp-uglify</code>。</p>
<h3 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h3><p>在站点文件夹的根目录下，新建一个文件。命名为gulpfile.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gulp &#x3D; require(&#39;gulp&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Plugins 模块获取</span><br><span class="line">var minifycss &#x3D; require(&#39;gulp-minify-css&#39;);</span><br><span class="line">var uglify &#x3D; require(&#39;gulp-uglify&#39;);</span><br><span class="line">var htmlmin &#x3D; require(&#39;gulp-htmlmin&#39;);</span><br><span class="line">var htmlclean &#x3D; require(&#39;gulp-htmlclean&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 压缩 css</span><br><span class="line">gulp.task(&#39;minify-css&#39;, function () &#123;</span><br><span class="line">	return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.css&#39;)</span><br><span class="line">		.pipe(minifycss())</span><br><span class="line">		.pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 压缩 html</span><br><span class="line">gulp.task(&#39;minify-html&#39;, function () &#123;</span><br><span class="line">	return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.html&#39;)</span><br><span class="line">		.pipe(htmlclean())</span><br><span class="line">		.pipe(htmlmin(&#123;</span><br><span class="line">			removeComments: true,</span><br><span class="line">			minifyJS: true,</span><br><span class="line">			minifyCSS: true,</span><br><span class="line">			minifyURLs: true,</span><br><span class="line">		&#125;))</span><br><span class="line">		.pipe(gulp.dest(&#39;.&#x2F;public&#39;))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 压缩 js 不压缩 min.js</span><br><span class="line">gulp.task(&#39;minify-js&#39;, function () &#123;</span><br><span class="line">	return gulp.src([&#39;.&#x2F;public&#x2F;**&#x2F;*.js&#39;, &#39;!.&#x2F;public&#x2F;**&#x2F;*.min.js&#39;])</span><br><span class="line">		.pipe(uglify())</span><br><span class="line">		.pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4.0 以前的写法 </span><br><span class="line">&#x2F;&#x2F; gulp.task(&#39;default&#39;, [</span><br><span class="line">  &#x2F;&#x2F;   &#39;minify-html&#39;, &#39;minify-css&#39;, &#39;minify-js&#39;</span><br><span class="line">&#x2F;&#x2F; ]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4.0 以后的写法</span><br><span class="line">&#x2F;&#x2F; 执行 gulp 命令时执行的任务</span><br><span class="line">gulp.task(&#39;default&#39;, gulp.parallel(&#39;minify-html&#39;, &#39;minify-css&#39;, &#39;minify-js&#39;));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>如果不压缩 JavaScript 文件，则将上述代码中有关</code>minify-js<code>的代码删除即可</code></p>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[10:24:57] Starting &#39;default&#39;...</span><br><span class="line">[10:24:57] Starting &#39;minify-html&#39;...</span><br><span class="line">[10:24:57] Starting &#39;minify-css&#39;...</span><br><span class="line">[10:24:57] Starting &#39;minify-js&#39;...</span><br><span class="line">[10:25:05] Finished &#39;minify-css&#39; after 8.3 s</span><br><span class="line">[10:25:05] Finished &#39;minify-js&#39; after 8.49 s</span><br><span class="line">[10:25:09] Finished &#39;minify-html&#39; after 12 s</span><br><span class="line">[10:25:09] Finished &#39;default&#39; after 12 s</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tool</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-next主题配置</title>
    <url>/article/1968653668.html</url>
    <content><![CDATA[<p>主要记录一下自己在搭建个人博客的时候，一些配置，基本上是查阅别人的文章，这里记录一下</p>
<h3 id="一，hexo安装"><a href="#一，hexo安装" class="headerlink" title="一，hexo安装"></a>一，hexo安装</h3><p><a href="https://www.jianshu.com/p/eded1dd2d794">hexo安装</a></p>
<p><a href="https://www.jianshu.com/p/b20fc983005f">next主题设置</a></p>
<h3 id="二，添加LocalSearch搜索"><a href="#二，添加LocalSearch搜索" class="headerlink" title="二，添加LocalSearch搜索"></a>二，添加LocalSearch搜索</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> npm install hexo-generator-searchdb --save</span><br><span class="line"> </span><br><span class="line"> 编辑主题配置文件，启用本地搜素</span><br><span class="line"> # Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<h3 id="三，网站访问量统计"><a href="#三，网站访问量统计" class="headerlink" title="三，网站访问量统计"></a>三，网站访问量统计</h3><p><img src="/images/blog/baidu.png" alt="baidu.png"></p>
<h3 id="四，阅读次数统计"><a href="#四，阅读次数统计" class="headerlink" title="四，阅读次数统计"></a>四，阅读次数统计</h3><p><a href="https://www.cnblogs.com/lijianming180/p/12433189.html">LeanCloud添加阅读次数</a></p>
<h3 id="五，添加评论"><a href="#五，添加评论" class="headerlink" title="五，添加评论"></a>五，添加评论</h3><p><a href="https://blog.csdn.net/jiunian_2761/article/details/97388997">valine</a></p>
<h3 id="六，域名申请"><a href="#六，域名申请" class="headerlink" title="六，域名申请"></a>六，域名申请</h3><p><a href="https://blog.csdn.net/linshuhe1/article/details/73013730">域名申请</a></p>
<h3 id="七，谷歌检索"><a href="#七，谷歌检索" class="headerlink" title="七，谷歌检索"></a>七，谷歌检索</h3><p><a href="https://www.itrhx.com/2019/09/17/A48-submit-search-engine-inclusion/">谷歌检索</a></p>
<h3 id="八，永久文章链接"><a href="#八，永久文章链接" class="headerlink" title="八，永久文章链接"></a>八，永久文章链接</h3><p><a href="https://www.jianshu.com/p/c7de2ae59975">abbrlink</a></p>
<h3 id="九，404"><a href="#九，404" class="headerlink" title="九，404"></a>九，404</h3><p><a href="https://www.jianshu.com/p/2349c763cc02">404错误</a></p>
<h3 id="十，码云-GitHub部署"><a href="#十，码云-GitHub部署" class="headerlink" title="十，码云+GitHub部署"></a>十，码云+GitHub部署</h3><p><img src="/images/blog/gitee.png" alt="gitee.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要在站点配置文件中配置gitee和GitHub的仓库地址</span><br><span class="line">然后就可以部署了，不过我们在gitee上部署后，每次都需要手动的去更新gitee page，才能生效</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tool</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-代码块添加复制功能</title>
    <url>/article/853195356.html</url>
    <content><![CDATA[<h3 id="一，添加copy-code-swig"><a href="#一，添加copy-code-swig" class="headerlink" title="一，添加copy-code.swig"></a>一，添加copy-code.swig</h3><p>在博客根目录下，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd themes&#x2F;next&#x2F;layout&#x2F;_third-party&#x2F;</span><br></pre></td></tr></table></figure>
<p>然后在次文件夹下创建copy-code.swig的文件，内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.codeblock.copy_button.enable %&#125;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .copy-btn &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      padding: 6px 12px;</span><br><span class="line">      font-size: 13px;</span><br><span class="line">      font-weight: 700;</span><br><span class="line">      line-height: 20px;</span><br><span class="line">      color: #333;</span><br><span class="line">      white-space: nowrap;</span><br><span class="line">      vertical-align: middle;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">      background-color: #eee;</span><br><span class="line">      background-image: linear-gradient(#fcfcfc, #eee);</span><br><span class="line">      border: 1px solid #d5d5d5;</span><br><span class="line">      border-radius: 3px;</span><br><span class="line">      user-select: none;</span><br><span class="line">      outline: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .highlight-wrap .copy-btn &#123;</span><br><span class="line">      transition: opacity .3s ease-in-out;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      padding: 2px 6px;</span><br><span class="line">      position: absolute;</span><br><span class="line">      right: 4px;</span><br><span class="line">      top: 8px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .highlight-wrap:hover .copy-btn,</span><br><span class="line">    .highlight-wrap .copy-btn:focus &#123;</span><br><span class="line">      opacity: 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .highlight-wrap &#123;</span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    $(&#39;.highlight&#39;).each(function (i, e) &#123;</span><br><span class="line">      var $wrap &#x3D; $(&#39;&lt;div&gt;&#39;).addClass(&#39;highlight-wrap&#39;)</span><br><span class="line">      $(e).after($wrap)</span><br><span class="line">      $wrap.append($(&#39;&lt;button&gt;&#39;).addClass(&#39;copy-btn&#39;).append(&#39;&#123;&#123;__(&quot;post.copy_button&quot;)&#125;&#125;&#39;).on(&#39;click&#39;, function (e) &#123;</span><br><span class="line">        var code &#x3D; $(this).parent().find(&#39;.code&#39;).find(&#39;.line&#39;).map(function (i, e) &#123;</span><br><span class="line">          return $(e).text()</span><br><span class="line">        &#125;).toArray().join(&#39;\n&#39;)</span><br><span class="line">        var ta &#x3D; document.createElement(&#39;textarea&#39;)</span><br><span class="line">        document.body.appendChild(ta)</span><br><span class="line">        ta.style.position &#x3D; &#39;absolute&#39;</span><br><span class="line">        ta.style.top &#x3D; &#39;0px&#39;</span><br><span class="line">        ta.style.left &#x3D; &#39;0px&#39;</span><br><span class="line">        ta.value &#x3D; code</span><br><span class="line">        ta.select()</span><br><span class="line">        ta.focus()</span><br><span class="line">        var result &#x3D; document.execCommand(&#39;copy&#39;)</span><br><span class="line">        document.body.removeChild(ta)</span><br><span class="line">        &#123;% if theme.codeblock.copy_button.show_result %&#125;</span><br><span class="line">          if(result)$(this).text(&#39;&#123;&#123;__(&quot;post.copy_success&quot;)&#125;&#125;&#39;)</span><br><span class="line">          else $(this).text(&#39;&#123;&#123;__(&quot;post.copy_failure&quot;)&#125;&#125;&#39;)</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        $(this).blur()</span><br><span class="line">      &#125;)).on(&#39;mouseleave&#39;, function (e) &#123;</span><br><span class="line">        var $b &#x3D; $(this).find(&#39;.copy-btn&#39;)</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">          $b.text(&#39;&#123;&#123;__(&quot;post.copy_button&quot;)&#125;&#125;&#39;)</span><br><span class="line">        &#125;, 300)</span><br><span class="line">      &#125;).append(e)</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>然后返回上一层目录，即<code>layout</code>文件夹下，编辑_layout.swig,如下图</p>
<p><img src="/images/codecopy.png" alt="codecopy.png"></p>
<p>在图中位置添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include &#39;_third-party&#x2F;copy-code.swig&#39; %&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://qiming.info/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8A%A0%E5%85%A5%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/">参考这位作者的文章</a></p>
]]></content>
      <categories>
        <category>Tool</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-常用命令</title>
    <url>/article/3973852728.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;记录一下hexo经常使用的命令，发现自己好久没有hexo，命令都不记得了。</p>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postname&quot; (hexo n postname)</span><br></pre></td></tr></table></figure>
<h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;pagename&quot;</span><br></pre></td></tr></table></figure>
<h3 id="启动本地web服务"><a href="#启动本地web服务" class="headerlink" title="启动本地web服务"></a>启动本地web服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server (hexo s)</span><br><span class="line">本地网址：localhost:4000</span><br></pre></td></tr></table></figure>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo generate (hexo g)</span><br></pre></td></tr></table></figure>
<h3 id="生成部署"><a href="#生成部署" class="headerlink" title="生成部署"></a>生成部署</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
<h3 id="生成预览"><a href="#生成预览" class="headerlink" title="生成预览"></a>生成预览</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s -g</span><br></pre></td></tr></table></figure>
<h3 id="清理public文件夹"><a href="#清理public文件夹" class="headerlink" title="清理public文件夹"></a>清理public文件夹</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tool</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>image-libraw相机图片库源码编译</title>
    <url>/article/1731984249.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LibRaw is a library for reading RAW files from digital photo cameras (CRW&#x2F;CR2, NEF, RAF, DNG, MOS, KDC, DCR, etc, virtually all RAW formats are supported).</span><br></pre></td></tr></table></figure>
<h3 id="一，源码下载"><a href="#一，源码下载" class="headerlink" title="一，源码下载"></a>一，源码下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;LibRaw&#x2F;LibRaw.git</span><br></pre></td></tr></table></figure>
<h3 id="二，编译环境准备"><a href="#二，编译环境准备" class="headerlink" title="二，编译环境准备"></a>二，编译环境准备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1，查看文件DEVELOPER-NOTES，提示我们,执行mkdist.sh脚本来生成编译的东西</span><br><span class="line">2， 安装需要的软件</span><br><span class="line">	 yum install autoconf automake freetype-devel gcc gcc-c++ libtool make pkgconfig -y</span><br><span class="line">	 yum install wget -y</span><br><span class="line">	 yum install lcms2 lcms2-devel -y</span><br><span class="line">	 yum install jasper jasper-devel</span><br></pre></td></tr></table></figure>
<h3 id="三，准备编译遇到的错误"><a href="#三，准备编译遇到的错误" class="headerlink" title="三，准备编译遇到的错误"></a>三，准备编译遇到的错误</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载dcraw.c失败，我们需要手动的下载</span><br><span class="line">修改mkdist.sh脚本文件</span><br><span class="line">wget https:&#x2F;&#x2F;www.dechifro.org&#x2F;dcraw&#x2F;dcraw.c</span><br><span class="line">然后在执行 mkdist.sh脚本</span><br></pre></td></tr></table></figure>
<h3 id="四，编译"><a href="#四，编译" class="headerlink" title="四，编译"></a>四，编译</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;helios CXX&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;g++</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="五，执行遇到的问题"><a href="#五，执行遇到的问题" class="headerlink" title="五，执行遇到的问题"></a>五，执行遇到的问题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在程序中执行 open_file CR2的时候程序崩溃，因为自己的g++编译是4.8.5的，但是更新到4.9.2后就成功了</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Media</category>
        <category>image</category>
      </categories>
      <tags>
        <tag>libraw</tag>
      </tags>
  </entry>
  <entry>
    <title>image-libvips图片处理库源码编译</title>
    <url>/article/3448999942.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目前主要是用于苹果平台图片heic图片的转码处理</span><br></pre></td></tr></table></figure>
<h3 id="1，从GitHub上下载源码"><a href="#1，从GitHub上下载源码" class="headerlink" title="1，从GitHub上下载源码"></a>1，从GitHub上下载源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  clone  https:&#x2F;&#x2F;github.com&#x2F;libvips&#x2F;libvips.git</span><br></pre></td></tr></table></figure>
<h3 id="2，下载需要的依赖"><a href="#2，下载需要的依赖" class="headerlink" title="2，下载需要的依赖"></a>2，下载需要的依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gtk-doc</span><br><span class="line">yum install gobject-introspection</span><br><span class="line">yum install gobject-introspection-devel</span><br><span class="line">yum install expat-devel</span><br><span class="line">yum install glib glib-devel</span><br><span class="line">yum install gcc gcc-c++</span><br><span class="line">yum install make pkgconfig autoconf automake</span><br></pre></td></tr></table></figure>
<h3 id="3，编译出现的问题"><a href="#3，编译出现的问题" class="headerlink" title="3，编译出现的问题"></a>3，编译出现的问题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libpango-1.0.so: undefined reference to &#96;fribidi_get_par_embedding_levels_ex&#39;</span><br><span class="line"></span><br><span class="line">检查ldd &#x2F;usr&#x2F;lib64&#x2F;libpango-1.0.so发现，有一个ibfribidi.so.0 &#x3D;&gt; &#x2F;lib64&#x2F;libfribidi.so.0链接开始链接的是我自己的，有问题，改回来就好了，可能是版本冲突的原因，需要保证链接库的版本一致</span><br></pre></td></tr></table></figure>
<h3 id="3，安装我们需要支持的图片格式依赖"><a href="#3，安装我们需要支持的图片格式依赖" class="headerlink" title="3，安装我们需要支持的图片格式依赖"></a>3，安装我们需要支持的图片格式依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y libjpeg-turbo libjpeg-turbo-devel</span><br><span class="line">yum install -y libexif libexif-devel</span><br><span class="line">yum install -y giflib giflib-devel</span><br><span class="line">yum install -y librsvg2 librsvg2-devel</span><br><span class="line">yum install -y libtiff libtiff-devel </span><br><span class="line">yum install -y libwebp libwebp-devel</span><br><span class="line">yum install -y libpng libpng-devel</span><br><span class="line">yum install -y  libgsf libgsf-devel</span><br><span class="line">yum install -y poppler-glib poppler-glib-devel</span><br><span class="line">yum install -y openslide openslide-devel</span><br><span class="line">yum install -y orc orc-devel</span><br><span class="line">yum install -y libimagequant libimagequant-devel</span><br><span class="line">yum install -y cfitsio cfitsio-devel</span><br><span class="line">yum install -y matio matio-devel</span><br><span class="line">yum install -y fftw fftw-devel</span><br></pre></td></tr></table></figure>
<h3 id="4，安装libheif"><a href="#4，安装libheif" class="headerlink" title="4，安装libheif"></a>4，安装libheif</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,git 源码安装libde265,## 注意这个必须安装，不然在编译libvips时，虽然configure表示支持，但是在真正使用的时候会报错</span><br><span class="line"></span><br><span class="line">2，git源码安装libheif，需要注意 配置libde265支持</span><br></pre></td></tr></table></figure>
<h4 id="5，编译"><a href="#5，编译" class="headerlink" title="5，编译"></a>5，编译</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1，.&#x2F;configure</span><br><span class="line">2,make &amp;&amp; make install</span><br><span class="line">自己写的myconfig.sh文件</span><br><span class="line"></span><br><span class="line">  1 #!&#x2F;bin&#x2F;sh                                                                                                                          </span><br><span class="line">  2 commoninclude&#x3D;&#x2F;usr&#x2F;include</span><br><span class="line">  3 commonlib&#x3D;&#x2F;usr&#x2F;lib64</span><br><span class="line">  4  </span><br><span class="line">  5 CPPFLAGS&#x3D;&quot;-g -Wall -I$&#123;commoninclude&#125;  -L$&#123;commonlib&#125;&quot;    \</span><br><span class="line">  6 CXXFLAGS&#x3D;&quot;-g -Wall -I$&#123;commoninclude&#125;  -L$&#123;commonlib&#125;&quot;    \</span><br><span class="line">  7 PKG_CONFIG_PATH&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;pkgconfig:&#x2F;usr&#x2F;local&#x2F;heif&#x2F;lib&#x2F;pkgconfig&quot;         \</span><br><span class="line">  8 .&#x2F;configure  --enable-gtk-doc-pdf&#x3D;yes --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;vips    \</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Media</category>
        <category>image</category>
      </categories>
      <tags>
        <tag>libvips</tag>
      </tags>
  </entry>
  <entry>
    <title>image-图片处理库总结</title>
    <url>/article/3226112650.html</url>
    <content><![CDATA[<h3 id="一，提取exif信息的库"><a href="#一，提取exif信息的库" class="headerlink" title="一，提取exif信息的库"></a>一，提取exif信息的库</h3><p><a href="https://www.exiv2.org/">Exif</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exiv2 是一个用来提取图片中的EXIF、LPTC 和 XMP 元数据信息的C++类库。同时还提供了命令行工具。示例代码： Exiv2::Image::AutoPtr image &#x3D;Exiv2::ImageFactory::open(argv[1]);assert(image.get() !&#x3D; 0);image-&gt;readMetadata(); Exi... 更多Exiv2信息 </span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/libvips/libvips">libvips</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libvips是一个需求驱动的水平线程 图像处理库。与类似的库相比，libvips运行迅速且几乎不占用内存。libvips是根据LGPL 2.1+许可的。</span><br><span class="line"></span><br><span class="line">它具有约300种运算， 涵盖算术，直方图，卷积，形态运算，频率滤波，颜色，重采样，统计等。它支持多种数字类型，从8位int到128位复数。图像可以具有任意数量的波段。它支持各种图像格式，包括JPEG，TIFF，PNG，WebP，HEIC，FITS，Matlab，OpenEXR，PDF，SVG，HDR，PPM &#x2F; PGM &#x2F; PFM，CSV，GIF，分析，NIfTI，DeepZoom和OpenSlide 。它还可以通过ImageMagick或GraphicsMagick加载图像，使其与DICOM等格式一起使用。</span><br><span class="line"></span><br><span class="line">主要用这个处理苹果平台heic图片格式的转码</span><br></pre></td></tr></table></figure>
<p><a href="http://cimg.eu/">CImg</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">就一个.h文件所以用起来很简明，但感觉功能上不如CxImage。可以与CxImage配合使用，因为CImg提供了基于</span><br><span class="line">lapack的矩阵运算函数和完善的线性滤波卷积函数，同时CImg做像素运算还是很方便的。另外，独有Display类可以方便的</span><br><span class="line">实现各种显示，包括显示图像、打字、画线等等。还有，该库有个基于光流的多尺度图像配准例子，很好.</span><br><span class="line"></span><br><span class="line">使用很方便，但是对于特殊的格式如heic，相机原生格式不支持</span><br></pre></td></tr></table></figure>
<p><a href="https://www.libraw.org/docs">libraw</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LibRaw是一个用于从数码相机读取RAW文件的库（CRW &#x2F; CR2，NEF，RAF，DNG，MOS，KDC，DCR等，实际上支持所有RAW格式）。</span><br><span class="line"></span><br><span class="line">它特别注意正确检索后续RAW转换所需的数据。</span><br><span class="line"></span><br><span class="line">该库旨在使用RAW文件作为初始数据嵌入RAW转换器，数据分析器和其他程序中。</span><br></pre></td></tr></table></figure>
<p><a href="https://www.codeproject.com/Articles/1300/CxImage">CxImage</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对CxImage考察的印象：该开发包完全开放源代码，图像封装为一个类，功能极为强大，与Windows、MFC支持极好，支</span><br><span class="line">持图像的多种操作（线性滤波、中值滤波、直方图操作、旋转缩放、区域选取、阈值处理、膨胀腐蚀、alpha混合等等），支</span><br><span class="line">持从文件、内存或者win32api定义的位图图像格式中读取图像，支持将图像显示在任意窗口，功能可谓很强大了，而且对像</span><br><span class="line">素的操作很方便，另外还有一个界面很强的demo，可以直接在上面进行二次开发，推荐使用！</span><br><span class="line">缺点：里面的子库很多，用起来可能较麻烦；而且感觉速度稍慢，不如后面提到的freeimage</span><br><span class="line">但功能真的十分强大啊！</span><br><span class="line"></span><br><span class="line">主要使用这个处理相机原生图片，可以linux下自己不会编译</span><br></pre></td></tr></table></figure>
<p><a href="https://opencv.org/">OpenCV</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对OpenCV的印象：功能十分的强大，而且支持目前先进的图像处理技术，体系十分完善，操作手册很详细，手册首先给大</span><br><span class="line">家补计算机视觉的知识，几乎涵盖了近10年内的主流算法；然后将图像格式和矩阵运算，然后将各个算法的实现函数。我用</span><br><span class="line">它来做了一个Harris角点检测器和Canny边缘检测器，总共就花了一个小时（第一次用OpenCV）。而且该库显示图像极其</span><br><span class="line">方便，两句话就可以。但该库似乎不大稳定，对32F和16S、8U的图像数据支持上bug重重。我用cvFilter2D函数进行线性</span><br><span class="line">滤波，屡屡出错，后来一查原来是大bug。后来用cvmGet来取矩阵元素也是频繁出错，仔细检查了N遍确保程序没问题之后</span><br><span class="line">在yahoogroup上找到答案：仍然是bug。。。但好歹该库是开放的，所以自己可以修改；而且支持CVS。另外该库用的是</span><br><span class="line">IPL矩阵库，速度奇快～～</span><br><span class="line"></span><br><span class="line">目前没有使用</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Media</category>
        <category>image</category>
      </categories>
  </entry>
  <entry>
    <title>json-cpp处理json</title>
    <url>/article/3190039070.html</url>
    <content><![CDATA[<p>cpp处理json常用的库</p>
<h3 id="poco-json"><a href="#poco-json" class="headerlink" title="poco-json"></a>poco-json</h3><p>poco库中处理json的模块，将其转换为json字符串时键名会按照字母的顺序排列</p>
<h3 id="jsoncpp"><a href="#jsoncpp" class="headerlink" title="jsoncpp"></a>jsoncpp</h3><p>jsoncpp这个库，将其转换为json字符串时键名也会按照字母的顺序排序</p>
<h4 id="1，下载"><a href="#1，下载" class="headerlink" title="1，下载"></a>1，下载</h4><p><a href="https://sourceforge.net/projects/jsoncpp/">jsonspp下载</a></p>
<h4 id="2，安装"><a href="#2，安装" class="headerlink" title="2，安装"></a>2，安装</h4><h5 id="scons下载"><a href="#scons下载" class="headerlink" title="scons下载"></a>scons下载</h5><p>使用scons来安装，如果yum没有找到，则需要<a href="http://www.helioswei.top/article/3859923575.html">更新yum库</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install scons -y</span><br></pre></td></tr></table></figure>
<h5 id="编译jsoncpp"><a href="#编译jsoncpp" class="headerlink" title="编译jsoncpp"></a>编译jsoncpp</h5><p>编译好的链接库，存放在jsoncpp源目录下的libs中<code>libjson_linux-gcc-4.8.5_libmt.so</code>，头文件放在include目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd jsoncpp的源目录</span><br><span class="line"></span><br><span class="line">scons platform&#x3D;linux-gcc</span><br></pre></td></tr></table></figure>
<h3 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h3><p>序列化，这个将其转换为json字符串时会按照message的顺序，比较的好。</p>
<h4 id="1，使用步骤"><a href="#1，使用步骤" class="headerlink" title="1，使用步骤"></a>1，使用步骤</h4><h5 id="先写proto的文件-status-proto"><a href="#先写proto的文件-status-proto" class="headerlink" title="先写proto的文件 status.proto"></a>先写proto的文件 status.proto</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">syntax &#x3D; &quot;proto3&quot;;                                                                                                                    </span><br><span class="line">package biyi;</span><br><span class="line"> </span><br><span class="line">message UnifiedLog&#123;</span><br><span class="line">    Cont content &#x3D; 1;</span><br><span class="line">    string sign &#x3D; 2;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">message Cont&#123;</span><br><span class="line">    string time_iso8601 &#x3D; 1;</span><br><span class="line">    string companyId &#x3D; 2;</span><br><span class="line">    string company &#x3D; 3;</span><br><span class="line">    string projectNameCN &#x3D; 4;</span><br><span class="line">    string projectName &#x3D; 5;</span><br><span class="line">    string componentName &#x3D; 6;</span><br><span class="line">    string componentMethodName &#x3D; 7;</span><br><span class="line">    string componentType &#x3D; 8;</span><br><span class="line">    string componentVer &#x3D; 9;</span><br><span class="line">    string componentLang &#x3D; 10; </span><br><span class="line">    string userName &#x3D; 11; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="cpp调用"><a href="#cpp调用" class="headerlink" title="cpp调用"></a>cpp调用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;..&#x2F;build&#x2F;proto&#x2F;status.pb.h&quot;</span><br><span class="line">#include &lt;google&#x2F;protobuf&#x2F;util&#x2F;json_util.h&gt;</span><br><span class="line"> </span><br><span class="line">namespace proto &#x3D; google::protobuf::util;</span><br><span class="line"> </span><br><span class="line">using namespace biyi;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">int main() &#123;</span><br><span class="line">    UnifiedLog uniLog;</span><br><span class="line">    uniLog.set_sign(</span><br><span class="line">        &quot;68f3ea8baebbaddc5a47d6d955ecf53892edb4d3d8a3afe08cf4518204d30af5&quot;);</span><br><span class="line">    uniLog.mutable_content()-&gt;set_time_iso8601(&quot;2020-03-09T11:11:14+08:00&quot;);</span><br><span class="line">    uniLog.mutable_content()-&gt;set_companyid(&quot;000&quot;);</span><br><span class="line">    uniLog.mutable_content()-&gt;set_company(&quot;ctsi&quot;);</span><br><span class="line">    uniLog.mutable_content()-&gt;set_projectnamecn(&quot;001&quot;);</span><br><span class="line">    uniLog.mutable_content()-&gt;set_projectname(&quot;biyi&quot;);</span><br><span class="line">    uniLog.mutable_content()-&gt;set_componentname(&quot;micro-service-statics&quot;);</span><br><span class="line">    uniLog.mutable_content()-&gt;set_componentmethodname(&quot;DemoBean.echo&quot;);</span><br><span class="line">    uniLog.mutable_content()-&gt;set_componenttype(&quot;微服务组件&quot;);</span><br><span class="line">    uniLog.mutable_content()-&gt;set_componentver(&quot;v1.0.0&quot;);</span><br><span class="line">    uniLog.mutable_content()-&gt;set_componentlang(&quot;java&quot;);</span><br><span class="line">    uniLog.mutable_content()-&gt;set_username(&quot;admin&quot;);</span><br><span class="line"> </span><br><span class="line">    cout &lt;&lt; uniLog.sign() &lt;&lt; endl;</span><br><span class="line">    &#x2F;&#x2F; message to json string</span><br><span class="line">    string str;</span><br><span class="line">    proto::Status status &#x3D; proto::MessageToJsonString(uniLog, &amp;str);</span><br><span class="line">    if (!status.ok()) &#123;</span><br><span class="line">        cout &lt;&lt; status.ToString() &lt;&lt; endl;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        cout &lt;&lt; &quot;str: &quot; &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Cpp</category>
        <category>protocol</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>mupdf-源码安装</title>
    <url>/article/3549577056.html</url>
    <content><![CDATA[<h3 id="一，源码下载"><a href="#一，源码下载" class="headerlink" title="一，源码下载"></a>一，源码下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直接到官网上下载源码包</span><br><span class="line">https:&#x2F;&#x2F;www.mupdf.com&#x2F;downloads&#x2F;index.html</span><br><span class="line">mupdf-1.16.1-source.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="二，相关依赖下载"><a href="#二，相关依赖下载" class="headerlink" title="二，相关依赖下载"></a>二，相关依赖下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</span><br><span class="line">You should have received a copy of the GNU Affero General Public License along with this program. If not, see http:&#x2F;&#x2F;www.gnu.org&#x2F;licenses</span><br><span class="line"></span><br><span class="line">yum install freeglut-devel</span><br></pre></td></tr></table></figure>
<h3 id="三，编译安装"><a href="#三，编译安装" class="headerlink" title="三，编译安装"></a>三，编译安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make prefix&#x3D;&#x2F;usr&#x2F;local install</span><br></pre></td></tr></table></figure>
<h3 id="四，使用注意"><a href="#四，使用注意" class="headerlink" title="四，使用注意"></a>四，使用注意</h3><p>在cmake的项目中使用静态库的时候，你只能生成静态链接库，在生成应用的时候，链接静态库和动态库都是一样的用法</p>
]]></content>
      <categories>
        <category>Media</category>
        <category>doc</category>
      </categories>
      <tags>
        <tag>mupdf</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-centos7源码安装mysql8.0</title>
    <url>/article/1044847951.html</url>
    <content><![CDATA[<pre><code>因为直接通过yum安装的是mariadb，所以我们需要通过另外的方法来进行安装
</code></pre><h3 id="一，下载mysql"><a href="#一，下载mysql" class="headerlink" title="一，下载mysql"></a>一，下载mysql</h3><p>地址：<a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a>。选择对应版本下载</p>
<h3 id="二，使用wget下载"><a href="#二，使用wget下载" class="headerlink" title="二，使用wget下载"></a>二，使用wget下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在网站上看对应的版本号就好了</span><br><span class="line">wget https:&#x2F;&#x2F;repo.mysql.com&#x2F;&#x2F;mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>
<h3 id="三，安装mysql的源"><a href="#三，安装mysql的源" class="headerlink" title="三，安装mysql的源"></a>三，安装mysql的源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y localinstall mysql80-community-release-el7-1.noarch.rpm（对应版本）</span><br></pre></td></tr></table></figure>
<h3 id="四，在线安装mysql"><a href="#四，在线安装mysql" class="headerlink" title="四，在线安装mysql"></a>四，在线安装mysql</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>
<h3 id="五，linux下设置不区分大小写"><a href="#五，linux下设置不区分大小写" class="headerlink" title="五，linux下设置不区分大小写"></a>五，linux下设置不区分大小写</h3><ol>
<li>使用root账号登录，修改/etc/my.cnf；</li>
<li>在[mysqld]下加入一行：lower_case_table_names=1</li>
<li>mysqld –user=mysql –lower-case-table-names=1 –initialize-insecure datadir=/var/lib/mysql</li>
</ol>
<h3 id="六，设置开机自启"><a href="#六，设置开机自启" class="headerlink" title="六，设置开机自启"></a>六，设置开机自启</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<h3 id="七，修改本地root的密码"><a href="#七，修改本地root的密码" class="headerlink" title="七，修改本地root的密码"></a>七，修改本地root的密码</h3><ol>
<li>查看root账户的临时密码，vim  /var/log/mysqld.log</li>
<li>登录mysql，mysql -u root -p，输入1，中的临时密码</li>
<li>ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘你的密码’;<br>修改密码为 你的密码 (备注：默认密码策略要求密码必须是大小写字母数字特殊字母的组合，至少8位)</li>
</ol>
<h3 id="八，-修改密码策略要求"><a href="#八，-修改密码策略要求" class="headerlink" title="八， 修改密码策略要求"></a>八， 修改密码策略要求</h3><p>~默认密码策略要求密码是大小写字母+数字+特殊字母的组合而且最少8位,不需要修改策略的可以跳过这步~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1，查看密码的策略</span><br><span class="line">SHOW VARIABLES LIKE &#39;validate_password%&#39;;</span><br><span class="line">2，修改密码的策略</span><br><span class="line">set global validate_password.check_user_name&#x3D;OFF;</span><br><span class="line">set global validate_password.policy&#x3D;LOW;</span><br><span class="line">set global validate_password.length&#x3D;4;</span><br><span class="line">flush privileges;</span><br><span class="line">3，修改密码</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;root&#39;;</span><br></pre></td></tr></table></figure>
<h3 id="九，设置允许远程连接"><a href="#九，设置允许远程连接" class="headerlink" title="九，设置允许远程连接"></a>九，设置允许远程连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1，重新登录mysql；</span><br><span class="line">2，选择mysql表； use mysql;</span><br><span class="line">3,更新表的内容；</span><br><span class="line">update user set Host&#x3D;&#39;%&#39; where User&#x3D;&#39;root&#39;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; WITH GRANT OPTION;&#x2F;&#x2F;可能会报错，执行两次即可（不成功就再flush privileges;一次）</span><br></pre></td></tr></table></figure>
<h3 id="十，查看加密方式"><a href="#十，查看加密方式" class="headerlink" title="十，查看加密方式"></a>十，查看加密方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select user, host, plugin, authentication_string from user\G;查看加密方式</span><br><span class="line">8.0加密方式（caching_sha2_password）有些客户端还不支持 ，导致客户端连接失败，所以使用mysql_native_password加密</span><br><span class="line">alter user &#39;root&#39;@&#39;%&#39; identified with mysql_native_password by &#39;helios2020&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="九，卸载mysql"><a href="#九，卸载mysql" class="headerlink" title="九，卸载mysql"></a>九，卸载mysql</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除Mysql</span><br><span class="line">yum remove mysql mysql-server mysql-libs mysql-server;</span><br><span class="line">find &#x2F; -name mysql 将找到的相关东西delete掉</span><br><span class="line">(rm -rf &#x2F;var&#x2F;lib&#x2F;mysql)；</span><br><span class="line">rpm -qa|grep mysql(查询出来的东东yum remove掉)</span><br><span class="line">rm &#x2F;etc&#x2F;my.cnf （可能不存在）</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-mysql常用命令</title>
    <url>/article/4107582643.html</url>
    <content><![CDATA[<p>记录一下常用的mysql数据库的命令</p>
<h3 id="数据库导入"><a href="#数据库导入" class="headerlink" title="数据库导入"></a>数据库导入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -phelios2020 &lt;&#x2F;opt&#x2F;vidFactory&#x2F;database&#x2F;sql&#x2F;initDatatbase.sql</span><br></pre></td></tr></table></figure>
<h3 id="数据库导出"><a href="#数据库导出" class="headerlink" title="数据库导出"></a>数据库导出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p 数据库名 &gt; initDatatbase.sql</span><br></pre></td></tr></table></figure>
<h3 id="database"><a href="#database" class="headerlink" title="database"></a>database</h3><h5 id="展示数据库"><a href="#展示数据库" class="headerlink" title="展示数据库"></a>展示数据库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>
<h5 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use vidfactory;</span><br></pre></td></tr></table></figure>
<h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><h5 id="展示表"><a href="#展示表" class="headerlink" title="展示表"></a>展示表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>
<h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><h6 id="插入所有字段"><a href="#插入所有字段" class="headerlink" title="插入所有字段"></a>插入所有字段</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inset into tableName values(值1，值2，值3....)</span><br></pre></td></tr></table></figure>
<h6 id="插入某些字段"><a href="#插入某些字段" class="headerlink" title="插入某些字段"></a>插入某些字段</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inset into tableName(列名a,列名b,列名c) values(值1，值2，值3);</span><br></pre></td></tr></table></figure>
<h5 id="查看某个表的结构"><a href="#查看某个表的结构" class="headerlink" title="查看某个表的结构"></a>查看某个表的结构</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">desc tableName \G;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>opencv-源码安装</title>
    <url>/article/3084764285.html</url>
    <content><![CDATA[<h3 id="一，源码下载"><a href="#一，源码下载" class="headerlink" title="一，源码下载"></a>一，源码下载</h3><p>​        通过git源码下载OpenCV，直接在GitHub上下载的速度特别慢，所以我们需要先将其fork，然后同步到gitee上面，通过自己的gitee账号来进行下载，这个速度比较快。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;gitee.com&#x2F;helioswei&#x2F;opencv.git</span><br></pre></td></tr></table></figure>
<h3 id="二，源码编译"><a href="#二，源码编译" class="headerlink" title="二，源码编译"></a>二，源码编译</h3><h5 id="1，cmake版本需求"><a href="#1，cmake版本需求" class="headerlink" title="1，cmake版本需求"></a>1，cmake版本需求</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CMake 3.5.1 or higher is required.  You are running version 2.8.12.2</span><br><span class="line">我们需要先源码编译cmake</span><br></pre></td></tr></table></figure>
<h5 id="2，安装相关的依赖"><a href="#2，安装相关的依赖" class="headerlink" title="2，安装相关的依赖"></a>2，安装相关的依赖</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1，需要Python的依赖包</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="2，编译"><a href="#2，编译" class="headerlink" title="2，编译"></a>2，编译</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在OpenCV目录中，创建build目录，然后直接cmake</span><br><span class="line">cd opencv</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Media</category>
        <category>image</category>
      </categories>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>poco-源码编译包含mysql</title>
    <url>/article/3587508548.html</url>
    <content><![CDATA[<h3 id="一，源码下载库"><a href="#一，源码下载库" class="headerlink" title="一，源码下载库"></a>一，源码下载库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先在git上fork，然后同步到码云上，在clone可以加快下载的速度</span><br><span class="line">git clone https:&#x2F;&#x2F;gitee.com&#x2F;helioswei&#x2F;poco.git</span><br></pre></td></tr></table></figure>
<h3 id="二，编译环境准备"><a href="#二，编译环境准备" class="headerlink" title="二，编译环境准备"></a>二，编译环境准备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++ make openssl-devel</span><br></pre></td></tr></table></figure>
<h3 id="三，安装mysql"><a href="#三，安装mysql" class="headerlink" title="三，安装mysql"></a>三，安装mysql</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">见mysql的源码安装，安装时没有头文件，所以我们需要安装头文件</span><br><span class="line">yum install mysql-devel</span><br></pre></td></tr></table></figure>
<h3 id="四，编译"><a href="#四，编译" class="headerlink" title="四，编译"></a>四，编译</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要提前安装GCC5.1.0来支持c++14</span><br><span class="line">.&#x2F;configure --shared --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;poco  --cflags&#x3D;-std&#x3D;c++14 --include-path&#x3D;&#x2F;usr&#x2F;include&#x2F;mysql&#x2F; --library-path&#x3D;&#x2F;usr&#x2F;lib64&#x2F;mysql&#x2F; --omit&#x3D;Data&#x2F;ODBC,MongoDB,PDF</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>poco</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitmq-AMQPCPP使用问题记录</title>
    <url>/article/3077642244.html</url>
    <content><![CDATA[<p>​        记录<a href="https://github.com/CopernicaMarketingSoftware/AMQP-CPP">AMQP_CPP</a>的使用过程中出现的问题，我是用的主要是<code>LibEvHandler</code>这个类来进行处理的,以下所有的问题都是在这个基础上面,仔细的查看头文件可以了解更多的使用方法。</p>
<h3 id="任务执行长时间后导致连接丢失的问题"><a href="#任务执行长时间后导致连接丢失的问题" class="headerlink" title="任务执行长时间后导致连接丢失的问题"></a>任务执行长时间后导致连接丢失的问题</h3><p><code>LibEvHandler</code>中对于rabbitmq的默认心跳是60s，如果当前队列没有任务处理，则其会自动的发送心跳，保持client和server之间的连接，如果你执行某个任务的时间过长，大于60s，则在执行任务期间，其不会自动的发送心跳导致两者之间的连接断开，导致下次获取数据时提示链接错误，获取数据失败。解决办法：</p>
<ol>
<li><p>重写LibEvHandler中的<code>onNegotiate</code>以及<code>onHeartbeat</code>这两个方法，前者用于设置心跳的时间，后者用于心跳发送时的函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="number">23</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> :</span> <span class="keyword">public</span> AMQP::LibEvHandler &#123;</span><br><span class="line">   <span class="number">24</span>  </span><br><span class="line">   <span class="number">25</span>    <span class="keyword">public</span>:</span><br><span class="line">&gt;&gt; <span class="number">26</span>     MyHandler(struct ev_loop* loop) : AMQP::LibEvHandler(loop) &#123;&#125;</span><br><span class="line">   <span class="number">27</span>     <span class="comment">//解决consume在处理任务时的连接超时的问题</span></span><br><span class="line">&gt;&gt; <span class="number">28</span>     <span class="function"><span class="keyword">uint16_t</span> <span class="title">onNegotiate</span><span class="params">(AMQP::TcpConnection* connection, <span class="keyword">uint16_t</span> timeout)</span> </span>&#123;</span><br><span class="line">   <span class="number">29</span>         <span class="keyword">return</span> <span class="number">70</span>;<span class="comment">//必须设置一个值</span></span><br><span class="line">   <span class="number">30</span>     &#125;</span><br><span class="line">&gt;&gt; <span class="number">31</span>     <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onHeartbeat</span><span class="params">(AMQP::TcpConnection* connection)</span> </span>&#123;</span><br><span class="line">   <span class="number">32</span>         connection-&gt;heartbeat();</span><br><span class="line">   <span class="number">33</span>     &#125;</span><br><span class="line">   <span class="number">34</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>另外开一个线程，定时手动的发送心跳给rabbitmq</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">   <span class="number">46</span>     <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&gt;&gt; <span class="number">47</span>         <span class="class"><span class="keyword">struct</span> <span class="title">ev_loop</span>* <span class="title">loop</span> =</span> ev_loop_new();</span><br><span class="line">   <span class="number">48</span>         <span class="comment">// AMQP::LibEvHandler handler(loop);</span></span><br><span class="line">   <span class="number">49</span>         <span class="function">MyHandler <span class="title">handler</span><span class="params">(loop)</span></span>;</span><br><span class="line">   <span class="number">50</span>         <span class="function">AMQP::TcpConnection <span class="title">connection</span><span class="params">(&amp;handler, *_address)</span></span>;</span><br><span class="line">   <span class="number">51</span>         _connection = &amp;connection;</span><br><span class="line">   <span class="number">52</span>         <span class="function">AMQP::TcpChannel <span class="title">channel</span><span class="params">(&amp;connection)</span></span>;</span><br><span class="line">   <span class="number">53</span>         <span class="comment">//// channel.setQos(1);</span></span><br><span class="line">   <span class="number">54</span>         _channel = &amp;channel;</span><br><span class="line">              <span class="comment">//另外开一个线程，用于检测rabbitmq的链接，以及定时的发送心跳</span></span><br><span class="line">   <span class="number">55</span>         <span class="function"><span class="built_in">std</span>::thread <span class="title">check</span><span class="params">(&amp;Consume::checkConnect, <span class="keyword">this</span>)</span></span>;</span><br><span class="line">   <span class="number">56</span>         <span class="comment">// 1s后执行一次回调，之后每10s执行一次</span></span><br><span class="line">   <span class="number">57</span>         ev_timer_init(&amp;_timer, TClass::callback, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">   <span class="number">58</span>         _timer.data = <span class="keyword">this</span>;</span><br><span class="line">   <span class="number">59</span>         ev_timer_start(loop, &amp;_timer);</span><br><span class="line">   <span class="number">60</span>         ev_run(loop, <span class="number">0</span>);</span><br><span class="line">   <span class="number">61</span>         check.join();</span><br><span class="line">   <span class="number">62</span>     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">165</span>     <span class="function"><span class="keyword">void</span> <span class="title">checkConnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">166</span>         <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">//判读链接是否可用，可用即发送心跳</span></span><br><span class="line"><span class="number">167</span>             <span class="keyword">if</span> (_connection-&gt;usable()) _connection-&gt;heartbeat();</span><br><span class="line">                <span class="comment">//判读当前通道是否可用，如果失败则杀死当前程序</span></span><br><span class="line"><span class="number">168</span>             _channel-&gt;onError([&amp;](<span class="keyword">const</span> <span class="keyword">char</span>* message) &#123;</span><br><span class="line"><span class="number">169</span>                 LOG(ERROR) &lt;&lt; <span class="string">&quot;The channel is error, exit: &quot;</span> &lt;&lt; message;</span><br><span class="line"><span class="number">170</span>                 killAll();</span><br><span class="line"><span class="number">171</span>             &#125;);</span><br><span class="line">                <span class="comment">//判读当前连接是否关闭，如果关闭则杀死当前程序</span></span><br><span class="line"><span class="number">172</span>             <span class="keyword">if</span> (_connection-&gt;closed()) &#123;</span><br><span class="line"><span class="number">173</span>                 <span class="keyword">if</span> (_connection != <span class="literal">NULL</span>) _connection-&gt;close();</span><br><span class="line"><span class="number">174</span>                 LOG(ERROR) &lt;&lt; <span class="string">&quot;The connection is closed,exit&quot;</span>;</span><br><span class="line"><span class="number">175</span>                 killAll();</span><br><span class="line"><span class="number">176</span>             &#125;</span><br><span class="line">                <span class="comment">//sleep 5s</span></span><br><span class="line"><span class="number">177</span>             Poco::Thread::sleep(<span class="number">5000</span>);</span><br><span class="line"><span class="number">178</span>         &#125;</span><br><span class="line"><span class="number">179</span>     &#125;</span><br><span class="line"><span class="number">180</span>     <span class="function"><span class="keyword">void</span> <span class="title">killAll</span><span class="params">()</span> </span>&#123; kill(<span class="number">0</span>, SIGABRT); &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="每次仅仅处理一个任务的问题"><a href="#每次仅仅处理一个任务的问题" class="headerlink" title="每次仅仅处理一个任务的问题"></a>每次仅仅处理一个任务的问题</h3><p>​        对于消息者来说，监听一个队列，如果队列里面有多条的数据，其会一下子都消费掉（有个最大值可查文档），比如你的队列里面有100条数据，其会都拿到放到内存中，如果过程中你的服务挂掉，则数据会丢失，为了解决这个问题，我们需要设置消费者每次拿到的数据量。AMQP_CPP中使用<code>setQos()</code>来进行设置</p>
<font color="red"><code>注意：仅对手动ack有效</code></font>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">AMQP::TcpChannel <span class="title">channel</span><span class="params">(&amp;connection)</span></span>;</span><br><span class="line">channel.setQos(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h3 id="无法重新连接的问题"><a href="#无法重新连接的问题" class="headerlink" title="无法重新连接的问题"></a>无法重新连接的问题</h3><p>如果我们的rabbitmq挂了我们的服务应该怎么办了，一般对于这种有两种方法来处理</p>
<ol>
<li>实现rabbitmq的重试机制，rabbitmq连接断开后，我们能够自动的恢复；</li>
<li>服务中断机制，rabbitmq连接断开，我们的服务也中断，再通过某个服务能够拉起（守护进程）</li>
</ol>
<p>再AMQP_CPP中重连的机制不好处理，所以我们选择第二种方法</p>
]]></content>
      <categories>
        <category>Database</category>
        <category>rabbitmq</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitmq-AMQPCPP的编译</title>
    <url>/article/3142310907.html</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;CopernicaMarketingSoftware&#x2F;AMQP-CPP.git</span><br></pre></td></tr></table></figure>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd AMQP-CPP</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake -DAMQP-CPP_BUILD_SHARED&#x3D;true -DAMQP-CPP_LINUX_TCP&#x3D;true -DCMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;amqpcpp ..</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
        <category>rabbitmq</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>s3-libs3源码编译</title>
    <url>/article/3714481837.html</url>
    <content><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install libxml2-devel</span><br><span class="line"></span><br><span class="line">yum install libxml2</span><br><span class="line"></span><br><span class="line">yum install libcurl-devel</span><br></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">cd build&#x2F;lib</span><br></pre></td></tr></table></figure>
<p><code>有两个文件libs3.so.4</code></p>
]]></content>
      <categories>
        <category>Database</category>
        <category>s3</category>
      </categories>
      <tags>
        <tag>s3</tag>
      </tags>
  </entry>
  <entry>
    <title>s3-关于s3cmd的下载</title>
    <url>/article/3778876136.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;很多人都用过对象存储，比如亚马逊的s3平台，我想大家都比较熟悉，今天来介绍一款工具，用来在centos7平台上方便的操作对象存储的东西，比如查看自己的桶，创建桶等。</p>
<h2 id="s3cmd的下载"><a href="#s3cmd的下载" class="headerlink" title="s3cmd的下载"></a>s3cmd的下载</h2><h3 id="第一步下载get-pip-py"><a href="#第一步下载get-pip-py" class="headerlink" title="第一步下载get-pip.py"></a>第一步下载get-pip.py</h3><blockquote>
<p>wget  <a href="https://bootstrap.pypa.io/get-pip.py">https://bootstrap.pypa.io/get-pip.py</a></p>
</blockquote>
<h3 id="第二步安装get-pip-py"><a href="#第二步安装get-pip-py" class="headerlink" title="第二步安装get-pip.py"></a>第二步安装get-pip.py</h3><blockquote>
<p>python get-pip.py</p>
</blockquote>
<h3 id="第三步安装s3cmd"><a href="#第三步安装s3cmd" class="headerlink" title="第三步安装s3cmd"></a>第三步安装s3cmd</h3><blockquote>
<p>pip install s3cmd</p>
</blockquote>
<h3 id="第四步设置-s3cfg"><a href="#第四步设置-s3cfg" class="headerlink" title="第四步设置.s3cfg"></a>第四步设置.s3cfg</h3><blockquote>
<p>设置三个比较主要的<br><img src="/images/access_key.png" alt="设置access_key"><br><img src="/images/host_bucket.png" alt="设置host_bucket"><br><img src="/images/secret_key.png" alt="设置secret_key">  </p>
</blockquote>
]]></content>
      <categories>
        <category>Database</category>
        <category>s3</category>
      </categories>
      <tags>
        <tag>cmd</tag>
        <tag>s3</tag>
      </tags>
  </entry>
  <entry>
    <title>spider-centos7安装selenium模拟浏览器请求</title>
    <url>/article/933612194.html</url>
    <content><![CDATA[<h3 id="安装selenium"><a href="#安装selenium" class="headerlink" title="安装selenium"></a>安装selenium</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>
<h3 id="安装chrome浏览器"><a href="#安装chrome浏览器" class="headerlink" title="安装chrome浏览器"></a>安装chrome浏览器</h3><h5 id="1，配置yum源"><a href="#1，配置yum源" class="headerlink" title="1，配置yum源"></a>1，配置yum源</h5><p>在目录/etc/yum.repos.d/ 下新建文件 google-chrome.repo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;yum.repos.d&#x2F;</span><br><span class="line">vim google-chrome.repo</span><br></pre></td></tr></table></figure>
<p>写入以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[google-chrome]</span><br><span class="line">name&#x3D;google-chrome</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;chrome&#x2F;rpm&#x2F;stable&#x2F;$basearch</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;dl-ssl.google.com&#x2F;linux&#x2F;linux_signing_key.pub</span><br></pre></td></tr></table></figure>
<p>安装google chrome浏览器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install google-chrome-stable</span><br></pre></td></tr></table></figure>
<p>google官方源可能在中国无法使用，导致安装失败或者在国内无法更新，可以添加以下参数来安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install google-chrome-stable --nogpgcheck</span><br></pre></td></tr></table></figure>
<h5 id="运行chrome"><a href="#运行chrome" class="headerlink" title="运行chrome"></a>运行chrome</h5><p>找到chrome路径，并做个软连接，方便使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">which google-chrome-stable</span><br><span class="line">ln -s xxx &#x2F;bin&#x2F;chrome</span><br></pre></td></tr></table></figure>
<p>使用root用户启动chrome示例时会提示添加参数–no-sandbox flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chrome --no-sandbox flag</span><br></pre></td></tr></table></figure>
<h3 id="安装chromedriver"><a href="#安装chromedriver" class="headerlink" title="安装chromedriver"></a>安装chromedriver</h3><p>查看google-chrome的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">google-chrome --version</span><br></pre></td></tr></table></figure>
<p>chromedriver版本支持的Chrome版本</p>
<p><a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">chromeDriver官网</a>官网一般比较慢</p>
<p><a href="http://npm.taobao.org/mirrors/chromedriver/">淘宝镜像</a></p>
<p>移动chromedriver到/usr/bin</p>
<h3 id="selenium-python验证"><a href="#selenium-python验证" class="headerlink" title="selenium+python验证"></a>selenium+python验证</h3><p>运行一段test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver                                                                                                       </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"> </span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)    <span class="comment"># 禁止沙箱模式，否则肯能会报错遇到chrome异常</span></span><br><span class="line">url=<span class="string">&quot;https://www.west.cn/login.asp&quot;</span></span><br><span class="line">brower=webdriver.Chrome(executable_path=<span class="string">&quot;/usr/bin/chromedriver&quot;</span>, chrome_options=chrome_options)</span><br><span class="line">brower.get(url)</span><br><span class="line">print(brower.current_url)</span><br><span class="line">brower.get(<span class="string">&quot;https://www.west.cn/Manager/&quot;</span>)</span><br><span class="line">print(brower.current_url)</span><br><span class="line">brower.quit()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3.6 test.py</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.west.cn&#x2F;login.asp</span><br><span class="line">https:&#x2F;&#x2F;www.west.cn&#x2F;login.asp?pageStr&#x3D;&#x2F;Manager&#x2F;Default.asp</span><br></pre></td></tr></table></figure>
<h3 id="使用pyautogui"><a href="#使用pyautogui" class="headerlink" title="使用pyautogui"></a>使用pyautogui</h3><p>对于一些元素虽然页面可以点击，但是获取的元素无法点击，我们可以使用pyautogui来模拟鼠标的点击更加的方便</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pyautogui</span><br></pre></td></tr></table></figure>
<h3 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h3><p>使用selenium-server-standalone进行远程调用，<a href="https://www.xiehai.win/java/2019/05/24/selenium-server-standalone.html">详解可以看这篇连接</a></p>
<p><a href="http://selenium-release.storage.googleapis.com/index.html">selenium-server-standalone下载</a></p>
<h5 id="jar8环境的安装"><a href="#jar8环境的安装" class="headerlink" title="jar8环境的安装"></a>jar8环境的安装</h5><p><a href="https://www.yaosansi.com/post/install-java-jdk-on-centos/">jar环境的安装</a></p>
<h5 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h5><p>参数配置方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动hub</span><br><span class="line">java -jar selenium-server-standalone-3.141.59.jar -role hub -maxSession 10 -port 4444</span><br><span class="line"># 启动node</span><br><span class="line">java -jar  -&quot;Dwebdriver.chrome.driver&#x3D;C:\\tools\\driver\\chromedriver.exe&quot; selenium-server-standalone-3.141.59.jar -role node  -hub http:&#x2F;&#x2F;localhost:4444&#x2F;grid&#x2F;register -port 4445</span><br></pre></td></tr></table></figure>
<p>配置文件方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动hub</span><br><span class="line">java -jar selenium-server-standalone-3.141.59.jar -role hub -hubConfig hub.json</span><br><span class="line"># 启动node</span><br><span class="line">java -jar selenium-server-standalone-3.141.59.jar -role node -hub http:&#x2F;&#x2F;localhost:4444&#x2F;grid&#x2F;register -nodeConfig node.json</span><br></pre></td></tr></table></figure>
<p><code>hub.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;port&quot;</span>: <span class="number">4444</span>,</span><br><span class="line">  <span class="attr">&quot;newSessionWaitTimeout&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">  <span class="attr">&quot;servlets&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;capabilityMatcher&quot;</span>: <span class="string">&quot;org.openqa.grid.internal.utils.DefaultCapabilityMatcher&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;throwOnCapabilityNotPresent&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;nodePolling&quot;</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">&quot;cleanUpCycle&quot;</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">&quot;timeout&quot;</span>: <span class="number">60</span>,</span><br><span class="line">  <span class="attr">&quot;browserTimeout&quot;</span>: <span class="number">60</span>,</span><br><span class="line">  <span class="attr">&quot;maxSession&quot;</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">&quot;jettyMaxThreads&quot;</span>: <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>node.json</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;capabilities&quot;: [</span><br><span class="line">	&#123;</span><br><span class="line">	  &quot;browserName&quot;: &quot;firefox&quot;,</span><br><span class="line">	  &quot;marionette&quot;: true,</span><br><span class="line">	  &quot;maxInstances&quot;: 1,</span><br><span class="line">	  &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">	  &quot;browserName&quot;: &quot;chrome&quot;,</span><br><span class="line">	  &quot;maxInstances&quot;: 3,</span><br><span class="line">	  &quot;platform&quot;: &quot;WINDOWS&quot;,</span><br><span class="line">	  &quot;webdriver.chrome.driver&quot;: &quot;D:\\javaproject\\oATFWeb\\External\\chromedriver2.4.1.exe&quot;,</span><br><span class="line">	  &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">	  &quot;browserName&quot;: &quot;internet explorer&quot;,</span><br><span class="line">	  &quot;platform&quot;: &quot;WINDOWS&quot;,</span><br><span class="line">	  &quot;maxInstances&quot;: 1,</span><br><span class="line">	  &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">	  &quot;browserName&quot;: &quot;safari&quot;,</span><br><span class="line">	  &quot;technologyPreview&quot;: false,</span><br><span class="line">	  &quot;platform&quot;: &quot;MAC&quot;,</span><br><span class="line">	  &quot;maxInstances&quot;: 1,</span><br><span class="line">	  &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;</span><br><span class="line">	&#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;proxy&quot;: &quot;org.openqa.grid.selenium.proxy.DefaultRemoteProxy&quot;,</span><br><span class="line">  &quot;maxSession&quot;: 5,</span><br><span class="line">  &quot;port&quot;: 5555,</span><br><span class="line">  &quot;register&quot;: true,</span><br><span class="line">  &quot;registerCycle&quot;: 5000,</span><br><span class="line">  &quot;hub&quot;: &quot;http:&#x2F;&#x2F;10.12.1.140:4444&quot;,</span><br><span class="line">  &quot;nodeStatusCheckTimeout&quot;: 5000,</span><br><span class="line">  &quot;nodePolling&quot;: 5000,</span><br><span class="line">  &quot;role&quot;: &quot;node&quot;,</span><br><span class="line">  &quot;unregisterIfStillDownAfter&quot;: 60000,</span><br><span class="line">  &quot;downPollingLimit&quot;: 2,</span><br><span class="line">  &quot;debug&quot;: false,</span><br><span class="line">  &quot;servlets&quot;: [],</span><br><span class="line">  &quot;withoutServlets&quot;: [],</span><br><span class="line">  &quot;custom&quot;: &#123;&#125;,</span><br><span class="line">  &quot;browserTimeout&quot;: 60,</span><br><span class="line">  &quot;timeout&quot;: 60</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>访问http://hub.ip:port/grid/console可以看到node的详细配置</code></p>
<h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.remote.webdriver <span class="keyword">import</span> WebDriver <span class="keyword">as</span> RemoteWebDriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">chrome_options = Options()</span><br><span class="line"> </span><br><span class="line">proxy=<span class="string">&#x27;58.254.220.116:53579&#x27;</span></span><br><span class="line"><span class="comment">#chrome_options.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-automation&#x27;])</span></span><br><span class="line"><span class="comment">#chrome_options.add_argument(&quot;--proxy-server=http://&quot; + proxy)</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;start-maximized&quot;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;enable-automation&quot;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br><span class="line"><span class="comment">#chrome_options.add_argument(&quot;blink-settings=imagesEnabled=false&quot;)</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"><span class="comment">#chrome_options.add_argument(&quot;--dns-prefetch-disable&quot;)</span></span><br><span class="line"><span class="comment">#chrome_options.add_argument(&quot;--no-proxy-server&quot;)</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)    <span class="comment"># 禁止沙箱模式，否则肯能会报错遇到chrome异常</span></span><br><span class="line"><span class="comment">#url=&quot;https://www.365365918.com/#/AC/B1/C1/D8/E91032124/F3/I1/&quot;</span></span><br><span class="line"><span class="comment">#url=&quot;https://www.365365918.com/&quot;</span></span><br><span class="line">url=<span class="string">&quot;https://www.betvictor68.mobi/&quot;</span></span><br><span class="line"><span class="comment">#url=&quot;https://blog.csdn.net/tiantiantdx/article/details/79434550?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-8.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-8.edu_weight&quot;</span></span><br><span class="line"><span class="comment">#url=&quot;https://juejin.im/entry/5b2ca6316fb9a00e7747561a&quot;</span></span><br><span class="line"><span class="comment">#url=&quot;https://stackoverflow.com/questions/48450594/selenium-timed-out-receiving-message-from-renderer&quot;</span></span><br><span class="line"><span class="comment">#url=&quot;https://zhuanlan.zhihu.com/p/111859925&quot;</span></span><br><span class="line"><span class="comment">#打开google浏览器</span></span><br><span class="line"><span class="comment">#brower=webdriver.Chrome(executable_path=&quot;/usr/bin/chromedriver&quot;, chrome_options=chrome_options)</span></span><br><span class="line">brower=RemoteWebDriver(command_executor=<span class="string">&quot;http://192.168.50.74:4444/wd/hub&quot;</span>, desired_capabilities=chrome_options.to_capabilities())</span><br><span class="line"><span class="comment">#访问地址</span></span><br><span class="line">brower.get(url)</span><br><span class="line"><span class="comment">#设置请求的时间，等待js执行完毕</span></span><br><span class="line"><span class="comment">#time.sleep(5)</span></span><br><span class="line">brower.implicitly_wait(<span class="number">30</span>);</span><br><span class="line">pageSource=brower.find_element_by_xpath(<span class="string">&quot;//*&quot;</span>).get_attribute(<span class="string">&quot;outerHTML&quot;</span>)</span><br><span class="line"><span class="comment">#pageSource=brower.execute_script(&quot;return document.documentElement.outerHTML&quot;)</span></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;/root/bet365.html&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">fo.write(pageSource)</span><br><span class="line">fo.close()</span><br><span class="line"><span class="comment">#print(pageSource)</span></span><br><span class="line"><span class="comment">#退出Google浏览器</span></span><br><span class="line">brower.quit()</span><br></pre></td></tr></table></figure>
<h3 id="windows搭建python的环境"><a href="#windows搭建python的环境" class="headerlink" title="windows搭建python的环境"></a>windows搭建python的环境</h3><p><a href="https://www.python.org/downloads/windows/">直接到官网</a>下载对应版本的</p>
<p>submit text3执行python</p>
<h5 id="设置build"><a href="#设置build" class="headerlink" title="设置build"></a>设置build</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开sublime，依次点击菜单Tools--&gt;Build System--&gt;New Build System</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;cmd&quot;: [&quot;D:\helios\software\python\python.exe&quot;, &quot;-u&quot;, &quot;$file&quot;],</span><br><span class="line">	&quot;file_regex&quot;: &quot;[ ]File \&quot;(…?)\&quot;, line ([0-9]*)&quot;,</span><br><span class="line">	&quot;selector&quot;: &quot;source.python&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctrl + b来执行python</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tool</category>
        <category>spider</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>博客的分类</title>
    <url>/article/2992991387.html</url>
    <content><![CDATA[<p>​    本篇文档介绍一个该博客的分类情况，方便以后写博客时目录的清晰。博客的分类如下（一级分类，二级标签）：</p>
<ul>
<li><code>AI</code>  AI相关的知识；<ul>
<li>PaddleHUb</li>
</ul>
</li>
<li><code>Centos7</code>  服务器系统方面的知识；<ul>
<li>zsh</li>
<li>yum</li>
<li>cmd</li>
<li>network</li>
<li>io</li>
</ul>
</li>
<li><code>Docker</code>  容器方面的知识；<ul>
<li>cmd</li>
</ul>
</li>
<li><code>Media</code>  音视频，图片，文档等媒体处理方面的知识；<ul>
<li>doc<ul>
<li>pdf</li>
</ul>
</li>
<li>image<ul>
<li>libraw</li>
<li>libvips</li>
<li>opencv</li>
</ul>
</li>
<li>video<ul>
<li>cuda</li>
<li>ffmpeg<ul>
<li>io</li>
<li>avfilter</li>
<li>GPU</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>Database</code>  数据存储，缓存等方面的知识；<ul>
<li>mysql</li>
<li>rabbitmq</li>
<li>s3</li>
</ul>
</li>
<li><code>Tool</code>  常用的一些工具；<ul>
<li>git<ul>
<li>cmd</li>
<li>lfs</li>
</ul>
</li>
<li>hexo<ul>
<li>cmd</li>
<li>gulp</li>
<li>next</li>
</ul>
</li>
<li>spider 爬虫<ul>
<li>selenium</li>
</ul>
</li>
</ul>
</li>
<li><code>Talk</code> 生活感悟文章；</li>
<li><code>Cpp</code> c cpp 开发； <ul>
<li>gcc<ul>
<li>env</li>
</ul>
</li>
<li>protocol<ul>
<li>grpc</li>
<li>json</li>
</ul>
</li>
<li>restful</li>
<li>log</li>
<li>poco</li>
<li>unitTest<ul>
<li>gtest+lcov</li>
</ul>
</li>
</ul>
</li>
<li><code>Blog</code>  本博客的说明</li>
</ul>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>相机底片的解析</title>
    <url>/article/4054922039.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;公司要求对相机原生格式如后缀为dng,CR2等的图片进行转码，然后预览，自己查找了一下资料，目前仅仅是用命令行来进行处理的，因为我们是linux端的服务，所以直接封装命令行比较的简单。</p>
<h3 id="DNG数据格式的介绍"><a href="#DNG数据格式的介绍" class="headerlink" title="DNG数据格式的介绍"></a>DNG数据格式的介绍</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.cnblogs.com&#x2F;adong7639&#x2F;p&#x2F;4446828.html</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;wgx571859177&#x2F;article&#x2F;details&#x2F;80755793?utm_source&#x3D;blogxgwz1</span><br></pre></td></tr></table></figure>
<h3 id="DNG格式基本的概念"><a href="#DNG格式基本的概念" class="headerlink" title="DNG格式基本的概念"></a>DNG格式基本的概念</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  DNG格式是在TIFF的基础上扩展出来的，要了解DNG，需要清楚TIFF,</span><br><span class="line">TIFF&#x2F;EP,DNG,RAW之间的关系。</span><br><span class="line">  DNG（Digital Negative）是Adobe开发的一种开发的raw image file format ,</span><br><span class="line">主要是为了统一不同厂商的raw格式。里面使用的tag基本上都定义在TIFF或者TIFF&#x2F;EP 中，</span><br><span class="line">在DNG Sepcification中只是定义或者建议了数据的组织方式，颜色空间的转换等等。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="TIFF-EP"><a href="#TIFF-EP" class="headerlink" title="TIFF/EP"></a>TIFF/EP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TIFF是一个灵活适应性强的文件格式。通过在文件标头中使用&quot;标签&quot;，它能够在一个</span><br><span class="line">文件中处理多幅图像和数据。标签能够标明图像的如图像大小这样的基本几何尺寸，</span><br><span class="line">或者定义图像数据是如何排列的，或者是否使用了各种各样的图像压缩选项。</span><br><span class="line"></span><br><span class="line">TIFF&#x2F;EP的全称是&quot;Tag Image File Format &#x2F; Electronic Photography&quot;。 </span><br><span class="line">它是一个名为&quot;Electronic still-picture imaging – Removable </span><br><span class="line">memory – Part 2: TIFF&#x2F;EP image data format&quot;ISO标准， 标准号为</span><br><span class="line">ISO12234-2。TIFF&#x2F;EP对TIFF文件扩展部分标记属性。</span><br></pre></td></tr></table></figure>
<h3 id="RAW"><a href="#RAW" class="headerlink" title="RAW"></a>RAW</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RAW文件包含创建一个可视图像所必须的相机传感器数据信息。RAW文件的结构，包括ISO标准的RAW图像格式ISO 12234-2 ，TIFF &#x2F; EP，往往遵循一个共同的模式，那就是：</span><br><span class="line"></span><br><span class="line">一个短的文件头，它通常包含文件的字节顺序，文件标识符和主数据的文件偏移量摄像传感器元数据，用来描述图像传感器的数据，包括传感器的尺寸， 颜色滤波矩阵(color filter array)的属性和它的颜色配置文件</span><br><span class="line"></span><br><span class="line">列入任何CMS环境或数据库中需要的图像元数据。这些措施包括曝光设定，相机&#x2F;扫描仪&#x2F;镜头模型，拍摄&#x2F;扫描日期（和可选的位置信息），创作信息和其他。一些原始文件包含可交换图像格式的标准化元数据节；</span><br><span class="line"></span><br><span class="line">图像缩略图；</span><br><span class="line"></span><br><span class="line">可选的JPEG格式缩小尺寸的图像，可用于快速预览；</span><br><span class="line"></span><br><span class="line">在电影胶片扫描中，无论是文件序列的时间码，序列码或帧编号都代表在扫描卷轴中的帧顺序。这个项目允许文件被被按帧顺序排列（不依赖于它的文件名​）；</span><br><span class="line"></span><br><span class="line">传感器图像数据；</span><br></pre></td></tr></table></figure>
<h3 id="常见的RAW格式"><a href="#常见的RAW格式" class="headerlink" title="常见的RAW格式"></a>常见的RAW格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">许多RAW格式, 包括 3FR (Hasselblad), DCR, K25, KDC (Kodak), IIQ (Phase One), CR2 (Canon), </span><br><span class="line">ERF (Epson), MEF (Mamiya), MOS (Leaf), NEF (Nikon), ORF (Olympus), PEF (Pentax), </span><br><span class="line">RW2 (Panasonic) and ARW, SRF, SR2 (Sony), 都是基于TIFF格式。 这些文件可能在许多方面偏离TIFF标准，</span><br><span class="line">包括使用一个非标准的文件头，列入额外的图像标记和一些标签的数据加密。</span><br></pre></td></tr></table></figure>
<h3 id="TIFF-TIFF-EP-DNG-RAW之间的关系"><a href="#TIFF-TIFF-EP-DNG-RAW之间的关系" class="headerlink" title="TIFF, TIFF/EP, DNG, RAW之间的关系"></a>TIFF, TIFF/EP, DNG, RAW之间的关系</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TIFF和DNG同为Specification，分别定义了后缀名为.tif&#x2F;.tiff和.dng的文件格式同时在TIFF Specification也定义个baseline及部分扩展的tag。</span><br><span class="line"></span><br><span class="line">TIFF&#x2F;EP则定义并规范了在电子影像中所使用的TAG。</span><br><span class="line"></span><br><span class="line">DNG同时与TIFF和TIFF&#x2F;EP兼容，并包含了EXIF和XMP信息。DNG实际上就是扩张的TIFF， 把DNG的扩展名改成TIF就可以直接预览图片。</span><br><span class="line"></span><br><span class="line">在DNG出现以前，各个数码相机制造商都有自己的格式，比如Canon(cr2&#x2F;crw), Nikon(nef), Olympus(orf), Pentex(pef)等等。之所以出现这么多格式，一方面的原因是在这之前没有统一的raw格式， 但更重要的是，各个厂商希望用这个只对自己公开的数据格式来保护自己的私密信息。Adobe推出DNG希望能一统raw的天下。</span><br></pre></td></tr></table></figure>
<h3 id="处理不同格式RAW或者DNG底片的方法"><a href="#处理不同格式RAW或者DNG底片的方法" class="headerlink" title="处理不同格式RAW或者DNG底片的方法"></a>处理不同格式RAW或者DNG底片的方法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;为了能够得到RAW格式或者DNG格式的jpg图片供我们预览，可以使用DCRAW和ffmpeg来结合使用</p>
<h4 id="dcraw介绍"><a href="#dcraw介绍" class="headerlink" title="dcraw介绍"></a>dcraw介绍</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;bi_diu1368&#x2F;article&#x2F;details&#x2F;80411304</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,dcraw 下载   yum  install dcraw</span><br><span class="line">2.1,如果相机底片有缩略图，则直接可以通过  dcraw  -e   test.dng  获得其缩略图（注意，缩略图也有不存在的时候）</span><br><span class="line"></span><br><span class="line">2.2,如果没有缩略图，则可以先将RAW格式的转化为ppm   dcraw  -v  test.dng  获取其ppm的图片；</span><br><span class="line">然后在通过ffmpeg可以将 ppm格式的图片转码jpg  ffmpeg  -i  test.ppm out.jpg </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Media</category>
      </categories>
      <tags>
        <tag>image</tag>
        <tag>RAW</tag>
      </tags>
  </entry>
  <entry>
    <title>系统io状态排查</title>
    <url>/article/4148759935.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;这几天在排查自己写的转码服务性能上不去，转码特别慢，正常情况下，转码时CPU可以飙到很高，但是在问题机器上CPU只要50%左右，排查了好久，最终确定是某个其它服务io资源占用了太多，导致了我的转码服务io占用几乎没有，所以出现了问题，介绍几个io的工具，帮助以后查看系统的情况。</p>
<h3 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;iostat主要是用来查看系统的io使用情况，<br>只记录自己使用的命令</p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install sysstat</span><br></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iostat [-c ] [ -d ] [ -k ] [ -m ] [ -x ]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Centos7</category>
      </categories>
      <tags>
        <tag>io</tag>
      </tags>
  </entry>
</search>
