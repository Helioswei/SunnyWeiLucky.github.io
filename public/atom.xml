<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Helios</title>
  
  <subtitle>喜爱古风的码农小哥哥</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunnyweilucky.github.io/"/>
  <updated>2020-05-07T10:17:12.268Z</updated>
  <id>https://sunnyweilucky.github.io/</id>
  
  <author>
    <name>Helioswei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo-next主题配置</title>
    <link href="https://sunnyweilucky.github.io/2020/05/07/hexo-next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>https://sunnyweilucky.github.io/2020/05/07/hexo-next主题配置/</id>
    <published>2020-05-07T08:46:52.000Z</published>
    <updated>2020-05-07T10:17:12.268Z</updated>
    
    <content type="html"><![CDATA[<p>主要记录一下自己在搭建个人博客的时候，一些配置，基本上是查阅别人的文章，这里记录一下</p><h3 id="一，hexo安装"><a href="#一，hexo安装" class="headerlink" title="一，hexo安装"></a>一，hexo安装</h3><p><a href="https://www.jianshu.com/p/eded1dd2d794" target="_blank" rel="noopener">hexo安装</a></p><p><a href="https://www.jianshu.com/p/b20fc983005f" target="_blank" rel="noopener">next主题设置</a></p><h3 id="二，添加LocalSearch搜索"><a href="#二，添加LocalSearch搜索" class="headerlink" title="二，添加LocalSearch搜索"></a>二，添加LocalSearch搜索</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> npm install hexo-generator-searchdb --save</span><br><span class="line"> </span><br><span class="line"> 编辑主题配置文件，启用本地搜素</span><br><span class="line"> # Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="三，网站访问量统计"><a href="#三，网站访问量统计" class="headerlink" title="三，网站访问量统计"></a>三，网站访问量统计</h3><p><img src="/images/blog/baidu.png" alt="baidu.png"></p><h3 id="四，阅读次数统计"><a href="#四，阅读次数统计" class="headerlink" title="四，阅读次数统计"></a>四，阅读次数统计</h3><p><a href="https://www.cnblogs.com/lijianming180/p/12433189.html" target="_blank" rel="noopener">LeanCloud添加阅读次数</a></p><h3 id="五，添加评论"><a href="#五，添加评论" class="headerlink" title="五，添加评论"></a>五，添加评论</h3><p><a href="https://blog.csdn.net/jiunian_2761/article/details/97388997" target="_blank" rel="noopener">valine</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要记录一下自己在搭建个人博客的时候，一些配置，基本上是查阅别人的文章，这里记录一下&lt;/p&gt;
&lt;h3 id=&quot;一，hexo安装&quot;&gt;&lt;a href=&quot;#一，hexo安装&quot; class=&quot;headerlink&quot; title=&quot;一，hexo安装&quot;&gt;&lt;/a&gt;一，hexo安装&lt;/h3
      
    
    </summary>
    
      <category term="hexo" scheme="https://sunnyweilucky.github.io/categories/hexo/"/>
    
    
      <category term="next" scheme="https://sunnyweilucky.github.io/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>cuda-cuda10.0安装</title>
    <link href="https://sunnyweilucky.github.io/2020/05/07/cuda-cuda10-0%E5%AE%89%E8%A3%85/"/>
    <id>https://sunnyweilucky.github.io/2020/05/07/cuda-cuda10-0安装/</id>
    <published>2020-05-07T02:48:26.000Z</published>
    <updated>2020-05-07T08:21:06.421Z</updated>
    
    <content type="html"><![CDATA[<p>​        在转码的过程中，我们可以使用硬件来进行转码的加速，今天记录一下在Centos7环境下安装驱动以及cuda模块。</p><h3 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h3><p><code>如果打算安装CUDA10.0及以上的版本则不需要单独安装驱动，cuda10.0自带驱动驱动</code><strong>忽略该驱动的安装</strong></p><p><a href="https://www.nvidia.cn/Download/Find.aspx?lang=cn&amp;QNF=1" target="_blank" rel="noopener">驱动下载地址</a></p><p>例如我们下载Quadro P2000 linux64的驱动</p><p><img src="/images/cuda/图片1.png" alt="图片1.png"></p><p><img src="/images/cuda/图片2.png" alt="图片2.png"></p><p>之所以安装这个驱动是因为要安装的cuda10.0也是410的，之后运行安装驱动程序就好了。</p><h3 id="安装cuda10-0"><a href="#安装cuda10-0" class="headerlink" title="安装cuda10.0"></a>安装cuda10.0</h3><h5 id="1，下载安装包"><a href="#1，下载安装包" class="headerlink" title="1，下载安装包"></a>1，下载安装包</h5><p>​    <a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=CentOS&amp;target_version=7&amp;target_type=runfilelocal" target="_blank" rel="noopener">安装包下载</a>    在该网站上下载安装包</p><p><img src="/images/cuda/图片3.png" alt="图片3.png"></p><h5 id="2，版本选择"><a href="#2，版本选择" class="headerlink" title="2，版本选择"></a>2，版本选择</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过以下按钮选择历史版本的cuda，找到10.0下载，然后选择对应的系统</span><br></pre></td></tr></table></figure><p><img src="/images/cuda/图片4.png" alt="图片4.png"></p><h5 id="3，运行-run文件"><a href="#3，运行-run文件" class="headerlink" title="3，运行.run文件"></a>3，运行.run文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下载完安装包放在linux上直接运行.run文件</span><br><span class="line"></span><br><span class="line">chmod +x cuda_10.0.130_410.48_linux.run </span><br><span class="line">./cuda_10.0.130_410.48_linux.run</span><br></pre></td></tr></table></figure><h5 id="4，然后一直按回车键直到："><a href="#4，然后一直按回车键直到：" class="headerlink" title="4，然后一直按回车键直到："></a>4，然后一直按回车键直到：</h5><p><img src="/images/cuda/图片5.png" alt="图片5.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">回答：accept</span><br></pre></td></tr></table></figure><h5 id="5，是否安装驱动"><a href="#5，是否安装驱动" class="headerlink" title="5，是否安装驱动"></a>5，是否安装驱动</h5><p><img src="/images/cuda/图片6.png" alt="图片6.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是否安装驱动，这里选择安装：y,因为我们自己没有提前安装驱动，如果提前安装过驱动，这里就不选择安装：n</span><br></pre></td></tr></table></figure><h5 id="6，是否安装OpenGL"><a href="#6，是否安装OpenGL" class="headerlink" title="6，是否安装OpenGL"></a>6，是否安装OpenGL</h5><p><img src="/images/cuda/图片7.png" alt="图片7.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择;n</span><br></pre></td></tr></table></figure><h5 id="7，是否安装x-config"><a href="#7，是否安装x-config" class="headerlink" title="7，是否安装x-config"></a>7，是否安装x-config</h5><p><img src="/images/cuda/图片8.png" alt="图片8.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择：n</span><br></pre></td></tr></table></figure><h5 id="8，是否安装Toolkit"><a href="#8，是否安装Toolkit" class="headerlink" title="8，是否安装Toolkit"></a>8，是否安装Toolkit</h5><p><img src="/images/cuda/图片10.png" alt="图片10.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择：y</span><br></pre></td></tr></table></figure><h5 id="9，cuda目录"><a href="#9，cuda目录" class="headerlink" title="9，cuda目录"></a>9，cuda目录</h5><p><img src="/images/cuda/图片11.png" alt="图片11.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接回车，选择默认安装路径</span><br></pre></td></tr></table></figure><h5 id="10，是否创建软连接"><a href="#10，是否创建软连接" class="headerlink" title="10，是否创建软连接"></a>10，是否创建软连接</h5><p><img src="/images/cuda/图片12.png" alt="图片12.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择：y</span><br></pre></td></tr></table></figure><h5 id="11，是否安装示例"><a href="#11，是否安装示例" class="headerlink" title="11，是否安装示例"></a>11，是否安装示例</h5><p><img src="/images/cuda/图片13.png" alt="图片13.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">为了节约空间，这个不安装</span><br><span class="line">选择：n</span><br></pre></td></tr></table></figure><h5 id="12，然后开始安装"><a href="#12，然后开始安装" class="headerlink" title="12，然后开始安装"></a>12，然后开始安装</h5><p><img src="/images/cuda/图片14.png" alt="图片14.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表示安装成功</span><br></pre></td></tr></table></figure><h5 id="13，添加配置文件"><a href="#13，添加配置文件" class="headerlink" title="13，添加配置文件"></a>13，添加配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim  /etc/profile</span><br><span class="line">写入：</span><br><span class="line">export PATH=/usr/local/cuda-10.0/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH</span><br><span class="line">保存：</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h5 id="14，卸载驱动及cuda"><a href="#14，卸载驱动及cuda" class="headerlink" title="14，卸载驱动及cuda"></a>14，卸载驱动及cuda</h5><p><img src="/images/cuda/图片15.png" alt="图片15.png"></p><font color="red"><strong>注意</strong></font><p><code>1,千万不要重复安装显卡驱动，会导致系统损坏</code></p><p><code>2.升级cuda的时候，一定要将旧版本的cuda卸载干净，否则会出现意想不到的错误</code></p><h5 id="15，查看命令"><a href="#15，查看命令" class="headerlink" title="15，查看命令"></a>15，查看命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1，检查显卡类型</span><br><span class="line">yum install pciutils（如果没有这个命令，则下载）</span><br><span class="line">lspci | grep VGA</span><br></pre></td></tr></table></figure><p><img src="/images/cuda/图片17.png" alt="图片17.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2，检查安装是否成功</span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p><img src="/images/cuda/图片16.png" alt="图片16.png"></p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h5 id="1，-usr-bin-perl-bad-interpreter-No-such-file-or-directory"><a href="#1，-usr-bin-perl-bad-interpreter-No-such-file-or-directory" class="headerlink" title="1， /usr/bin/perl: bad interpreter: No such file or directory"></a>1， /usr/bin/perl: bad interpreter: No such file or directory</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">yum install perl</span><br></pre></td></tr></table></figure><h5 id="2，kernel源安装"><a href="#2，kernel源安装" class="headerlink" title="2，kernel源安装"></a>2，kernel源安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">检查系统版本</span><br><span class="line">uname -a</span><br><span class="line">yum install kernel-devel-$(uname -r) kernel-headers-$(uname -r)</span><br><span class="line">先查看源是否相同，如果没有则需要下载</span><br></pre></td></tr></table></figure><h5 id="3，禁用nouveau（对某些版本需要）"><a href="#3，禁用nouveau（对某些版本需要）" class="headerlink" title="3，禁用nouveau（对某些版本需要）"></a>3，禁用nouveau（对某些版本需要）</h5><h6 id="1，修改文件"><a href="#1，修改文件" class="headerlink" title="1，修改文件"></a>1，修改文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1，修改文件</span><br><span class="line">cd /etc/modprobe.d</span><br><span class="line">vim nvidia-installer-disable-nouveau.conf（如果没有这个文件，则手动生成）</span><br><span class="line"> </span><br><span class="line"> 内容：</span><br><span class="line"> # generated by nvidia-installer</span><br><span class="line"> blacklist nouveau</span><br><span class="line"> options nouveau modeset=0</span><br></pre></td></tr></table></figure><h6 id="2，备份-initramfs"><a href="#2，备份-initramfs" class="headerlink" title="2，备份 initramfs"></a>2，备份 initramfs</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).img.bak</span><br></pre></td></tr></table></figure><h6 id="3，重建-initramfs"><a href="#3，重建-initramfs" class="headerlink" title="3，重建 initramfs"></a>3，重建 initramfs</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dracut -v /boot/initramfs-$(uname -r).img $(uname -r)</span><br></pre></td></tr></table></figure><h6 id="4，重启机器"><a href="#4，重启机器" class="headerlink" title="4，重启机器"></a>4，重启机器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h6 id="5，检查nouveau-driver确保没有被加载"><a href="#5，检查nouveau-driver确保没有被加载" class="headerlink" title="5，检查nouveau driver确保没有被加载"></a>5，检查nouveau driver确保没有被加载</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br><span class="line">没有加载则为空，有加载则如图，说明设置没有生效，需要重新设置</span><br></pre></td></tr></table></figure><p><img src="/images/cuda/nouveau.png" alt="nouveau.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        在转码的过程中，我们可以使用硬件来进行转码的加速，今天记录一下在Centos7环境下安装驱动以及cuda模块。&lt;/p&gt;
&lt;h3 id=&quot;下载驱动&quot;&gt;&lt;a href=&quot;#下载驱动&quot; class=&quot;headerlink&quot; title=&quot;下载驱动&quot;&gt;&lt;/a&gt;下载
      
    
    </summary>
    
      <category term="cuda" scheme="https://sunnyweilucky.github.io/categories/cuda/"/>
    
    
      <category term="nvidia" scheme="https://sunnyweilucky.github.io/tags/nvidia/"/>
    
      <category term="驱动" scheme="https://sunnyweilucky.github.io/tags/%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>centos7-常用的命令</title>
    <link href="https://sunnyweilucky.github.io/2020/05/06/centos7-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <id>https://sunnyweilucky.github.io/2020/05/06/centos7-常用的命令/</id>
    <published>2020-05-06T06:52:04.000Z</published>
    <updated>2020-05-06T08:11:53.402Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下自己常用的centos7上的命令行</p><h3 id="mount挂载"><a href="#mount挂载" class="headerlink" title="mount挂载"></a>mount挂载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">虚拟机和主机共享目录</span><br><span class="line">mount -t cifs //192.168.30.97/code /mnt -o username=Administrator,password=Helios</span><br><span class="line"></span><br><span class="line">/code 是主机上的目录，需要设置为共享的</span><br><span class="line">username 为主机的用户名</span><br><span class="line">password 是主机的密码</span><br><span class="line">/mnt 是虚拟机上的目录</span><br><span class="line"></span><br><span class="line">卸载：</span><br><span class="line">umount /mnt</span><br><span class="line">卸载失败可以重启服务器</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下自己常用的centos7上的命令行&lt;/p&gt;
&lt;h3 id=&quot;mount挂载&quot;&gt;&lt;a href=&quot;#mount挂载&quot; class=&quot;headerlink&quot; title=&quot;mount挂载&quot;&gt;&lt;/a&gt;mount挂载&lt;/h3&gt;&lt;figure class=&quot;highlight
      
    
    </summary>
    
      <category term="centos7" scheme="https://sunnyweilucky.github.io/categories/centos7/"/>
    
    
  </entry>
  
  <entry>
    <title>centos7-epel源下载</title>
    <link href="https://sunnyweilucky.github.io/2020/05/06/centos7-epel%E6%BA%90%E4%B8%8B%E8%BD%BD/"/>
    <id>https://sunnyweilucky.github.io/2020/05/06/centos7-epel源下载/</id>
    <published>2020-05-06T03:20:01.000Z</published>
    <updated>2020-05-06T03:23:35.251Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一，什么是epel"><a href="#一，什么是epel" class="headerlink" title="一，什么是epel"></a>一，什么是epel</h3><p><strong>EPEL的全称叫 Extra Packages for Enterprise Linux</strong> 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。</p><p>如果你知道rpmfusion.org的话，拿 rpmfusion 做比较还是很恰当的，rpmfusion 主要为桌面发行版提供大量rpm包，而<strong><em>EPEL则为服务器版本提供大量的rpm包，而且大多数rpm包在官方 repository 中是找不到的\</em></strong></p><p>另外一个特点是<strong>绝大多数rpm包要比官方repository 的rpm包版本要来得新</strong>。所以，我们有时候在yum下载的时候如果没有找到某个包或者版本过低，可以使用这个方式来尝试。</p><h3 id="二，yum下载"><a href="#二，yum下载" class="headerlink" title="二，yum下载"></a>二，yum下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一，什么是epel&quot;&gt;&lt;a href=&quot;#一，什么是epel&quot; class=&quot;headerlink&quot; title=&quot;一，什么是epel&quot;&gt;&lt;/a&gt;一，什么是epel&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;EPEL的全称叫 Extra Packages for Enterp
      
    
    </summary>
    
      <category term="centos7" scheme="https://sunnyweilucky.github.io/categories/centos7/"/>
    
    
      <category term="yum源" scheme="https://sunnyweilucky.github.io/tags/yum%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>centos7-163yum源下载</title>
    <link href="https://sunnyweilucky.github.io/2020/05/06/centos7-163yum%E6%BA%90%E4%B8%8B%E8%BD%BD/"/>
    <id>https://sunnyweilucky.github.io/2020/05/06/centos7-163yum源下载/</id>
    <published>2020-05-06T03:14:01.000Z</published>
    <updated>2020-05-06T03:19:41.533Z</updated>
    
    <content type="html"><![CDATA[<p>我们在centos7上下载东西的时候，有时候自带的源里面没有我们需要的软件，所有我们需要更换源来进行下载</p><h3 id="一，下载repo文件"><a href="#一，下载repo文件" class="headerlink" title="一，下载repo文件"></a>一，下载repo文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br></pre></td></tr></table></figure><h3 id="二，备份并且替代系统的repo文件"><a href="#二，备份并且替代系统的repo文件" class="headerlink" title="二，备份并且替代系统的repo文件"></a>二，备份并且替代系统的repo文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp  CentOS7-Base-163.repo  /etc/yum.repos.d/ </span><br><span class="line"></span><br><span class="line">cd /etc/yum.repos.d/ </span><br><span class="line"></span><br><span class="line">mv CentOS-Base.repo CentOS-Base.repo.bak </span><br><span class="line"></span><br><span class="line">mv CentOS7-Base-163.repo CentOS-Base.repo</span><br></pre></td></tr></table></figure><h3 id="三，执行yum源更新命令"><a href="#三，执行yum源更新命令" class="headerlink" title="三，执行yum源更新命令"></a>三，执行yum源更新命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum clean all </span><br><span class="line"></span><br><span class="line">yum makecache </span><br><span class="line"></span><br><span class="line">yum update</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在centos7上下载东西的时候，有时候自带的源里面没有我们需要的软件，所有我们需要更换源来进行下载&lt;/p&gt;
&lt;h3 id=&quot;一，下载repo文件&quot;&gt;&lt;a href=&quot;#一，下载repo文件&quot; class=&quot;headerlink&quot; title=&quot;一，下载repo文件&quot;&gt;
      
    
    </summary>
    
      <category term="centos7" scheme="https://sunnyweilucky.github.io/categories/centos7/"/>
    
    
      <category term="yum" scheme="https://sunnyweilucky.github.io/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sunnyweilucky.github.io/2020/05/06/hello-world/"/>
    <id>https://sunnyweilucky.github.io/2020/05/06/hello-world/</id>
    <published>2020-05-06T03:13:27.174Z</published>
    <updated>2020-05-06T03:13:27.174Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mupdf-源码安装</title>
    <link href="https://sunnyweilucky.github.io/2020/04/29/mupdf-%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/"/>
    <id>https://sunnyweilucky.github.io/2020/04/29/mupdf-源码安装/</id>
    <published>2020-04-29T03:44:14.000Z</published>
    <updated>2020-05-06T03:13:27.176Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一，源码下载"><a href="#一，源码下载" class="headerlink" title="一，源码下载"></a>一，源码下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">直接到官网上下载源码包</span><br><span class="line">https://www.mupdf.com/downloads/index.html</span><br><span class="line">mupdf-1.16.1-source.tar.gz</span><br></pre></td></tr></table></figure><h3 id="二，相关依赖下载"><a href="#二，相关依赖下载" class="headerlink" title="二，相关依赖下载"></a>二，相关依赖下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</span><br><span class="line">You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses</span><br><span class="line"></span><br><span class="line">yum install freeglut-devel</span><br></pre></td></tr></table></figure><h3 id="三，编译安装"><a href="#三，编译安装" class="headerlink" title="三，编译安装"></a>三，编译安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make prefix=/usr/local install</span><br></pre></td></tr></table></figure><h3 id="四，使用注意"><a href="#四，使用注意" class="headerlink" title="四，使用注意"></a>四，使用注意</h3><p>在cmake的项目中使用静态库的时候，你只能生成静态链接库，在生成应用的时候，链接静态库和动态库都是一样的用法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一，源码下载&quot;&gt;&lt;a href=&quot;#一，源码下载&quot; class=&quot;headerlink&quot; title=&quot;一，源码下载&quot;&gt;&lt;/a&gt;一，源码下载&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="doc" scheme="https://sunnyweilucky.github.io/categories/doc/"/>
    
    
      <category term="pdf" scheme="https://sunnyweilucky.github.io/tags/pdf/"/>
    
  </entry>
  
  <entry>
    <title>opencv-源码安装</title>
    <link href="https://sunnyweilucky.github.io/2020/04/29/opencv-%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/"/>
    <id>https://sunnyweilucky.github.io/2020/04/29/opencv-源码安装/</id>
    <published>2020-04-29T03:41:25.000Z</published>
    <updated>2020-05-06T03:13:27.176Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一，源码下载"><a href="#一，源码下载" class="headerlink" title="一，源码下载"></a>一，源码下载</h3><p>​        通过git源码下载OpenCV，直接在GitHub上下载的速度特别慢，所以我们需要先将其fork，然后同步到gitee上面，通过自己的gitee账号来进行下载，这个速度比较快。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/helioswei/opencv.git</span><br></pre></td></tr></table></figure><h3 id="二，源码编译"><a href="#二，源码编译" class="headerlink" title="二，源码编译"></a>二，源码编译</h3><h5 id="1，cmake版本需求"><a href="#1，cmake版本需求" class="headerlink" title="1，cmake版本需求"></a>1，cmake版本需求</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMake 3.5.1 or higher is required.  You are running version 2.8.12.2</span><br><span class="line">我们需要先源码编译cmake</span><br></pre></td></tr></table></figure><h5 id="2，安装相关的依赖"><a href="#2，安装相关的依赖" class="headerlink" title="2，安装相关的依赖"></a>2，安装相关的依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1，需要Python的依赖包</span><br></pre></td></tr></table></figure><h5 id="2，编译"><a href="#2，编译" class="headerlink" title="2，编译"></a>2，编译</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在OpenCV目录中，创建build目录，然后直接cmake</span><br><span class="line">cd opencv</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一，源码下载&quot;&gt;&lt;a href=&quot;#一，源码下载&quot; class=&quot;headerlink&quot; title=&quot;一，源码下载&quot;&gt;&lt;/a&gt;一，源码下载&lt;/h3&gt;&lt;p&gt;​        通过git源码下载OpenCV，直接在GitHub上下载的速度特别慢，所以我们需要先将其f
      
    
    </summary>
    
      <category term="opencv" scheme="https://sunnyweilucky.github.io/categories/opencv/"/>
    
    
      <category term="centos7" scheme="https://sunnyweilucky.github.io/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>mysql-centos7源码安装mysql8.0</title>
    <link href="https://sunnyweilucky.github.io/2020/04/17/mysql-centos7%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mysql8-0/"/>
    <id>https://sunnyweilucky.github.io/2020/04/17/mysql-centos7源码安装mysql8-0/</id>
    <published>2020-04-17T02:24:23.000Z</published>
    <updated>2020-05-06T03:13:27.176Z</updated>
    
    <content type="html"><![CDATA[<pre><code>因为直接通过yum安装的是mariadb，所以我们需要通过另外的方法来进行安装</code></pre><h3 id="一，下载mysql"><a href="#一，下载mysql" class="headerlink" title="一，下载mysql"></a>一，下载mysql</h3><p>地址：<a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/yum/</a>。选择对应版本下载</p><h3 id="二，使用wget下载"><a href="#二，使用wget下载" class="headerlink" title="二，使用wget下载"></a>二，使用wget下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在网站上看对应的版本号就好了</span><br><span class="line">wget https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="三，安装mysql的源"><a href="#三，安装mysql的源" class="headerlink" title="三，安装mysql的源"></a>三，安装mysql的源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y localinstall mysql80-community-release-el7-1.noarch.rpm（对应版本）</span><br></pre></td></tr></table></figure><h3 id="四，在线安装mysql"><a href="#四，在线安装mysql" class="headerlink" title="四，在线安装mysql"></a>四，在线安装mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><h3 id="五，linux下设置不区分大小写"><a href="#五，linux下设置不区分大小写" class="headerlink" title="五，linux下设置不区分大小写"></a>五，linux下设置不区分大小写</h3><ol><li>使用root账号登录，修改/etc/my.cnf；</li><li>在[mysqld]下加入一行：lower_case_table_names=1</li><li>mysqld –user=mysql –lower-case-table-names=1 –initialize-insecure datadir=/var/lib/mysql</li></ol><h3 id="六，设置开机自启"><a href="#六，设置开机自启" class="headerlink" title="六，设置开机自启"></a>六，设置开机自启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h3 id="七，修改本地root的密码"><a href="#七，修改本地root的密码" class="headerlink" title="七，修改本地root的密码"></a>七，修改本地root的密码</h3><ol><li>查看root账户的临时密码，vim  /var/log/mysqld.log</li><li>登录mysql，mysql -u root -p，输入1，中的临时密码</li><li>ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘你的密码’;<br>修改密码为 你的密码 (备注：默认密码策略要求密码必须是大小写字母数字特殊字母的组合，至少8位)</li></ol><h3 id="八，-修改密码策略要求"><a href="#八，-修改密码策略要求" class="headerlink" title="八， 修改密码策略要求"></a>八， 修改密码策略要求</h3><p>~默认密码策略要求密码是大小写字母+数字+特殊字母的组合而且最少8位,不需要修改策略的可以跳过这步~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1，查看密码的策略</span><br><span class="line">SHOW VARIABLES LIKE &apos;validate_password%&apos;;</span><br><span class="line">2，修改密码的策略</span><br><span class="line">set global validate_password.check_user_name=OFF;</span><br><span class="line">set global validate_password.policy=LOW;</span><br><span class="line">set global validate_password.length=4;</span><br><span class="line">flush privileges;</span><br><span class="line">3，修改密码</span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;root&apos;;</span><br></pre></td></tr></table></figure><h3 id="九，设置允许远程连接"><a href="#九，设置允许远程连接" class="headerlink" title="九，设置允许远程连接"></a>九，设置允许远程连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1，重新登录mysql；</span><br><span class="line">2，选择mysql表； use mysql;</span><br><span class="line">3,更新表的内容；</span><br><span class="line">update user set Host=&apos;%&apos; where User=&apos;root&apos;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; WITH GRANT OPTION;//可能会报错，执行两次即可（不成功就再flush privileges;一次）</span><br></pre></td></tr></table></figure><h3 id="十，查看加密方式"><a href="#十，查看加密方式" class="headerlink" title="十，查看加密方式"></a>十，查看加密方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select user, host, plugin, authentication_string from user\G;查看加密方式</span><br><span class="line">8.0加密方式（caching_sha2_password）有些客户端还不支持 ，导致客户端连接失败，所以使用mysql_native_password加密</span><br><span class="line">alter user &apos;root&apos;@&apos;%&apos; identified with mysql_native_password by &apos;helios2020&apos;;</span><br></pre></td></tr></table></figure><h3 id="九，卸载mysql"><a href="#九，卸载mysql" class="headerlink" title="九，卸载mysql"></a>九，卸载mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">删除Mysql</span><br><span class="line">yum remove mysql mysql-server mysql-libs mysql-server;</span><br><span class="line">find / -name mysql 将找到的相关东西delete掉</span><br><span class="line">(rm -rf /var/lib/mysql)；</span><br><span class="line">rpm -qa|grep mysql(查询出来的东东yum remove掉)</span><br><span class="line">rm /etc/my.cnf （可能不存在）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;因为直接通过yum安装的是mariadb，所以我们需要通过另外的方法来进行安装
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;一，下载mysql&quot;&gt;&lt;a href=&quot;#一，下载mysql&quot; class=&quot;headerlink&quot; title=&quot;一，下载mysql&quot;
      
    
    </summary>
    
      <category term="mysql" scheme="https://sunnyweilucky.github.io/categories/mysql/"/>
    
    
      <category term="tools" scheme="https://sunnyweilucky.github.io/tags/tools/"/>
    
      <category term="centos7" scheme="https://sunnyweilucky.github.io/tags/centos7/"/>
    
      <category term="mysql" scheme="https://sunnyweilucky.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>gcc-5.1.0源码安装</title>
    <link href="https://sunnyweilucky.github.io/2020/04/17/gcc-5-1-0%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/"/>
    <id>https://sunnyweilucky.github.io/2020/04/17/gcc-5-1-0源码安装/</id>
    <published>2020-04-17T02:15:55.000Z</published>
    <updated>2020-05-06T03:13:27.173Z</updated>
    
    <content type="html"><![CDATA[<p>对于一些源码的编译如poco库，需要的GCC的版本要求比较高，所以需要源码编译GCC、</p><h3 id="一，源码下载"><a href="#一，源码下载" class="headerlink" title="一，源码下载"></a>一，源码下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">地址：</span><br><span class="line">https://ftp.gnu.org/gnu/gcc/</span><br><span class="line">gcc-5.1.0 可以支持C++14</span><br></pre></td></tr></table></figure><h3 id="二，依赖环境安装"><a href="#二，依赖环境安装" class="headerlink" title="二，依赖环境安装"></a>二，依赖环境安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd gcc-5.1.0</span><br><span class="line">./contrib/download_prerequisites</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Building GCC requires GMP 4.2+, MPFR 2.4.0+ and MPC 0.8.0+</span><br><span class="line">地址：</span><br><span class="line">ftp://gcc.gnu.org/pub/gcc/infrastructure/</span><br><span class="line"></span><br><span class="line">wget ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2</span><br><span class="line">wget ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2</span><br><span class="line">wget ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz</span><br></pre></td></tr></table></figure><h3 id="三，依赖解压安装"><a href="#三，依赖解压安装" class="headerlink" title="三，依赖解压安装"></a>三，依赖解压安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1，安装gmp</span><br><span class="line">tar -jxvf gmp-6.1.0.tar.bz2</span><br><span class="line">cd gmp-6.1.0</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">error:No usable m4 in $PATH or /usr/5bin</span><br><span class="line">yum install m4</span><br><span class="line"></span><br><span class="line">2,安装mpfr</span><br><span class="line">tar -jxvf mpfr-3.1.4.tar.bz2</span><br><span class="line">cd mpfr-3.1.4</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">3,安装mpc</span><br><span class="line">tar -zxvf mpc-1.0.3.tar.gz</span><br><span class="line">cd mpc-1.0.3</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="四，源码安装"><a href="#四，源码安装" class="headerlink" title="四，源码安装"></a>四，源码安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./configure  --enable-checking=release --enable-languages=c,c++ --disable-multilib</span><br><span class="line">make </span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">#将链接复制</span><br><span class="line">cp -vf /usr/local/lib64/libstdc++.*  /usr/lib64/</span><br><span class="line">gcc -v</span><br><span class="line">gcc version 5.1.0 (GCC)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于一些源码的编译如poco库，需要的GCC的版本要求比较高，所以需要源码编译GCC、&lt;/p&gt;
&lt;h3 id=&quot;一，源码下载&quot;&gt;&lt;a href=&quot;#一，源码下载&quot; class=&quot;headerlink&quot; title=&quot;一，源码下载&quot;&gt;&lt;/a&gt;一，源码下载&lt;/h3&gt;&lt;figur
      
    
    </summary>
    
      <category term="gcc" scheme="https://sunnyweilucky.github.io/categories/gcc/"/>
    
    
      <category term="cpp" scheme="https://sunnyweilucky.github.io/tags/cpp/"/>
    
      <category term="tools" scheme="https://sunnyweilucky.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>poco-源码编译包含mysql</title>
    <link href="https://sunnyweilucky.github.io/2020/04/17/poco-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8C%85%E5%90%ABmysql/"/>
    <id>https://sunnyweilucky.github.io/2020/04/17/poco-源码编译包含mysql/</id>
    <published>2020-04-17T02:08:59.000Z</published>
    <updated>2020-05-06T03:13:27.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一，源码下载库"><a href="#一，源码下载库" class="headerlink" title="一，源码下载库"></a>一，源码下载库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先在git上fork，然后同步到码云上，在clone可以加快下载的速度</span><br><span class="line">git clone https://gitee.com/helioswei/poco.git</span><br></pre></td></tr></table></figure><h3 id="二，编译环境准备"><a href="#二，编译环境准备" class="headerlink" title="二，编译环境准备"></a>二，编译环境准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++ make openssl-devel</span><br></pre></td></tr></table></figure><h3 id="三，安装mysql"><a href="#三，安装mysql" class="headerlink" title="三，安装mysql"></a>三，安装mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">见mysql的源码安装，安装时没有头文件，所以我们需要安装头文件</span><br><span class="line">yum install mysql-devel</span><br></pre></td></tr></table></figure><h3 id="四，编译"><a href="#四，编译" class="headerlink" title="四，编译"></a>四，编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需要提前安装GCC5.1.0来支持c++14</span><br><span class="line">./configure --shared --prefix=/usr/local/poco  --cflags=-std=c++14 --include-path=/usr/include/mysql/ --library-path=/usr/lib64/mysql/ --omit=Data/ODBC,MongoDB,PDF</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一，源码下载库&quot;&gt;&lt;a href=&quot;#一，源码下载库&quot; class=&quot;headerlink&quot; title=&quot;一，源码下载库&quot;&gt;&lt;/a&gt;一，源码下载库&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="poco" scheme="https://sunnyweilucky.github.io/categories/poco/"/>
    
    
      <category term="cpp" scheme="https://sunnyweilucky.github.io/tags/cpp/"/>
    
      <category term="mysql" scheme="https://sunnyweilucky.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>image-libraw相机图片库源码编译</title>
    <link href="https://sunnyweilucky.github.io/2020/01/17/image-libraw%E7%9B%B8%E6%9C%BA%E5%9B%BE%E7%89%87%E5%BA%93%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <id>https://sunnyweilucky.github.io/2020/01/17/image-libraw相机图片库源码编译/</id>
    <published>2020-01-17T09:37:04.000Z</published>
    <updated>2020-05-06T03:13:27.175Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LibRaw is a library for reading RAW files from digital photo cameras (CRW/CR2, NEF, RAF, DNG, MOS, KDC, DCR, etc, virtually all RAW formats are supported).</span><br></pre></td></tr></table></figure><h3 id="一，源码下载"><a href="#一，源码下载" class="headerlink" title="一，源码下载"></a>一，源码下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/LibRaw/LibRaw.git</span><br></pre></td></tr></table></figure><h3 id="二，编译环境准备"><a href="#二，编译环境准备" class="headerlink" title="二，编译环境准备"></a>二，编译环境准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1，查看文件DEVELOPER-NOTES，提示我们,执行mkdist.sh脚本来生成编译的东西</span><br><span class="line">2， 安装需要的软件</span><br><span class="line"> yum install autoconf automake freetype-devel gcc gcc-c++ libtool make pkgconfig -y</span><br><span class="line"> yum install wget -y</span><br><span class="line"> yum install lcms2 lcms2-devel -y</span><br><span class="line"> yum install jasper jasper-devel</span><br></pre></td></tr></table></figure><h3 id="三，准备编译遇到的错误"><a href="#三，准备编译遇到的错误" class="headerlink" title="三，准备编译遇到的错误"></a>三，准备编译遇到的错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下载dcraw.c失败，我们需要手动的下载</span><br><span class="line">修改mkdist.sh脚本文件</span><br><span class="line">wget https://www.dechifro.org/dcraw/dcraw.c</span><br><span class="line">然后在执行 mkdist.sh脚本</span><br></pre></td></tr></table></figure><h3 id="四，编译"><a href="#四，编译" class="headerlink" title="四，编译"></a>四，编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/helios CXX=/usr/local/bin/g++</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="五，执行遇到的问题"><a href="#五，执行遇到的问题" class="headerlink" title="五，执行遇到的问题"></a>五，执行遇到的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在程序中执行 open_file CR2的时候程序崩溃，因为自己的g++编译是4.8.5的，但是更新到4.9.2后就成功了</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="图片处理" scheme="https://sunnyweilucky.github.io/categories/image/"/>
    
    
      <category term="centos7" scheme="https://sunnyweilucky.github.io/tags/centos7/"/>
    
      <category term="image" scheme="https://sunnyweilucky.github.io/tags/image/"/>
    
      <category term="lib.so" scheme="https://sunnyweilucky.github.io/tags/lib-so/"/>
    
  </entry>
  
  <entry>
    <title>image-图片处理库总结</title>
    <link href="https://sunnyweilucky.github.io/2020/01/15/image-%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E5%BA%93%E6%80%BB%E7%BB%93/"/>
    <id>https://sunnyweilucky.github.io/2020/01/15/image-图片处理库总结/</id>
    <published>2020-01-15T01:47:54.000Z</published>
    <updated>2020-05-06T03:13:27.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一，提取exif信息的库"><a href="#一，提取exif信息的库" class="headerlink" title="一，提取exif信息的库"></a>一，提取exif信息的库</h3><p><a href="https://www.exiv2.org/" target="_blank" rel="noopener">Exif</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exiv2 是一个用来提取图片中的EXIF、LPTC 和 XMP 元数据信息的C++类库。同时还提供了命令行工具。示例代码： Exiv2::Image::AutoPtr image =Exiv2::ImageFactory::open(argv[1]);assert(image.get() != 0);image-&gt;readMetadata(); Exi... 更多Exiv2信息</span><br></pre></td></tr></table></figure><p><a href="https://github.com/libvips/libvips" target="_blank" rel="noopener">libvips</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">libvips是一个需求驱动的水平线程 图像处理库。与类似的库相比，libvips运行迅速且几乎不占用内存。libvips是根据LGPL 2.1+许可的。</span><br><span class="line"></span><br><span class="line">它具有约300种运算， 涵盖算术，直方图，卷积，形态运算，频率滤波，颜色，重采样，统计等。它支持多种数字类型，从8位int到128位复数。图像可以具有任意数量的波段。它支持各种图像格式，包括JPEG，TIFF，PNG，WebP，HEIC，FITS，Matlab，OpenEXR，PDF，SVG，HDR，PPM / PGM / PFM，CSV，GIF，分析，NIfTI，DeepZoom和OpenSlide 。它还可以通过ImageMagick或GraphicsMagick加载图像，使其与DICOM等格式一起使用。</span><br><span class="line"></span><br><span class="line">主要用这个处理苹果平台heic图片格式的转码</span><br></pre></td></tr></table></figure><p><a href="http://cimg.eu/" target="_blank" rel="noopener">CImg</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">就一个.h文件所以用起来很简明，但感觉功能上不如CxImage。可以与CxImage配合使用，因为CImg提供了基于</span><br><span class="line">lapack的矩阵运算函数和完善的线性滤波卷积函数，同时CImg做像素运算还是很方便的。另外，独有Display类可以方便的</span><br><span class="line">实现各种显示，包括显示图像、打字、画线等等。还有，该库有个基于光流的多尺度图像配准例子，很好.</span><br><span class="line"></span><br><span class="line">使用很方便，但是对于特殊的格式如heic，相机原生格式不支持</span><br></pre></td></tr></table></figure><p><a href="https://www.libraw.org/docs" target="_blank" rel="noopener">libraw</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LibRaw是一个用于从数码相机读取RAW文件的库（CRW / CR2，NEF，RAF，DNG，MOS，KDC，DCR等，实际上支持所有RAW格式）。</span><br><span class="line"></span><br><span class="line">它特别注意正确检索后续RAW转换所需的数据。</span><br><span class="line"></span><br><span class="line">该库旨在使用RAW文件作为初始数据嵌入RAW转换器，数据分析器和其他程序中。</span><br></pre></td></tr></table></figure><p><a href="https://www.codeproject.com/Articles/1300/CxImage" target="_blank" rel="noopener">CxImage</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">对CxImage考察的印象：该开发包完全开放源代码，图像封装为一个类，功能极为强大，与Windows、MFC支持极好，支</span><br><span class="line">持图像的多种操作（线性滤波、中值滤波、直方图操作、旋转缩放、区域选取、阈值处理、膨胀腐蚀、alpha混合等等），支</span><br><span class="line">持从文件、内存或者win32api定义的位图图像格式中读取图像，支持将图像显示在任意窗口，功能可谓很强大了，而且对像</span><br><span class="line">素的操作很方便，另外还有一个界面很强的demo，可以直接在上面进行二次开发，推荐使用！</span><br><span class="line">缺点：里面的子库很多，用起来可能较麻烦；而且感觉速度稍慢，不如后面提到的freeimage</span><br><span class="line">但功能真的十分强大啊！</span><br><span class="line"></span><br><span class="line">主要使用这个处理相机原生图片，可以linux下自己不会编译</span><br></pre></td></tr></table></figure><p><a href="https://opencv.org/" target="_blank" rel="noopener">OpenCV</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">对OpenCV的印象：功能十分的强大，而且支持目前先进的图像处理技术，体系十分完善，操作手册很详细，手册首先给大</span><br><span class="line">家补计算机视觉的知识，几乎涵盖了近10年内的主流算法；然后将图像格式和矩阵运算，然后将各个算法的实现函数。我用</span><br><span class="line">它来做了一个Harris角点检测器和Canny边缘检测器，总共就花了一个小时（第一次用OpenCV）。而且该库显示图像极其</span><br><span class="line">方便，两句话就可以。但该库似乎不大稳定，对32F和16S、8U的图像数据支持上bug重重。我用cvFilter2D函数进行线性</span><br><span class="line">滤波，屡屡出错，后来一查原来是大bug。后来用cvmGet来取矩阵元素也是频繁出错，仔细检查了N遍确保程序没问题之后</span><br><span class="line">在yahoogroup上找到答案：仍然是bug。。。但好歹该库是开放的，所以自己可以修改；而且支持CVS。另外该库用的是</span><br><span class="line">IPL矩阵库，速度奇快～～</span><br><span class="line"></span><br><span class="line">目前没有使用</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一，提取exif信息的库&quot;&gt;&lt;a href=&quot;#一，提取exif信息的库&quot; class=&quot;headerlink&quot; title=&quot;一，提取exif信息的库&quot;&gt;&lt;/a&gt;一，提取exif信息的库&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.exiv2.org
      
    
    </summary>
    
      <category term="图片处理" scheme="https://sunnyweilucky.github.io/categories/image/"/>
    
    
      <category term="centos7" scheme="https://sunnyweilucky.github.io/tags/centos7/"/>
    
      <category term="image" scheme="https://sunnyweilucky.github.io/tags/image/"/>
    
      <category term="lib.so" scheme="https://sunnyweilucky.github.io/tags/lib-so/"/>
    
  </entry>
  
  <entry>
    <title>image-libvips图片处理库源码编译</title>
    <link href="https://sunnyweilucky.github.io/2020/01/15/image-libvips%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E5%BA%93%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <id>https://sunnyweilucky.github.io/2020/01/15/image-libvips图片处理库源码编译/</id>
    <published>2020-01-15T01:43:01.000Z</published>
    <updated>2020-05-06T03:13:27.175Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">目前主要是用于苹果平台图片heic图片的转码处理</span><br></pre></td></tr></table></figure><h3 id="1，从GitHub上下载源码"><a href="#1，从GitHub上下载源码" class="headerlink" title="1，从GitHub上下载源码"></a>1，从GitHub上下载源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  clone  https://github.com/libvips/libvips.git</span><br></pre></td></tr></table></figure><h3 id="2，下载需要的依赖"><a href="#2，下载需要的依赖" class="headerlink" title="2，下载需要的依赖"></a>2，下载需要的依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install gtk-doc</span><br><span class="line">yum install gobject-introspection</span><br><span class="line">yum install gobject-introspection-devel</span><br><span class="line">yum install expat-devel</span><br><span class="line">yum install glib glib-devel</span><br><span class="line">yum install gcc gcc-c++</span><br><span class="line">yum install make pkgconfig autoconf automake</span><br></pre></td></tr></table></figure><h3 id="3，编译出现的问题"><a href="#3，编译出现的问题" class="headerlink" title="3，编译出现的问题"></a>3，编译出现的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libpango-1.0.so: undefined reference to `fribidi_get_par_embedding_levels_ex&apos;</span><br><span class="line"></span><br><span class="line">检查ldd /usr/lib64/libpango-1.0.so发现，有一个ibfribidi.so.0 =&gt; /lib64/libfribidi.so.0链接开始链接的是我自己的，有问题，改回来就好了，可能是版本冲突的原因，需要保证链接库的版本一致</span><br></pre></td></tr></table></figure><h3 id="3，安装我们需要支持的图片格式依赖"><a href="#3，安装我们需要支持的图片格式依赖" class="headerlink" title="3，安装我们需要支持的图片格式依赖"></a>3，安装我们需要支持的图片格式依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yum install -y libjpeg-turbo libjpeg-turbo-devel</span><br><span class="line">yum install -y libexif libexif-devel</span><br><span class="line">yum install -y giflib giflib-devel</span><br><span class="line">yum install -y librsvg2 librsvg2-devel</span><br><span class="line">yum install -y libtiff libtiff-devel </span><br><span class="line">yum install -y libwebp libwebp-devel</span><br><span class="line">yum install -y libpng libpng-devel</span><br><span class="line">yum install -y  libgsf libgsf-devel</span><br><span class="line">yum install -y poppler-glib poppler-glib-devel</span><br><span class="line">yum install -y openslide openslide-devel</span><br><span class="line">yum install -y orc orc-devel</span><br><span class="line">yum install -y libimagequant libimagequant-devel</span><br><span class="line">yum install -y cfitsio cfitsio-devel</span><br><span class="line">yum install -y matio matio-devel</span><br><span class="line">yum install -y fftw fftw-devel</span><br></pre></td></tr></table></figure><h3 id="4，安装libheif"><a href="#4，安装libheif" class="headerlink" title="4，安装libheif"></a>4，安装libheif</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1,git 源码安装libde265,## 注意这个必须安装，不然在编译libvips时，虽然configure表示支持，但是在真正使用的时候会报错</span><br><span class="line"></span><br><span class="line">2，git源码安装libheif，需要注意 配置libde265支持</span><br></pre></td></tr></table></figure><h4 id="5，编译"><a href="#5，编译" class="headerlink" title="5，编译"></a>5，编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1，./configure</span><br><span class="line">2,make &amp;&amp; make install</span><br><span class="line">自己写的myconfig.sh文件</span><br><span class="line"></span><br><span class="line">  1 #!/bin/sh                                                                                                                          </span><br><span class="line">  2 commoninclude=/usr/include</span><br><span class="line">  3 commonlib=/usr/lib64</span><br><span class="line">  4  </span><br><span class="line">  5 CPPFLAGS=&quot;-g -Wall -I$&#123;commoninclude&#125;  -L$&#123;commonlib&#125;&quot;    \</span><br><span class="line">  6 CXXFLAGS=&quot;-g -Wall -I$&#123;commoninclude&#125;  -L$&#123;commonlib&#125;&quot;    \</span><br><span class="line">  7 PKG_CONFIG_PATH=&quot;/usr/local/lib/pkgconfig:/usr/local/heif/lib/pkgconfig&quot;         \</span><br><span class="line">  8 ./configure  --enable-gtk-doc-pdf=yes --prefix=/usr/local/vips    \</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="图片处理" scheme="https://sunnyweilucky.github.io/categories/image/"/>
    
    
      <category term="centos7" scheme="https://sunnyweilucky.github.io/tags/centos7/"/>
    
      <category term="image" scheme="https://sunnyweilucky.github.io/tags/image/"/>
    
      <category term="lib.so" scheme="https://sunnyweilucky.github.io/tags/lib-so/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg-源码编译支持GPU</title>
    <link href="https://sunnyweilucky.github.io/2020/01/14/ffmpeg-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E6%94%AF%E6%8C%81GPU/"/>
    <id>https://sunnyweilucky.github.io/2020/01/14/ffmpeg-源码编译支持GPU/</id>
    <published>2020-01-14T11:09:01.000Z</published>
    <updated>2020-05-06T03:13:27.172Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>​    源码编译需要很多的库的支持，一种是基础的库，一种是你需要的编解码信息的库</p></blockquote><h2 id="一，ffmpeg源码的下载"><a href="#一，ffmpeg源码的下载" class="headerlink" title="一，ffmpeg源码的下载"></a>一，ffmpeg源码的下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在git上找个你需要的版本的库，直接通过git下载</span><br><span class="line">git clone https://github.com/FFmpeg/FFmpeg.git</span><br><span class="line"></span><br><span class="line">ffmpeg 版本 ffmpeg version n4.1.1-3-g53f3f52</span><br><span class="line">cuda 版本 CUDA Version 10.0.130（这个版本自带驱动，可以不用安装驱动）</span><br><span class="line">drive 驱动版本 Driver Version: 410.48 </span><br><span class="line">nv-codec-headers 版本 sdk/8.1</span><br></pre></td></tr></table></figure><h2 id="二，基础环境的准备"><a href="#二，基础环境的准备" class="headerlink" title="二，基础环境的准备"></a>二，基础环境的准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install autoconf automake freetype-devel gcc gcc-c++ git libtool make nasm pkgconfig zlib-devel bzip2 bzip2-devel</span><br></pre></td></tr></table></figure><h2 id="三，编码过程"><a href="#三，编码过程" class="headerlink" title="三，编码过程"></a>三，编码过程</h2><h4 id="1，设置环境路径"><a href="#1，设置环境路径" class="headerlink" title="1，设置环境路径"></a>1，设置环境路径</h4><blockquote><p>​    在  /etc/profile 文件中，设置 PKG_CONFIG_PATH  路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/lib/pkgconfig</span><br></pre></td></tr></table></figure><h4 id="2，编码"><a href="#2，编码" class="headerlink" title="2，编码"></a>2，编码</h4><blockquote><p>​    配置好configure之后，通过make可以一步步试探你缺少的库是什么，然后在下载，编译</p><p>下载完之后，通过命令来配置你需要的东西<br>./configure  –help</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">make 编译的常用命令</span><br><span class="line">./configure</span><br><span class="line">make -j 10 (编译，并行10个核来一起编译，可以取消)</span><br><span class="line">make install (安装)</span><br><span class="line">make disclean (卸载)</span><br><span class="line">make clean (清除编译)</span><br></pre></td></tr></table></figure><h4 id="3，解决gnutls的问题"><a href="#3，解决gnutls的问题" class="headerlink" title="3，解决gnutls的问题"></a>3，解决gnutls的问题</h4><p><img src="/images/gnutls.png" alt="gnutls"></p><blockquote><p>我们需要手动的安装gnutls，gnutls3.5.19版本的可以，大于这个版本的有问题,</p><p><a href="http://www.linuxfromscratch.org/blfs/view/svn/postlfs/gnutls.html" target="_blank" rel="noopener">http://www.linuxfromscratch.org/blfs/view/svn/postlfs/gnutls.html</a> </p><p>有安装的方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1,安装gnutls需要先安装gnutls，所有先手动下载这个</span><br><span class="line">wget https://ftp.gnu.org/gnu/nettle/nettle-3.1.1.tar.gz</span><br><span class="line">tar zxf nettle-3.1.1.tar.gz  </span><br><span class="line">./configure --enable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">2,安装gnutls</span><br><span class="line">wget https://www.gnupg.org/ftp/gcrypt/gnutls/v3.5/gnutls-3.5.19.tar.xz</span><br><span class="line">xz  -d gnutls-3.5.19.tar.xz</span><br><span class="line">tar xf gnutls-3.5.19.tar</span><br><span class="line">cd gnutls-3.5.19</span><br><span class="line">./configure --enable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>在安装gnutls时，我们使用./configure –enable-shared时，可能遇到以下的问题;</p><ul><li><p><img src="/images/gmp.png" alt="gmp"></p><blockquote><p>解决：</p><p>yum install gmp-devel</p></blockquote></li><li><p><img src="/images/libtasn1.png" alt="libtasn1.png"></p><blockquote><p>解决：</p><p>yum install libffi libffi-devel</p><p>./configure –enable-shared –with-included-libtasn1</p></blockquote></li></ul><ul><li><p><img src="/images/unistring.png" alt="unistring.png"></p><blockquote><p>解决：</p><p>yum install libunistring-devel</p><p>./configure –enable-shared –with-included-libtasn1 –with-included-unistring</p></blockquote></li><li><p><img src="/images/P11.png" alt="P11.png"></p><blockquote><p>解决：</p><p>yum install p11-kit-devel</p></blockquote></li><li><p><img src="/images/dnssec.png" alt="dnssec.png"></p><blockquote><p>yum install unbound unbound-devel unbound-libs</p><p>./configure –enable-shared –with-included-libtasn1 –with-included-unistring</p></blockquote></li></ul><h4 id="4，解决ladspa-h的问题"><a href="#4，解决ladspa-h的问题" class="headerlink" title="4，解决ladspa.h的问题"></a>4，解决ladspa.h的问题</h4><p><img src="/images/ladspa.png" alt="ladspa.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install  ladspa*</span><br></pre></td></tr></table></figure><h4 id="5，解决libass的问题"><a href="#5，解决libass的问题" class="headerlink" title="5，解决libass的问题"></a>5，解决libass的问题</h4><p><img src="/images/libass.png" alt="libass.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libass*</span><br></pre></td></tr></table></figure><h4 id="6，解决libdc1394-2的问题"><a href="#6，解决libdc1394-2的问题" class="headerlink" title="6，解决libdc1394-2的问题"></a>6，解决libdc1394-2的问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1,官网下载源码</span><br><span class="line">https://sourceforge.net/projects/libdc1394/files/libdc1394-2/</span><br><span class="line">2，编译</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="7，解决libgsm的问题"><a href="#7，解决libgsm的问题" class="headerlink" title="7，解决libgsm的问题"></a>7，解决libgsm的问题</h4><p><img src="/images/libgsm.png" alt="libgsm.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gsm-tools gsm-devel</span><br></pre></td></tr></table></figure><h4 id="8，解决libmp3lame版本的问题"><a href="#8，解决libmp3lame版本的问题" class="headerlink" title="8，解决libmp3lame版本的问题"></a>8，解决libmp3lame版本的问题</h4><p><img src="/images/libmp3lame.png" alt="libmp3lame.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">源码安装，地址</span><br><span class="line">git clone https://github.com/gypified/libmp3lame.git</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="9，解决libopencore-amrnb的问题"><a href="#9，解决libopencore-amrnb的问题" class="headerlink" title="9，解决libopencore_amrnb的问题"></a>9，解决libopencore_amrnb的问题</h4><p><img src="/images/libopencore_amrnb.png" alt="libopencore_amrnb.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">官网下载源码，再手动编译</span><br><span class="line">https://sourceforge.net/projects/opencore-amr/files/opencore-amr/</span><br><span class="line"> ./configure</span><br><span class="line"> make</span><br><span class="line"> make install</span><br></pre></td></tr></table></figure><h4 id="10，解决opencv的问题"><a href="#10，解决opencv的问题" class="headerlink" title="10，解决opencv的问题"></a>10，解决opencv的问题</h4><h4 id="11，解决openh264的问题"><a href="#11，解决openh264的问题" class="headerlink" title="11，解决openh264的问题"></a>11，解决openh264的问题</h4><p><img src="/images/openh264.png" alt="openh264.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">从git上下载源码</span><br><span class="line">git clone https://github.com/cisco/openh264</span><br><span class="line">如果下载失败，则直接下载zip包，然后解压安装</span><br><span class="line">make ARCH=x86_64</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="12，解决libopenjp2版本的问题"><a href="#12，解决libopenjp2版本的问题" class="headerlink" title="12，解决libopenjp2版本的问题"></a>12，解决libopenjp2版本的问题</h4><p><img src="/images/libopenjp2.png" alt="libopenjp2.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git下载源码来编译安装</span><br><span class="line">git clone https://github.com/uclouvain/openjpeg.git</span><br><span class="line">如果下载不下来，则下载zip包解压安装 </span><br><span class="line">unzip openjpeg-master.zip</span><br><span class="line">cmake 安装</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake .. -DCMAKE_BUILD_TYPE=Release</span><br><span class="line">make -j 10</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="13，解决opus的问题"><a href="#13，解决opus的问题" class="headerlink" title="13，解决opus的问题"></a>13，解决opus的问题</h4><p><img src="/images/opus.png" alt="opus.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#需要手动的下载安装</span><br><span class="line">https://ftp.osuosl.org/pub/xiph/releases/opus/</span><br><span class="line">#安装步骤</span><br><span class="line">wget http://downloads.xiph.org/releases/opus/opus-1.2.1.tar.gz</span><br><span class="line">tar -zxvf opus-1.2.1.tar.gz</span><br><span class="line">cd opus-1.2.1</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">#注意：如果pkg_config没有找到，需要手动的设置路径，见前面PKG_CONFIG_PATH路径的设置，如果设置好之后，库也存在还是不行，则要检查是否使用yum下载了低版本的，若是则删除</span><br><span class="line">yum remove opus-1.0.2-6.el7.x86_64 opus-tools-0.1.6-1.el7.x86_64 opusfile-0.5-1.el7.x86_64 opus-devel-1.0.2-6.el7.x86_64 opusfile-devel-0.5-1.el7.x86_64</span><br></pre></td></tr></table></figure><h4 id="14，解决libpulse的问题"><a href="#14，解决libpulse的问题" class="headerlink" title="14，解决libpulse的问题"></a>14，解决libpulse的问题</h4><h4 id="15，解决libsoxr的问题"><a href="#15，解决libsoxr的问题" class="headerlink" title="15，解决libsoxr的问题"></a>15，解决libsoxr的问题</h4><p><img src="/images/libsoxr.png" alt="libsoxr.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#手动下载包，然后编译安装</span><br><span class="line">https://sourceforge.net/projects/soxr/files/</span><br><span class="line">tar -xvf soxr-0.1.3-Source.tar</span><br><span class="line">./go</span><br><span class="line">cd Realse</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>在执行go的时候可能遇到这个问题,则需要下载cmake高级版本</p><p><img src="/images/go.png" alt="go.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># cmake 安装</span><br><span class="line">https://cmake.org/download/</span><br><span class="line">tar -zxvf cmake-3.13.0-rc1.tar.gz</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="16，解决speex的问题"><a href="#16，解决speex的问题" class="headerlink" title="16，解决speex的问题"></a>16，解决speex的问题</h4><p><img src="/images/speex.png" alt="speex.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">##手动下载安装包，编译，选择 libspeex下载</span><br><span class="line">https://xiph.org/downloads/</span><br><span class="line">./configure  --enable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="17，解决libtheora的问题"><a href="#17，解决libtheora的问题" class="headerlink" title="17，解决libtheora的问题"></a>17，解决libtheora的问题</h4><p><img src="/images/libtheora.png" alt="libtheora.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 手动下载安装包，编译，选择libtheora下载</span><br><span class="line">https://xiph.org/downloads/</span><br><span class="line">unzip libtheora-1.1.1.zip</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>在configure的过程中，可能error,则我们需要下载安装这个</p><p><img src="/images/ogg.png" alt="ogg.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libogg*</span><br></pre></td></tr></table></figure><h4 id="18，解决libv412的问题"><a href="#18，解决libv412的问题" class="headerlink" title="18，解决libv412的问题"></a>18，解决libv412的问题</h4><h4 id="19，解决vorbis的问题"><a href="#19，解决vorbis的问题" class="headerlink" title="19，解决vorbis的问题"></a>19，解决vorbis的问题</h4><p><img src="/images/vorbis.png" alt="vorbis.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xiph/vorbis.git</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure  --enable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="20，解决libx264的问题"><a href="#20，解决libx264的问题" class="headerlink" title="20，解决libx264的问题"></a>20，解决libx264的问题</h4><p><img src="/images/libx264.png" alt="h264.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth 1 http://git.videolan.org/git/x264</span><br><span class="line">./configure --enable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>如果编译时报错，则需要安装nasm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -O -L http://www.nasm.us/pub/nasm/releasebuilds/2.13.02/nasm-2.13.02.tar.bz2  </span><br><span class="line">tar -xjvf nasm-2.13.02.tar.bz2</span><br><span class="line">cd nasm-2.13.02</span><br><span class="line">./autogen.sh </span><br><span class="line">./configure  --enable-shared </span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="21，解决libx265的问题"><a href="#21，解决libx265的问题" class="headerlink" title="21，解决libx265的问题"></a>21，解决libx265的问题</h4><p><img src="/images/x265.png" alt="x265.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone  --depth 1 https://github.com/videolan/x265.git</span><br><span class="line">cd x265</span><br><span class="line">cd build</span><br><span class="line">cmake ../source</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="22，解决libxvid的问题"><a href="#22，解决libxvid的问题" class="headerlink" title="22，解决libxvid的问题"></a>22，解决libxvid的问题</h4><p><img src="/images/libxvid.png" alt="libxvid.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">##官网下载</span><br><span class="line">https://www.xvid.com/download/</span><br><span class="line">## 按下图过程来查找</span><br><span class="line">## 然后按照README来安装</span><br><span class="line">cd build/generic</span><br><span class="line">./configure</span><br><span class="line">make -j 10</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><img src="/images/xvid.png" alt=" xvid"></p><p><img src="C:/Users/Administrator/Desktop/leopard4.1/images/readme.png" alt="readme.png"></p><p><img src="/images/bar.png" alt="bar.png"></p><h4 id="23，解决openal的问题"><a href="#23，解决openal的问题" class="headerlink" title="23，解决openal的问题"></a>23，解决openal的问题</h4><p><img src="/images/openal.png" alt="openal.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openal-soft openal-soft-devel</span><br></pre></td></tr></table></figure><h4 id="24，解决libcdio的问题"><a href="#24，解决libcdio的问题" class="headerlink" title="24，解决libcdio的问题"></a>24，解决libcdio的问题</h4><h4 id="25，解决bzlib的问题"><a href="#25，解决bzlib的问题" class="headerlink" title="25，解决bzlib的问题"></a>25，解决bzlib的问题</h4><h4 id="26，解决libxcb的问题"><a href="#26，解决libxcb的问题" class="headerlink" title="26，解决libxcb的问题"></a>26，解决libxcb的问题</h4><p><img src="/images/libxcb.png" alt="libxcb.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libxcb-devel</span><br></pre></td></tr></table></figure><h2 id="四，添加硬件编解码"><a href="#四，添加硬件编解码" class="headerlink" title="四，添加硬件编解码"></a>四，添加硬件编解码</h2><h4 id="1，查看机器上显卡的型号"><a href="#1，查看机器上显卡的型号" class="headerlink" title="1，查看机器上显卡的型号"></a>1，查看机器上显卡的型号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep VGA</span><br></pre></td></tr></table></figure><p><img src="/images/vga.png" alt="vga"></p><h4 id="2，安装对应显卡的驱动"><a href="#2，安装对应显卡的驱动" class="headerlink" title="2，安装对应显卡的驱动"></a>2，安装对应显卡的驱动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.nvidia.com/Download/index.aspx?lang=en-us</span><br><span class="line">安装的方法见显卡驱动安装的文档</span><br></pre></td></tr></table></figure><h4 id="3，重新编译ffmpeg"><a href="#3，重新编译ffmpeg" class="headerlink" title="3，重新编译ffmpeg"></a>3，重新编译ffmpeg</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在./configure时添加以下的选项，来重新编译ffmpeg，既可以驱动显卡</span><br><span class="line">--enable-cuda-sdk \</span><br><span class="line">--enable-cuvid \</span><br><span class="line">--enable-nvenc \</span><br><span class="line">--enable-nonfree \</span><br><span class="line">--enable-libnpp \</span><br><span class="line">--extra-cflags=-I/usr/local/cuda/include \</span><br><span class="line">--extra-ldflags=-L/usr/local/cuda/lib64 \</span><br></pre></td></tr></table></figure><h4 id="4，查看是否安装成功"><a href="#4，查看是否安装成功" class="headerlink" title="4，查看是否安装成功"></a>4，查看是否安装成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用ffmpeg -hwaccels命令查看支持的硬件加速选项</span><br><span class="line">ffmpeg -hwaccels</span><br></pre></td></tr></table></figure><p><img src="/images/hw.png" alt="hw.png"></p><h4 id="5，查看cuvid提供的GPU编解码器"><a href="#5，查看cuvid提供的GPU编解码器" class="headerlink" title="5，查看cuvid提供的GPU编解码器"></a>5，查看cuvid提供的GPU编解码器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -codecs | grep cuvid</span><br></pre></td></tr></table></figure><p><img src="/images/cuvid.png" alt="cuvid.png"></p><h4 id="6，使用GPU进行转码"><a href="#6，使用GPU进行转码" class="headerlink" title="6，使用GPU进行转码"></a>6，使用GPU进行转码</h4><blockquote><p>用GPU进行转码的命令和软转码命令不太一样，CPU转码的时候，我们可以依赖ffmpeg识别输入视频的编码格式并选择对应的解码器，但ffmpeg只会自动选择CPU解码器，要让ffmpeg使用GPU解码器，必须先用ffprobe识别出输入视频的编码格式，然后在命令行中指定对应的GPU解码器。</p><p>例如，将h264编码的源视频转码为指定尺寸和码率的h264编码视频：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg  -hwaccel cuvid -c:v h264_cuvid -i video/video-H264-AAC.mkv -c:v h264_nvenc -b:v 2048k -vf scale_npp=1280:-1 -y /root/transcode.mp4</span><br><span class="line"></span><br><span class="line">-hwaccel cuvid：指定使用cuvid硬件加速</span><br><span class="line">-c:v h264_cuvid：使用h264_cuvid进行视频解码</span><br><span class="line">-c:v h264_nvenc：使用h264_nvenc进行视频编码</span><br><span class="line">-vf scale_npp=1280:-1：指定输出视频的宽高，注意，这里和软解码时使用的-vf scale=x:x不一样</span><br><span class="line">转码期间使用nvidia-smi查看显卡状态，能够看到ffmpeg确实是在使用GPU进行转码：</span><br></pre></td></tr></table></figure><p>如果在执行命令的时候报错，则需要,进行nv-codec-headers和驱动的版本匹配的处理</p><p><img src="/images/drive.png" alt="drive.png"></p><p>我开始编译nv-codec-headers使用的是最新版本9.1的，编译出错，有两种方法，一种是升级drive的版本，升级到430以上，这个比较的麻烦，另一种是降低nv-codec-headers的版本，我降低到8.1版本，就可以成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg 版本 ffmpeg version n4.1.1-3-g53f3f52</span><br><span class="line">cuda 版本 CUDA Version 10.0.130（这个版本自带驱动，可以不用安装驱动）</span><br><span class="line">drive 驱动版本 Driver Version: 410.48 </span><br><span class="line">nv-codec-headers 版本 sdk/8.1</span><br></pre></td></tr></table></figure><h4 id="7-在容器中使用NVIDIA"><a href="#7-在容器中使用NVIDIA" class="headerlink" title="7,在容器中使用NVIDIA"></a>7,在容器中使用NVIDIA</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在将自己的服务打包成镜像的时候，开始没有设置环境变量，导致怎么都无法调用NVIDIA进行硬件的转码；</span><br><span class="line">最后查询了很多的资料，发现需要添加一个环境变量，在Dockfile中</span><br><span class="line">ENV NVIDIA_DRIVER_CAPABILITIES video,compute,utility</span><br><span class="line">才能保证容器中使用成功</span><br></pre></td></tr></table></figure><h4 id="8，gpu和cpu转码测试"><a href="#8，gpu和cpu转码测试" class="headerlink" title="8，gpu和cpu转码测试"></a>8，gpu和cpu转码测试</h4><p>​    对于同一个视频，分别采用cpu和GPU两种方式来进行转码，对比这两者之间的效率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#机器信息</span><br><span class="line">逻辑核：24</span><br><span class="line">内存：64G</span><br><span class="line">24  Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz</span><br><span class="line">系统：CentOS Linux release 7.6.1810 (Core)</span><br><span class="line">#视频信息：</span><br><span class="line">name: 11.mkv</span><br><span class="line">size： 1.1G</span><br><span class="line">Video: h264 (High), yuv420p(progressive), 1280x720 [SAR 1:1 DAR 16:9], 25 fps, 25 tbr, 1k tbn, 50 tbc (default)</span><br><span class="line">Audio: ac3, 48000 Hz, stereo, fltp, 192 kb/s (default)</span><br><span class="line">#软件转码：</span><br><span class="line">[time] ffmpeg  -i video/11.mkv -c:v libx264 -b:v 2048k -vf scale=1280:-1 -y /root/transcode.mp4</span><br><span class="line">#结果</span><br><span class="line">real11m18.807s</span><br><span class="line">user180m16.290s</span><br><span class="line">sys1m36.925s</span><br><span class="line">cpu占用平均1600%</span><br><span class="line">[time] ./softhw /root/video/11.mkv /opt/nvitra1.mp4</span><br><span class="line">real14m51.166s</span><br><span class="line">user220m2.857s</span><br><span class="line">sys1m21.718s</span><br><span class="line">cpu占用  平均1600%</span><br><span class="line">#硬件转码：</span><br><span class="line">[time] ffmpeg  -hwaccel cuvid -c:v h264_cuvid -i video/11.mkv -c:v h264_nvenc -b:v 2048k -vf scale_npp=1280:-1 -y /root/transcode.mp4</span><br><span class="line">#结果</span><br><span class="line">real1m45.228s</span><br><span class="line">user1m15.910s</span><br><span class="line">sys0m18.734s</span><br><span class="line">cpu占用平均90%</span><br><span class="line">[time] ./hw /root/video/11.mkv /opt/nvitra.mp4</span><br><span class="line">real1m29.478s</span><br><span class="line">user0m22.754s</span><br><span class="line">sys0m23.465s</span><br><span class="line">cpu占用 50%</span><br></pre></td></tr></table></figure><h4 id="8，指定显卡进行转码"><a href="#8，指定显卡进行转码" class="headerlink" title="8，指定显卡进行转码"></a>8，指定显卡进行转码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -hwaccel cuvid -hwaccel_device 0 -c:v h264_cuvid -i &lt;input&gt; -c:v h264_nvenc -b:v 2048k -vf scale_npp=1280:-1 -y &lt;output&gt;</span><br><span class="line"></span><br><span class="line">ffmpeg -hwaccel cuvid -hwaccel_device 1 -c:v h264_cuvid -i &lt;input&gt; -c:v h264_nvenc -b:v 2048k -vf scale_npp=1280:-1 -y &lt;output&gt;</span><br><span class="line"></span><br><span class="line">ffmpeg -hwaccel cuvid -hwaccel_device 0 -c:v h264_cuvid -i /root/source_media/flv.flv -c:v h264_nvenc -b:v 2048k -vf scale_npp=1280:-1  -y /root/flv.mp4</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;​    源码编译需要很多的库的支持，一种是基础的库，一种是你需要的编解码信息的库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一，ffmpeg源码的下载&quot;&gt;&lt;a href=&quot;#一，ffmpeg源码的下载&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="ffmpeg" scheme="https://sunnyweilucky.github.io/categories/ffmpeg/"/>
    
    
      <category term="ffmpeg" scheme="https://sunnyweilucky.github.io/tags/ffmpeg/"/>
    
      <category term="centos7" scheme="https://sunnyweilucky.github.io/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>grpc编译</title>
    <link href="https://sunnyweilucky.github.io/2020/01/14/grpc%E7%BC%96%E8%AF%91/"/>
    <id>https://sunnyweilucky.github.io/2020/01/14/grpc编译/</id>
    <published>2020-01-14T10:54:12.000Z</published>
    <updated>2020-05-06T03:13:27.174Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">环境 centos7</span><br></pre></td></tr></table></figure><h2 id="一，安装编译依赖的环境"><a href="#一，安装编译依赖的环境" class="headerlink" title="一，安装编译依赖的环境"></a>一，安装编译依赖的环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pkgconfig autoconf automake libtool make gcc-c++ unzip</span><br><span class="line">yum install -y gflags-devel gtest-devel clang libcxx-devel</span><br><span class="line">yum install -y openssl  openssl-devel</span><br><span class="line">yum install -y  libunwind libunwind-devel</span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y golang</span><br></pre></td></tr></table></figure><h2 id="二，源码下载"><a href="#二，源码下载" class="headerlink" title="二，源码下载"></a>二，源码下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/grpc/grpc.git</span><br><span class="line">cd grpc</span><br><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure><h2 id="三，编译"><a href="#三，编译" class="headerlink" title="三，编译"></a>三，编译</h2><h4 id="1，编译cmake"><a href="#1，编译cmake" class="headerlink" title="1，编译cmake"></a>1，编译cmake</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">需要下载cmake高级版本，yum安装的版本太低</span><br><span class="line">https://cmake.org/download/</span><br><span class="line">源码安装cmake，</span><br><span class="line">（1）删除原来版本的cmake</span><br><span class="line">（2）./configure</span><br><span class="line">（3）make &amp;&amp; make install</span><br><span class="line">如果找不到，则创建软链接</span><br><span class="line">ln -s /usr/local/bin/cmake /usr/bin/cmake</span><br></pre></td></tr></table></figure><h4 id="2，先编译protobuf"><a href="#2，先编译protobuf" class="headerlink" title="2，先编译protobuf"></a>2，先编译protobuf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd third_party/protobuf</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=/usr/local/helios/protobuf</span><br><span class="line">make </span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">2,建立软链接</span><br><span class="line">ln -s /usr/local/helios/protobuf/bin/protoc /usr/local/bin/protoc</span><br><span class="line">检测是否安装成功</span><br><span class="line">protoc --version</span><br></pre></td></tr></table></figure><h4 id="3，编译grpc（cmake"><a href="#3，编译grpc（cmake" class="headerlink" title="3，编译grpc（cmake)"></a>3，编译grpc（cmake)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd grpc</span><br><span class="line">mkdir -p  cmake/build</span><br><span class="line">cmake -DBUILD_SHARED_LIBS=on -DCMAKE_INSTALL_PREFIX=/usr/local/helios/grpc -DCMAKE_BUILD_TYPE=DEBUG -Wno-dev ../../</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="4，编译（make-不建议使用）"><a href="#4，编译（make-不建议使用）" class="headerlink" title="4，编译（make,不建议使用）"></a>4，编译（make,不建议使用）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2,编译grpc</span><br><span class="line">cd grpc根目录</span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="5，问题"><a href="#5，问题" class="headerlink" title="5，问题"></a>5，问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">对于cpp的使用，当编译好了之后，运行helloworld程序，没有响应，有很大的问题</span><br><span class="line">https://github.com/grpc/grpc/issues/21280#issuecomment-558164977</span><br><span class="line"></span><br><span class="line">解决方法：修改源码（不使用）</span><br><span class="line">vim / src / core / lib / surface / init.cc</span><br><span class="line"></span><br><span class="line">diff --git a/src/core/lib/surface/init.cc b/src/core/lib/surface/init.cc</span><br><span class="line">index 2812427f7a..3c6a547b20 100644</span><br><span class="line">--- a/src/core/lib/surface/init.cc</span><br><span class="line">+++ b/src/core/lib/surface/init.cc</span><br><span class="line">@@ -156,7 +156,7 @@ void grpc_init(void) &#123;</span><br><span class="line">      * at the appropriate time */</span><br><span class="line">     grpc_register_security_filters();</span><br><span class="line">     register_builtin_channel_init();</span><br><span class="line">-    grpc_tracer_init();将源码中的这个给注销</span><br><span class="line">+    // grpc_tracer_init();</span><br><span class="line">     /* no more changes to channel init pipelines */</span><br><span class="line">     grpc_channel_init_finalize();</span><br><span class="line">     grpc_iomgr_start();</span><br><span class="line">     </span><br><span class="line">修改源码：</span><br><span class="line">vim src/core/lib/debug/trace.cc</span><br><span class="line"> void TraceFlagList::Add(TraceFlag* flag) &#123;</span><br><span class="line">+  TraceFlag* t;</span><br><span class="line">+  for (t = root_tracer_; t; t = t -&gt; next_tracer_) &#123;</span><br><span class="line">+       if (t == flag ) return;</span><br><span class="line">+  &#125;</span><br><span class="line">   flag-&gt;next_tracer_ = root_tracer_;</span><br><span class="line">   root_tracer_ = flag;</span><br><span class="line">遍历链表，如果存在则不加入</span><br></pre></td></tr></table></figure><h4 id="6，运行helloworld程序"><a href="#6，运行helloworld程序" class="headerlink" title="6，运行helloworld程序"></a>6，运行helloworld程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cd examples/cpp/helloworld</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">出现问题：</span><br><span class="line">which: no grpc_cpp_plugin in (/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)</span><br><span class="line">因为自己配置的路径，所以先给grpc_cpp_plugin  建立软连接</span><br><span class="line">ln -s /usr/local/helios/grpc/bin/grpc_cpp_plugin   /usr/local/bin/grpc_cpp_plugin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">helloworld.pb.h:10:40: fatal error: google/protobuf/port_def.inc: No such file or directory</span><br><span class="line">配置cpp头文件路径</span><br><span class="line">export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/usr/local/helios/grpc/include</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Package protobuf was not found in the pkg-config search path.</span><br><span class="line">Perhaps you should add the directory containing `protobuf.pc&apos;</span><br><span class="line">to the PKG_CONFIG_PATH environment variable</span><br><span class="line">No package &apos;protobuf&apos; found</span><br><span class="line">Package grpc was not found in the pkg-config search path.</span><br><span class="line">Perhaps you should add the directory containing `grpc.pc&apos;</span><br><span class="line">to the PKG_CONFIG_PATH environment variable</span><br><span class="line">No package &apos;grpc&apos; found</span><br><span class="line">配置pkgconfig搜索路径</span><br><span class="line">export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/helios/protobuf/lib/pkgconfig/:/usr/local/helios/grpc/lib/pkgconfig/</span><br><span class="line"></span><br><span class="line">error while loading shared libraries: libgrpc_plugin_support.so.1: cannot open shared object file</span><br><span class="line">配置cpp动态库搜索路径</span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/helios/grpc/lib/:/usr/local/helios/grpc/lib64/:/usr/local/helios/protobuf/lib</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="grpc" scheme="https://sunnyweilucky.github.io/categories/grpc/"/>
    
    
      <category term="grpc" scheme="https://sunnyweilucky.github.io/tags/grpc/"/>
    
      <category term="centos7" scheme="https://sunnyweilucky.github.io/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg-编码的步骤</title>
    <link href="https://sunnyweilucky.github.io/2019/05/05/ffmpeg-%E7%BC%96%E7%A0%81%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
    <id>https://sunnyweilucky.github.io/2019/05/05/ffmpeg-编码的步骤/</id>
    <published>2019-05-05T06:39:17.000Z</published>
    <updated>2020-05-06T03:13:27.173Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;总结一下编码的大致过程，方便自己下一次的处理，分为音频编码和视频</p><h3 id="音频编码的过程"><a href="#音频编码的过程" class="headerlink" title="音频编码的过程"></a>音频编码的过程</h3><h4 id="1，打开输出的文件流"><a href="#1，打开输出的文件流" class="headerlink" title="1，打开输出的文件流"></a>1，打开输出的文件流</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AVFormatContext *ofmt_ctx;</span><br><span class="line">avformat_alloc_output_context2(&amp;ofmt_ctx, NULL, NULL, filename);</span><br></pre></td></tr></table></figure><h4 id="2，创建输出的音频流"><a href="#2，创建输出的音频流" class="headerlink" title="2，创建输出的音频流"></a>2，创建输出的音频流</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">AVStream *audioStream;</span><br><span class="line">AVCodec *encoder;</span><br><span class="line">AVCodecContext *enc_ctx;</span><br><span class="line">audioStream = avformat_new_stream(ofmt_ctx, NULL);</span><br><span class="line">if (!audioStream)&#123;</span><br><span class="line">av_log();</span><br><span class="line">&#125;</span><br><span class="line">encoder = avcodec_find_encoder(AV_CODEC_ID_AAC);</span><br><span class="line">if(!encoder)&#123;</span><br><span class="line">av_log();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3，设置编码的上下文"><a href="#3，设置编码的上下文" class="headerlink" title="3，设置编码的上下文"></a>3，设置编码的上下文</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enc_ctx = avcodec_alloc_context3(encoder);</span><br><span class="line">if (!enc_ctx)&#123;</span><br><span class="line">av_log();</span><br><span class="line">&#125;</span><br><span class="line">enc_ctx -&gt; bit_rate = 64000;</span><br><span class="line">enc_ctx -&gt; sample_rate = 44100;</span><br><span class="line">enc_ctx -&gt; channel_layout = 2;//这个可以根据输入来设置</span><br><span class="line">enc_ctx -&gt; channels = av_get_channel_layout_nb_channels(enc_ctx -&gt; channel_layout);</span><br><span class="line">enc_ctx -&gt; sample_fmt = encoder -&gt; sample_fmts[0];</span><br><span class="line">AVRational time_base = &#123;1, enc_ctx -&gt; sample_rate&#125;;</span><br><span class="line">enc_ctx -&gt; time_base = time_base;</span><br></pre></td></tr></table></figure><h4 id="4，设置flag"><a href="#4，设置flag" class="headerlink" title="4，设置flag"></a>4，设置flag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (ofmt_ctx -&gt; oformat -&gt; flags &amp; AVFMT_GLOBALHEADER)</span><br><span class="line">enc_ctx -&gt; flags |= AV_CODEC_FLAG_GLOBAL_HEADER;</span><br></pre></td></tr></table></figure><h4 id="5，打开编码器"><a href="#5，打开编码器" class="headerlink" title="5，打开编码器"></a>5，打开编码器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ret = avcodec_open2(enc_ctx, encoder, NULL);</span><br><span class="line">if (ret &lt; 0)&#123;</span><br><span class="line">av_log();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6，设置codec-tag"><a href="#6，设置codec-tag" class="headerlink" title="6，设置codec_tag"></a>6，设置codec_tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">audioStream -&gt; codecpar -&gt; codec_tag = 0;</span><br></pre></td></tr></table></figure><h4 id="7，copy-code-to-stream"><a href="#7，copy-code-to-stream" class="headerlink" title="7，copy code to stream"></a>7，copy code to stream</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret = avcodec_parameters_from_context(audioStream -&gt; codecpar, enc_ctx);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;总结一下编码的大致过程，方便自己下一次的处理，分为音频编码和视频&lt;/p&gt;
&lt;h3 id=&quot;音频编码的过程&quot;&gt;&lt;a href=&quot;#音频编码的过程&quot; class=&quot;headerlink&quot; title=&quot;音频编码的过程&quot;&gt;&lt;/a&gt;音
      
    
    </summary>
    
      <category term="ffmpeg" scheme="https://sunnyweilucky.github.io/categories/ffmpeg/"/>
    
    
      <category term="ffmpeg" scheme="https://sunnyweilucky.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>系统io状态排查</title>
    <link href="https://sunnyweilucky.github.io/2019/04/28/%E7%B3%BB%E7%BB%9Fio%E7%8A%B6%E6%80%81%E6%8E%92%E6%9F%A5/"/>
    <id>https://sunnyweilucky.github.io/2019/04/28/系统io状态排查/</id>
    <published>2019-04-28T06:36:56.000Z</published>
    <updated>2020-05-06T03:13:27.178Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;这几天在排查自己写的转码服务性能上不去，转码特别慢，正常情况下，转码时CPU可以飙到很高，但是在问题机器上CPU只要50%左右，排查了好久，最终确定是某个其它服务io资源占用了太多，导致了我的转码服务io占用几乎没有，所以出现了问题，介绍几个io的工具，帮助以后查看系统的情况。</p><h3 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;iostat主要是用来查看系统的io使用情况，<br>只记录自己使用的命令</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install sysstat</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat [-c ] [ -d ] [ -k ] [ -m ] [ -x ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这几天在排查自己写的转码服务性能上不去，转码特别慢，正常情况下，转码时CPU可以飙到很高，但是在问题机器上CPU只要50%左右，排查了好久，最终确定是某个其它服务io资源占用了太多，导致了我的转码服务io占用几乎没有，所以出现
      
    
    </summary>
    
      <category term="centos7" scheme="https://sunnyweilucky.github.io/categories/centos7/"/>
    
    
      <category term="tools" scheme="https://sunnyweilucky.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>相机底片的解析</title>
    <link href="https://sunnyweilucky.github.io/2019/04/16/%E7%9B%B8%E6%9C%BA%E5%BA%95%E7%89%87%E7%9A%84%E8%A7%A3%E6%9E%90/"/>
    <id>https://sunnyweilucky.github.io/2019/04/16/相机底片的解析/</id>
    <published>2019-04-16T03:31:36.000Z</published>
    <updated>2020-05-06T03:13:27.178Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;公司要求对相机原生格式如后缀为dng,CR2等的图片进行转码，然后预览，自己查找了一下资料，目前仅仅是用命令行来进行处理的，因为我们是linux端的服务，所以直接封装命令行比较的简单。</p><h3 id="DNG数据格式的介绍"><a href="#DNG数据格式的介绍" class="headerlink" title="DNG数据格式的介绍"></a>DNG数据格式的介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://www.cnblogs.com/adong7639/p/4446828.html</span><br><span class="line">https://blog.csdn.net/wgx571859177/article/details/80755793?utm_source=blogxgwz1</span><br></pre></td></tr></table></figure><h3 id="DNG格式基本的概念"><a href="#DNG格式基本的概念" class="headerlink" title="DNG格式基本的概念"></a>DNG格式基本的概念</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  DNG格式是在TIFF的基础上扩展出来的，要了解DNG，需要清楚TIFF,</span><br><span class="line">TIFF/EP,DNG,RAW之间的关系。</span><br><span class="line">  DNG（Digital Negative）是Adobe开发的一种开发的raw image file format ,</span><br><span class="line">主要是为了统一不同厂商的raw格式。里面使用的tag基本上都定义在TIFF或者TIFF/EP 中，</span><br><span class="line">在DNG Sepcification中只是定义或者建议了数据的组织方式，颜色空间的转换等等。</span><br></pre></td></tr></table></figure><h3 id="TIFF-EP"><a href="#TIFF-EP" class="headerlink" title="TIFF/EP"></a>TIFF/EP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TIFF是一个灵活适应性强的文件格式。通过在文件标头中使用&quot;标签&quot;，它能够在一个</span><br><span class="line">文件中处理多幅图像和数据。标签能够标明图像的如图像大小这样的基本几何尺寸，</span><br><span class="line">或者定义图像数据是如何排列的，或者是否使用了各种各样的图像压缩选项。</span><br><span class="line"></span><br><span class="line">TIFF/EP的全称是&quot;Tag Image File Format / Electronic Photography&quot;。 </span><br><span class="line">它是一个名为&quot;Electronic still-picture imaging – Removable </span><br><span class="line">memory – Part 2: TIFF/EP image data format&quot;ISO标准， 标准号为</span><br><span class="line">ISO12234-2。TIFF/EP对TIFF文件扩展部分标记属性。</span><br></pre></td></tr></table></figure><h3 id="RAW"><a href="#RAW" class="headerlink" title="RAW"></a>RAW</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">RAW文件包含创建一个可视图像所必须的相机传感器数据信息。RAW文件的结构，包括ISO标准的RAW图像格式ISO 12234-2 ，TIFF / EP，往往遵循一个共同的模式，那就是：</span><br><span class="line"></span><br><span class="line">一个短的文件头，它通常包含文件的字节顺序，文件标识符和主数据的文件偏移量摄像传感器元数据，用来描述图像传感器的数据，包括传感器的尺寸， 颜色滤波矩阵(color filter array)的属性和它的颜色配置文件</span><br><span class="line"></span><br><span class="line">列入任何CMS环境或数据库中需要的图像元数据。这些措施包括曝光设定，相机/扫描仪/镜头模型，拍摄/扫描日期（和可选的位置信息），创作信息和其他。一些原始文件包含可交换图像格式的标准化元数据节；</span><br><span class="line"></span><br><span class="line">图像缩略图；</span><br><span class="line"></span><br><span class="line">可选的JPEG格式缩小尺寸的图像，可用于快速预览；</span><br><span class="line"></span><br><span class="line">在电影胶片扫描中，无论是文件序列的时间码，序列码或帧编号都代表在扫描卷轴中的帧顺序。这个项目允许文件被被按帧顺序排列（不依赖于它的文件名​）；</span><br><span class="line"></span><br><span class="line">传感器图像数据；</span><br></pre></td></tr></table></figure><h3 id="常见的RAW格式"><a href="#常见的RAW格式" class="headerlink" title="常见的RAW格式"></a>常见的RAW格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">许多RAW格式, 包括 3FR (Hasselblad), DCR, K25, KDC (Kodak), IIQ (Phase One), CR2 (Canon), </span><br><span class="line">ERF (Epson), MEF (Mamiya), MOS (Leaf), NEF (Nikon), ORF (Olympus), PEF (Pentax), </span><br><span class="line">RW2 (Panasonic) and ARW, SRF, SR2 (Sony), 都是基于TIFF格式。 这些文件可能在许多方面偏离TIFF标准，</span><br><span class="line">包括使用一个非标准的文件头，列入额外的图像标记和一些标签的数据加密。</span><br></pre></td></tr></table></figure><h3 id="TIFF-TIFF-EP-DNG-RAW之间的关系"><a href="#TIFF-TIFF-EP-DNG-RAW之间的关系" class="headerlink" title="TIFF, TIFF/EP, DNG, RAW之间的关系"></a>TIFF, TIFF/EP, DNG, RAW之间的关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TIFF和DNG同为Specification，分别定义了后缀名为.tif/.tiff和.dng的文件格式同时在TIFF Specification也定义个baseline及部分扩展的tag。</span><br><span class="line"></span><br><span class="line">TIFF/EP则定义并规范了在电子影像中所使用的TAG。</span><br><span class="line"></span><br><span class="line">DNG同时与TIFF和TIFF/EP兼容，并包含了EXIF和XMP信息。DNG实际上就是扩张的TIFF， 把DNG的扩展名改成TIF就可以直接预览图片。</span><br><span class="line"></span><br><span class="line">在DNG出现以前，各个数码相机制造商都有自己的格式，比如Canon(cr2/crw), Nikon(nef), Olympus(orf), Pentex(pef)等等。之所以出现这么多格式，一方面的原因是在这之前没有统一的raw格式， 但更重要的是，各个厂商希望用这个只对自己公开的数据格式来保护自己的私密信息。Adobe推出DNG希望能一统raw的天下。</span><br></pre></td></tr></table></figure><h3 id="处理不同格式RAW或者DNG底片的方法"><a href="#处理不同格式RAW或者DNG底片的方法" class="headerlink" title="处理不同格式RAW或者DNG底片的方法"></a>处理不同格式RAW或者DNG底片的方法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;为了能够得到RAW格式或者DNG格式的jpg图片供我们预览，可以使用DCRAW和ffmpeg来结合使用</p><h4 id="dcraw介绍"><a href="#dcraw介绍" class="headerlink" title="dcraw介绍"></a>dcraw介绍</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/bi_diu1368/article/details/80411304</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1,dcraw 下载   yum  install dcraw</span><br><span class="line">2.1,如果相机底片有缩略图，则直接可以通过  dcraw  -e   test.dng  获得其缩略图（注意，缩略图也有不存在的时候）</span><br><span class="line"></span><br><span class="line">2.2,如果没有缩略图，则可以先将RAW格式的转化为ppm   dcraw  -v  test.dng  获取其ppm的图片；</span><br><span class="line">然后在通过ffmpeg可以将 ppm格式的图片转码jpg  ffmpeg  -i  test.ppm out.jpg</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;公司要求对相机原生格式如后缀为dng,CR2等的图片进行转码，然后预览，自己查找了一下资料，目前仅仅是用命令行来进行处理的，因为我们是linux端的服务，所以直接封装命令行比较的简单。&lt;/p&gt;
&lt;h3 id=&quot;DNG数据格式的
      
    
    </summary>
    
      <category term="图片处理" scheme="https://sunnyweilucky.github.io/categories/image/"/>
    
    
      <category term="image" scheme="https://sunnyweilucky.github.io/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>hexo-常用命令</title>
    <link href="https://sunnyweilucky.github.io/2019/04/12/hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://sunnyweilucky.github.io/2019/04/12/hexo-常用命令/</id>
    <published>2019-04-12T10:35:51.000Z</published>
    <updated>2020-05-06T03:13:27.174Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;记录一下hexo经常使用的命令，发现自己好久没有hexo，命令都不记得了。</p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postname&quot; (hexo n postname)</span><br></pre></td></tr></table></figure><h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;pagename&quot;</span><br></pre></td></tr></table></figure><h3 id="启动本地web服务"><a href="#启动本地web服务" class="headerlink" title="启动本地web服务"></a>启动本地web服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server (hexo s)</span><br><span class="line">本地网址：localhost:4000</span><br></pre></td></tr></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate (hexo g)</span><br></pre></td></tr></table></figure><h3 id="生成部署"><a href="#生成部署" class="headerlink" title="生成部署"></a>生成部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h3 id="生成预览"><a href="#生成预览" class="headerlink" title="生成预览"></a>生成预览</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g</span><br></pre></td></tr></table></figure><h3 id="清理public文件夹"><a href="#清理public文件夹" class="headerlink" title="清理public文件夹"></a>清理public文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;记录一下hexo经常使用的命令，发现自己好久没有hexo，命令都不记得了。&lt;/p&gt;
&lt;h3 id=&quot;新建文章&quot;&gt;&lt;a href=&quot;#新建文章&quot; class=&quot;headerlink&quot; title=&quot;新建文章&quot;&gt;&lt;/a&gt;新建文章&lt;
      
    
    </summary>
    
      <category term="hexo" scheme="https://sunnyweilucky.github.io/categories/hexo/"/>
    
    
      <category term="tools" scheme="https://sunnyweilucky.github.io/tags/tools/"/>
    
      <category term="hexo" scheme="https://sunnyweilucky.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
